{"version":3,"file":"js/649.34143d754d567b79f6bd.js","mappings":"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","sources":["webpack:///./src/Components/SourcesSelect/index.js","webpack:///./src/Components/InstanceCounter/index.js","webpack:///./src/Components/InstanceCounter/constants.js","webpack:///./src/Utils/querySearch.js","webpack:///./src/Components/InstanceTypesSelect/index.js","webpack:///./src/Components/TemplateSelect/index.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/aws.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/gcp.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/azure.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/index.js","webpack:///./src/Components/RegionsSelect/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\n\nimport { imageProps } from '../ProvisioningWizard/helpers';\nimport { useSourcesForImage } from '../Common/Hooks/sources';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst SourcesSelect = ({ setValidation, image }) => {\n  const [{ chosenSource }, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState(null);\n  const selectObject = (id, name) => ({\n    id,\n    toString: () => name,\n    compareTo: (other) => other.id === id,\n  });\n  const { isLoading, error, sources } = useSourcesForImage(image, {\n    onSuccess: (sources) => {\n      if (chosenSource) {\n        setSelected(selectObject(chosenSource, sources.find((source) => source.id === chosenSource).name));\n        setValidation('success');\n      } else if (sources.length === 1) {\n        setSelected(selectObject(sources[0].id, sources[0].name));\n        setWizardContext((prevState) => ({\n          ...prevState,\n          chosenSource: sources[0].id,\n        }));\n        setValidation('success');\n      }\n    },\n  });\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      setSelected(null);\n      setWizardContext((prevState) => ({ ...prevState, chosenSource: null }));\n      setValidation('error');\n    } else {\n      setSelected(selection);\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenSource: selection.id,\n      }));\n      setValidation('success');\n    }\n    setIsOpen(false);\n  };\n\n  const selectItemsMapper = () =>\n    sources.map(({ name, id }) => <SelectOption aria-label=\"Source account\" key={id} value={selectObject(id, name)}></SelectOption>);\n\n  if (error) {\n    console.warn('Failed to fetch sources list');\n    return (\n      <>\n        <Alert ouiaId=\"select_account_alert\" variant=\"warning\" isInline title=\"There are problems fetching accounts\" />\n        <Select ouiaId=\"select_account_empty\" isDisabled placeholderText=\"No accounts found\" aria-label=\"Select account\" />\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading accounts\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_account\"\n      isOpen={isOpen}\n      onToggle={(openState) => setIsOpen(openState)}\n      selections={selected}\n      maxHeight=\"180px\"\n      // TODO decide if to disable the select\n      // isDisabled={sources?.length === 1}\n      onSelect={onSelect}\n      placeholderText=\"Select account\"\n      aria-label=\"Select account\"\n    >\n      {sources && selectItemsMapper()}\n    </Select>\n  );\n};\n\nSourcesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n  image: imageProps,\n};\n\nexport default SourcesSelect;\n","import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { NumberInput } from '@patternfly/react-core';\nimport { useWizardContext } from '../Common/WizardContext';\nimport { useQuery } from '@tanstack/react-query';\nimport { MAX_INSTANCES, MIN_INSTANCES, MAX_VCPU } from './constants';\nimport { fetchInstanceTypesList } from '../../API';\n\nconst InstanceCounter = ({ setValidation }) => {\n  const [{ chosenInstanceType, chosenNumOfInstances, chosenRegion, chosenSource, provider }, setWizardContext] = useWizardContext();\n  const { data: instanceTypes } = useQuery(['instanceTypes', chosenRegion], () => fetchInstanceTypesList(chosenRegion, provider), {\n    enabled: !!chosenRegion && !!chosenSource && !!chosenInstanceType,\n  });\n  const VCPUAmount = instanceTypes?.find((instanceType) => instanceType.name === chosenInstanceType)?.vcpus;\n\n  useEffect(() => {\n    setWarningValidation(chosenNumOfInstances);\n  }, [chosenInstanceType]);\n\n  const setWarningValidation = (newValue) => {\n    if (VCPUAmount * newValue > MAX_VCPU) {\n      setValidation('warning');\n    } else {\n      setValidation('success');\n    }\n  };\n\n  const onMinus = () => {\n    const newValue = chosenNumOfInstances - 1;\n    setWarningValidation(newValue);\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  const onChange = (event) => {\n    let input = Math.floor(Number(event.target.value));\n    if (input > MAX_INSTANCES) {\n      input = MAX_INSTANCES;\n    }\n    if (input < MIN_INSTANCES) {\n      input = MIN_INSTANCES;\n    }\n    setWarningValidation(input);\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: input,\n    }));\n  };\n\n  const onPlus = () => {\n    const newValue = chosenNumOfInstances + 1;\n    setWarningValidation(newValue);\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  const isWarning = VCPUAmount * chosenNumOfInstances > MAX_VCPU;\n\n  return (\n    <>\n      <NumberInput\n        max={MAX_INSTANCES}\n        min={MIN_INSTANCES}\n        value={chosenNumOfInstances}\n        validated={isWarning && 'warning'}\n        onMinus={onMinus}\n        onChange={onChange}\n        onPlus={onPlus}\n        inputName=\"instances\"\n        inputAriaLabel=\"number of instances\"\n        minusBtnAriaLabel=\"instances-minus\"\n        plusBtnAriaLabel=\"instances-plus\"\n      />\n    </>\n  );\n};\n\nInstanceCounter.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n};\n\nexport default InstanceCounter;\n","export const MAX_INSTANCES = 45;\nexport const MIN_INSTANCES = 1;\nexport const MAX_VCPU = 32;\n","const jsonata = require('jsonata');\n\nconst OPERATORS = ['<', '>', '='];\n\nconst parseQuery = (query) => {\n  query = query.replace('memory', 'memory_mib');\n  query = query.replace('storage', 'storage_gb');\n  if (OPERATORS.every((operator) => !query.includes(operator))) {\n    query = `name ~> /${query}/i`;\n  }\n  return `types[${query}]`;\n};\n\nexport const evaluateQuery = async (query, data) => {\n  const q = parseQuery(query);\n  const d = { types: data };\n  try {\n    const expression = jsonata(q);\n    const result = await expression.evaluate(d);\n    if (!result) return { error: false, result: [] };\n    return { error: false, result };\n  } catch (e) {\n    return { error: true, result: e };\n  }\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Spinner, Select, SelectOption, TextInput } from '@patternfly/react-core';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchInstanceTypesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\nimport { evaluateQuery } from '../../Utils/querySearch';\nimport _throttle from 'lodash/throttle';\n\nconst OPTIONS_PER_SCREEN = 3;\nconst sanitizeSearchValue = (str) => str.replace(/\\\\+$/, '');\n\nconst InstanceTypesSelect = ({ setValidation, architecture }) => {\n  const [{ chosenInstanceType, chosenRegion, chosenSource, provider }, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [numOptions, setNumOptions] = React.useState(OPTIONS_PER_SCREEN);\n  const [filteredTypes, setFilteredTypes] = React.useState(null);\n  const [isTypeSupported, setTypeSupported] = React.useState(true);\n  const [searchValue, setSearchValue] = React.useState();\n\n  const {\n    isInitialLoading: isLoading,\n    error,\n    data: instanceTypes,\n  } = useQuery(['instanceTypes', chosenRegion], () => fetchInstanceTypesList(chosenRegion, provider), {\n    staleTime: 5 * (60 * 1000), // data is considered fresh for 5 minutes (same as cacheTime)\n    select: (types) => types.filter((type) => type.architecture === architecture),\n    enabled: !!chosenRegion && !!chosenSource,\n    onError: () => {\n      setValidation('error');\n    },\n  });\n\n  if (!chosenSource || chosenSource === '') {\n    return (\n      <>\n        <TextInput\n          ouiaId=\"instance_type_readonly\"\n          className=\"pf-c-form-control\"\n          readOnly\n          type=\"text\"\n          value=\"Select account to load instances\"\n          id=\"input-readonly\"\n          aria-label=\"Select instance type - disabled\"\n        />\n      </>\n    );\n  }\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      const chosenInstanceType = instanceTypes.find((instanceType) => selection === instanceType.name);\n      if (chosenInstanceType) {\n        setTypeSupported(chosenInstanceType.supported);\n        setWizardContext((prevState) => ({\n          ...prevState,\n          chosenInstanceType: selection,\n        }));\n        chosenInstanceType.supported ? setValidation('success') : setValidation('warning');\n      } else {\n        setSearchValue(selection);\n      }\n      setIsOpen(false);\n    }\n  };\n\n  const clearSelection = () => {\n    setValidation('error');\n    setTypeSupported(true);\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenInstanceType: null,\n    }));\n    setIsOpen(false);\n  };\n\n  const queryFilter = async (search) => {\n    if (search.length > 0) {\n      const { error: queryError, result } = await evaluateQuery(search, instanceTypes);\n      if (queryError) {\n        setFilteredTypes([]);\n      } else if (Array.isArray(result)) {\n        setFilteredTypes(result);\n      } else if (result instanceof Object) {\n        setFilteredTypes([result]);\n      }\n    }\n  };\n\n  const onTypeaheadInputChange = (inputValue) => {\n    if (inputValue === '') {\n      setFilteredTypes(null);\n      return;\n    }\n    const search = sanitizeSearchValue(inputValue);\n    setNumOptions(OPTIONS_PER_SCREEN);\n    const throttledFilter = _throttle(queryFilter, 200);\n    throttledFilter(search);\n  };\n\n  const selectItemsMapper = (types, limit) => {\n    if (limit < types?.length) types = types.slice(0, limit);\n    return types?.map((instanceType, index) => (\n      <SelectOption\n        aria-label={`Instance Type ${instanceType.name}`}\n        key={index}\n        description={`${instanceType.cores || 'only vCPU'} cores |\n          ${instanceType.vcpus} vCPU |\n          ${(parseFloat(instanceType.memory_mib) / 1024).toFixed(1)} GiB memory |\n          ${instanceType.storage_gb > 0 ? instanceType.storage_gb + ' GB storage | ' : 'EBS only | '}\n          ${instanceType.architecture}`}\n        value={instanceType.name}\n      />\n    ));\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (error) {\n    return (\n      <>\n        <Select\n          validated=\"error\"\n          ouiaId=\"instance_type_empty\"\n          isDisabled\n          placeholderText=\"No instance types found\"\n          toggleAriaLabel=\"Select instance type\"\n        />\n      </>\n    );\n  }\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"loading instance type select\" />;\n  }\n\n  const types = filteredTypes || instanceTypes;\n\n  return (\n    <>\n      <Select\n        ouiaId=\"select_instance_type\"\n        variant=\"typeahead\"\n        id=\"instance_type_select\"\n        validated={!isTypeSupported && 'warning'}\n        typeAheadAriaLabel=\"Selected instance type\"\n        toggleAriaLabel=\"Select instance type\"\n        placeholderText=\"Select instance type\"\n        maxHeight=\"180px\"\n        isOpen={isOpen}\n        selections={chosenInstanceType || searchValue}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onFilter={() => {}}\n        isInputValuePersisted\n        onTypeaheadInputChanged={onTypeaheadInputChange}\n        {...(numOptions < types?.length && {\n          loadingVariant: {\n            text: `View more (${types.length - numOptions})`,\n            onClick: () => setNumOptions(numOptions + OPTIONS_PER_SCREEN),\n          },\n        })}\n      >\n        {selectItemsMapper(types, numOptions)}\n      </Select>\n    </>\n  );\n};\n\nInstanceTypesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n};\n\nexport default InstanceTypesSelect;\n","import React from 'react';\nimport { Select, SelectOption, Spinner, HelperText, HelperTextItem } from '@patternfly/react-core';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { useWizardContext } from '../Common/WizardContext';\nimport { fetchLaunchTemplates } from '../../API';\nimport { TEMPLATES_KEY } from '../../API/queryKeys';\n\nconst TemplatesSelect = () => {\n  const [{ chosenSource, chosenRegion, chosenTemplate }, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const {\n    error,\n    isInitialLoading: isLoading,\n    data: templates,\n  } = useQuery([TEMPLATES_KEY, `${chosenRegion}-${chosenSource}`], () => fetchLaunchTemplates(chosenSource, chosenRegion), {\n    enabled: !!chosenSource && !!chosenRegion,\n  });\n\n  const onClear = () => {\n    setWizardContext((prevState) => ({ ...prevState, chosenTemplate: undefined }));\n  };\n\n  const onSelect = (_, selectedTemplate, isPlaceholder) => {\n    if (!isPlaceholder) {\n      setWizardContext((prevState) => ({ ...prevState, chosenTemplate: templates.find((template) => template.name === selectedTemplate)?.id }));\n    }\n    setIsOpen(false);\n  };\n\n  const selectItemsMapper = () => templates.map(({ name, id }) => <SelectOption aria-label=\"template option\" key={id} value={name}></SelectOption>);\n  const chosenTemplateName = chosenTemplate && templates.find((template) => template.id === chosenTemplate)?.name;\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading templates\" />;\n  }\n\n  return (\n    <>\n      <Select\n        ouiaId=\"select_templates\"\n        isOpen={isOpen}\n        direction=\"up\"\n        onToggle={(openState) => setIsOpen(openState)}\n        selections={chosenTemplateName}\n        onSelect={onSelect}\n        maxHeight=\"180px\"\n        placeholderText={error || templates?.length === 0 ? 'No template found' : 'Select templates'}\n        aria-label=\"Select templates\"\n        clearSelectionsAriaLabel=\"clear template selection\"\n        onClear={onClear}\n        isDisabled={error || templates?.length === 0}\n        validated={error && 'error'}\n      >\n        {templates && selectItemsMapper()}\n      </Select>\n      {error && (\n        <HelperText id=\"template-error-inline\">\n          <HelperTextItem variant=\"error\">{`There are problems fetching templates: ${error?.message}`} </HelperTextItem>\n        </HelperText>\n      )}\n    </>\n  );\n};\n\nexport default TemplatesSelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Button, Text } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nimport { AWS_PROVIDER } from '../../../../constants';\nimport { imageProps } from '../../helpers';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport TemplatesSelect from '../../../TemplateSelect';\n\nconst AccountCustomizationsAWS = ({ setStepValidated, image }) => {\n  const [{ chosenSource, chosenRegion, chosenInstanceType }, setWizardContext] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: chosenSource ? 'success' : 'default',\n    types: chosenInstanceType ? 'success' : 'default',\n    amount: 'success',\n  });\n\n  const onRegionChange = ({ region, imageID }) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenRegion: region,\n      chosenImageID: imageID,\n    }));\n  };\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid == 'error' || valid == 'default');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  return (\n    <Form>\n      <Title ouiaId=\"account_custom_title\" headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | Amazon\n      </Title>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"aws-select-source\"\n      >\n        <SourcesSelect\n          image={image}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select region\"\n        isRequired\n        fieldId=\"aws-select-region\"\n        labelIcon={\n          <Popover bodyContent=\"Select available geographical region\">\n            <Button\n              ouiaId=\"region_help\"\n              type=\"button\"\n              aria-label=\"More info for regions field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-region\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <RegionsSelect provider={AWS_PROVIDER} onChange={onRegionChange} composeID={image.id} currentRegion={chosenRegion} />\n      </FormGroup>\n      <FormGroup\n        label=\"Select instance type\"\n        isRequired\n        validated={validations.types}\n        helperTextInvalid=\"There are problems fetching instance types.\"\n        helperText={validations.types === 'warning' && 'The selected specification does not meet minimum requirements for this image'}\n        fieldId=\"aws-select-instance-types\"\n        labelIcon={\n          <Popover\n            bodyContent={\n              <div>\n                Select AWS instance type based on your computing, memory, networking, or storage needs\n                <br />\n                <br />\n                <b>Tip:</b> You can filter by a query search, i.e:\n                <br />\n                <Text component=\"small\">{'vcpus = 2 and cores < 4 and memory < 4000'}</Text>\n              </div>\n            }\n          >\n            <Button\n              ouiaId=\"instance_type_help\"\n              type=\"button\"\n              aria-label=\"More info for instance types field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-types\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          architecture={image.architecture}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select template (optional)\"\n        fieldId=\"aws-select-template\"\n        labelIcon={\n          <Popover\n            bodyContent={\n              <span>\n                Launch templates contains the configuration information to launch an instance. Note that instance type and public SSH key will be\n                still required and will override template values. For further information and for creating launch templates{' '}\n                <a rel=\"noreferrer\" target=\"_blank\" href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html\">\n                  click here\n                </a>\n              </span>\n            }\n          >\n            <Button\n              ouiaId=\"template_help\"\n              type=\"button\"\n              aria-label=\"template field info\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-template\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <TemplatesSelect />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"aws-select-instance-counter\"\n        validated={validations.amount}\n        helperText={validations.amount === 'warning' && 'Launching many vCPUs might exceed service quota limit.'}\n        labelIcon={\n          <Popover bodyContent=\"Specify the number of AWS instances to be launched\">\n            <Button\n              ouiaId=\"instance_count_help\"\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceCounter\n          setValidation={(validation) =>\n            setValidation((prev) => ({\n              ...prev,\n              amount: validation,\n            }))\n          }\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsAWS.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n  image: imageProps,\n};\n\nexport default AccountCustomizationsAWS;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Button, Text } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nimport { GCP_PROVIDER } from '../../../../constants';\nimport { imageProps } from '../../helpers';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport TemplatesSelect from '../../../TemplateSelect';\n\nconst AccountCustomizationsGCP = ({ setStepValidated, image }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: wizardContext.chosenSource ? 'success' : 'default',\n    types: wizardContext.chosenInstanceType ? 'success' : 'default',\n    amount: 'success',\n  });\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid == 'error' || valid == 'default');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  const onRegionChange = ({ region, imageID }) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenRegion: region,\n      chosenImageID: imageID,\n    }));\n  };\n\n  return (\n    <Form>\n      <Title ouiaId=\"account_custom_title\" headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | Google cloud\n      </Title>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"gcp-select-source\"\n      >\n        <SourcesSelect\n          image={image}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select zone\"\n        isRequired\n        fieldId=\"gcp-select-zone\"\n        labelIcon={\n          <Popover headerContent={<div>GCP zones</div>}>\n            <Button\n              ouiaId=\"zone_help\"\n              type=\"button\"\n              aria-label=\"More info for zones field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"gcp-select-zone\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <RegionsSelect provider={GCP_PROVIDER} onChange={onRegionChange} composeID={image.id} currentRegion={wizardContext.chosenRegion} />\n      </FormGroup>\n      <FormGroup\n        label=\"Select machine type\"\n        isRequired\n        validated={validations.types}\n        helperTextInvalid=\"There are problems fetching instance types.\"\n        helperText={validations.types === 'warning' && 'The selected specification does not meet minimum requirements for this image'}\n        fieldId=\"gcp-select-machine-types\"\n        labelIcon={\n          <Popover\n            bodyContent={\n              <div>\n                Select GCP instance type based on your computing, memory, networking, or storage needs\n                <br />\n                <br />\n                <b>Tip:</b> You can filter by a query search, i.e:\n                <br />\n                <Text component=\"small\">{'vcpus = 2 and storage > 30 and memory < 4000'}</Text>\n              </div>\n            }\n          >\n            <Button\n              ouiaId=\"machine_type_help\"\n              type=\"button\"\n              aria-label=\"More info for machine types field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"gcp-select-machine-types\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          architecture={image.architecture}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select template (optional)\"\n        fieldId=\"gcp-select-template\"\n        labelIcon={\n          <Popover\n            bodyContent={\n              <span>\n                Launch templates contains the configuration information to launch an instance. Note that machine type and public SSH key will be still\n                required and will override template values. For further information and for creating launch templates{' '}\n                <a rel=\"noreferrer\" target=\"_blank\" href=\"https://cloud.google.com/compute/docs/instance-templates\">\n                  click here\n                </a>\n              </span>\n            }\n          >\n            <Button\n              ouiaId=\"template_help\"\n              type=\"button\"\n              aria-label=\"template field info\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"gcp-select-template\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <TemplatesSelect />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"gcp-select-instance-counter\"\n        validated={validations.amount}\n        helperText={validations.amount === 'warning' && 'Launching many vCPUs might exceed service quota limit.'}\n        labelIcon={\n          <Popover headerContent={<div>Number of GCP instances</div>}>\n            <Button\n              ouiaId=\"instance_count_help\"\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"gcp-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceCounter\n          setValidation={(validation) =>\n            setValidation((prev) => ({\n              ...prev,\n              amount: validation,\n            }))\n          }\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsGCP.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n  image: imageProps,\n};\nexport default AccountCustomizationsGCP;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Button, Text } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nimport { AZURE_PROVIDER } from '../../../../constants';\nimport { imageProps } from '../../helpers';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst AccountCustomizationsAzure = ({ setStepValidated, image }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: wizardContext.chosenSource ? 'success' : 'default',\n    types: wizardContext.chosenInstanceType ? 'success' : 'default',\n    amount: 'success',\n  });\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid == 'error' || valid == 'default');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  const onRegionChange = ({ region, imageID }) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenRegion: region,\n      chosenImageID: imageID,\n    }));\n  };\n\n  return (\n    <Form>\n      <Title ouiaId=\"account_custom_title\" headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | Azure\n      </Title>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"azure-select-source\"\n      >\n        <SourcesSelect\n          image={image}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select location\"\n        isRequired\n        fieldId=\"azure-select-location\"\n        labelIcon={\n          <Popover headerContent={<div>Azure locations</div>}>\n            <Button\n              ouiaId=\"location_help\"\n              type=\"button\"\n              aria-label=\"More info for location field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"azure-select-location\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <RegionsSelect provider={AZURE_PROVIDER} currentRegion={wizardContext.chosenRegion} onChange={onRegionChange} composeID={image.id} />\n      </FormGroup>\n      <FormGroup\n        label=\"Select instance size\"\n        isRequired\n        validated={validations.types}\n        helperTextInvalid=\"There are problems fetching instance types.\"\n        helperText={validations.types === 'warning' && 'The selected specification does not meet minimum requirements for this image'}\n        fieldId=\"azure-select-instance-size\"\n        labelIcon={\n          <Popover\n            bodyContent={\n              <div>\n                Select Azure instance type based on your computing, memory, networking, or storage needs\n                <br />\n                <br />\n                <b>Tip:</b> You can filter by a query search, i.e:\n                <br />\n                <Text component=\"small\">{'vcpus = 2 and storage > 30 and memory < 4000'}</Text>\n              </div>\n            }\n          >\n            <Button\n              ouiaId=\"machine_type_help\"\n              type=\"button\"\n              aria-label=\"More info for instance size field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"azure-select-instance-size\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          architecture={image.architecture}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"azure-select-instance-counter\"\n        validated={validations.amount}\n        helperText={validations.amount === 'warning' && 'Launching many vCPUs might exceed service quota limit.'}\n        labelIcon={\n          <Popover headerContent={<div>Number of Azure instances</div>}>\n            <Button\n              ouiaId=\"instance_count_help\"\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"azure-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceCounter\n          setValidation={(validation) =>\n            setValidation((prev) => ({\n              ...prev,\n              amount: validation,\n            }))\n          }\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsAzure.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n  image: imageProps,\n};\nexport default AccountCustomizationsAzure;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { AWS_PROVIDER, AZURE_PROVIDER, GCP_PROVIDER } from '../../../Common/constants';\nimport { imageProps } from '../../helpers';\nimport { defaultRegionByProvider } from '../../../Common/helpers';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport AWS from './aws';\nimport GCP from './gcp';\nimport Azure from './azure';\n\nconst AccountCustomizations = ({ setStepValidated, image }) => {\n  const [, setWizardContext] = useWizardContext();\n  const provider = image.provider;\n\n  React.useEffect(() => {\n    provider &&\n      setWizardContext((prevState) => ({\n        ...prevState,\n        provider,\n        chosenRegion: defaultRegionByProvider(provider),\n        chosenImageID: image.id,\n      }));\n  }, [provider, setWizardContext]);\n\n  switch (provider) {\n    case AWS_PROVIDER:\n      return <AWS setStepValidated={setStepValidated} image={image} />;\n    case AZURE_PROVIDER:\n      return <Azure setStepValidated={setStepValidated} image={image} />;\n    case GCP_PROVIDER:\n      return <GCP setStepValidated={setStepValidated} image={image} />;\n    default:\n      throw new Error(`Can not render AccountCustomizations for unrecognized provider: ${provider}`);\n  }\n};\n\nAccountCustomizations.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n  image: imageProps,\n};\n\nexport default AccountCustomizations;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery, useQueries } from '@tanstack/react-query';\n\nimport { AWS_PROVIDER, AZURE_PROVIDER, GCP_PROVIDER, MULTIPLE_REGION_SUPPORT } from '../../constants';\nimport { IMAGE_REGIONS_KEY } from '../../API/queryKeys';\nimport { fetchImageClones, fetchImageCloneStatus } from '../../API';\nimport { defaultRegionByProvider } from '../Common/helpers';\n\nconst RegionsSelect = ({ provider, currentRegion, composeID, onChange }) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const {\n    isError,\n    isLoading,\n    data: clonedImages,\n  } = useQuery([IMAGE_REGIONS_KEY, composeID], () => fetchImageClones(composeID), {\n    select: (images) => images.data?.map((image) => ({ id: image.id, region: image.request.region })),\n  });\n\n  const queries =\n    clonedImages?.map((clonedImage) => ({\n      queryKey: [IMAGE_REGIONS_KEY, clonedImage.id],\n      queryFn: () => fetchImageCloneStatus(clonedImage.id),\n    })) || [];\n\n  const clonesStatusQueries = useQueries({ queries });\n  const isCloneStatusLoading = clonesStatusQueries.some((clone) => clone.isLoading);\n  const defaultRegion = { region: provider && defaultRegionByProvider(provider), id: composeID };\n  const images = [defaultRegion];\n  // filter successful clones images\n  if (clonesStatusQueries.length && clonesStatusQueries.every((cloneQuery) => cloneQuery.isLoading === false)) {\n    const clonesStatus = clonesStatusQueries?.map((query) => query?.data);\n    // enrich the cloned image data\n    clonesStatus?.forEach((status, index) => {\n      clonedImages[index] = { ...clonedImages[index], ...status?.options };\n    });\n    const availableImages = clonedImages?.filter((_, index) => clonesStatus[index].status === 'success');\n    images.push(...availableImages);\n  }\n\n  const onSelect = (_, selection) => {\n    const { id: imageID, ...imageAttrs } = images.find((image) => image.region === selection);\n    onChange({ region: selection, imageID, ...imageAttrs });\n    setIsOpen(false);\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (isError) {\n    return (\n      <>\n        <Alert ouiaId=\"regions_alert\" variant=\"warning\" isInline title=\"There are problems fetching image's regions\" />\n        <Select ouiaId=\"regions_empty\" isDisabled placeholderText=\"No regions have been found\" />\n      </>\n    );\n  }\n\n  if (isLoading || isCloneStatusLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"loading available regions\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_regions\"\n      variant=\"typeahead\"\n      aria-label=\"Select region\"\n      label=\"Select region\"\n      maxHeight=\"180px\"\n      isOpen={isOpen}\n      selections={currentRegion}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      isDisabled={!MULTIPLE_REGION_SUPPORT.includes(provider)}\n    >\n      {images.map(({ id, region }) => (\n        <SelectOption aria-label=\"Region item\" key={id} value={region} />\n      ))}\n    </Select>\n  );\n};\n\nRegionsSelect.propTypes = {\n  provider: PropTypes.oneOf([AWS_PROVIDER, AZURE_PROVIDER, GCP_PROVIDER]).isRequired,\n  composeID: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  currentRegion: PropTypes.string,\n};\n\nexport default RegionsSelect;\n"],"names":["SourcesSelect","_ref","setValidation","image","_useWizardContext","useWizardContext","_useWizardContext2","_slicedToArray","chosenSource","setWizardContext","_React$useState","React","_React$useState2","isOpen","setIsOpen","_React$useState3","_React$useState4","selected","setSelected","selectObject","id","name","toString","compareTo","other","_useSourcesForImage","useSourcesForImage","onSuccess","sources","find","source","length","prevState","_objectSpread","isLoading","error","console","warn","Alert","ouiaId","variant","isInline","title","Select","isDisabled","placeholderText","Spinner","isSVG","size","onToggle","openState","selections","maxHeight","onSelect","event","selection","isPlaceholder","map","_ref2","SelectOption","key","value","propTypes","PropTypes","isRequired","imageProps","InstanceCounter","_instanceTypes$find","_useWizardContext2$","chosenInstanceType","chosenNumOfInstances","chosenRegion","provider","instanceTypes","useQuery","fetchInstanceTypesList","enabled","data","VCPUAmount","instanceType","vcpus","useEffect","setWarningValidation","newValue","isWarning","NumberInput","max","min","validated","onMinus","onChange","input","Math","floor","Number","target","onPlus","inputName","inputAriaLabel","minusBtnAriaLabel","plusBtnAriaLabel","jsonata","require","OPERATORS","parseQuery","query","replace","every","operator","includes","concat","evaluateQuery","_asyncToGenerator","_regeneratorRuntime","_callee","q","d","expression","result","_context","prev","next","types","evaluate","sent","abrupt","t0","stop","_x","_x2","apply","arguments","InstanceTypesSelect","architecture","numOptions","setNumOptions","_React$useState5","_React$useState6","filteredTypes","setFilteredTypes","_React$useState7","_React$useState8","isTypeSupported","setTypeSupported","_React$useState9","_React$useState10","searchValue","setSearchValue","_useQuery","staleTime","select","filter","type","onError","isInitialLoading","TextInput","className","readOnly","queryFilter","search","_yield$evaluateQuery","queryError","Array","isArray","Object","toggleAriaLabel","_extends","typeAheadAriaLabel","supported","onFilter","isInputValuePersisted","onTypeaheadInputChanged","inputValue","_throttle","throttledFilter","loadingVariant","text","onClick","limit","_types","_types2","slice","index","description","cores","parseFloat","memory_mib","toFixed","storage_gb","selectItemsMapper","_templates$find2","chosenTemplate","TEMPLATES_KEY","fetchLaunchTemplates","templates","chosenTemplateName","template","direction","_","selectedTemplate","_templates$find","clearSelectionsAriaLabel","onClear","undefined","HelperText","HelperTextItem","message","AccountCustomizationsAWS","setStepValidated","amount","validations","errorExists","values","some","valid","Form","Title","headingLevel","FormGroup","label","helperTextInvalid","fieldId","validation","prevValidations","labelIcon","Popover","bodyContent","Button","e","preventDefault","HelpIcon","noVerticalAlign","RegionsSelect","AWS_PROVIDER","region","imageID","chosenImageID","composeID","currentRegion","helperText","Text","component","rel","href","TemplatesSelect","AccountCustomizationsGCP","wizardContext","headerContent","GCP_PROVIDER","AccountCustomizationsAzure","AZURE_PROVIDER","AccountCustomizations","defaultRegionByProvider","AWS","Azure","GCP","Error","IMAGE_REGIONS_KEY","fetchImageClones","images","_images$data","request","isError","clonedImages","queries","clonedImage","queryKey","queryFn","fetchImageCloneStatus","clonesStatusQueries","useQueries","isCloneStatusLoading","clone","cloneQuery","clonesStatus","forEach","status","options","availableImages","push","_toConsumableArray","_images$find","imageAttrs","_objectWithoutProperties","_excluded","MULTIPLE_REGION_SUPPORT"],"sourceRoot":""}