{"version":3,"file":"js/460.1676463942344.3a19e78165904c3c3df8.js","mappings":"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","sources":["webpack:///./src/Components/Common/WizardContext/initialState.js","webpack:///./src/Components/Common/WizardContext/index.js","webpack:///./src/Components/Common/Query/index.js","webpack:///./src/Components/ConfirmModal/index.js","webpack:///./src/API/queryKeys.js","webpack:///./src/API/helpers.js","webpack:///./src/API/index.js","webpack:///./src/Components/SourcesSelect/index.js","webpack:///./src/Components/InstanceCounter/index.js","webpack:///./src/Components/InstanceCounter/constants.js","webpack:///./src/Components/InstanceTypesSelect/index.js","webpack:///./src/Components/RegionsSelect/index.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/aws.js","webpack:///./src/Components/DescriptionListAWS/index.js","webpack:///./src/Components/ExpandableAWS/index.js","webpack:///./src/Components/ProvisioningWizard/steps/ReviewDetails/index.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/PubkeySelect.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/NewKeyForm.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/index.js","webpack:///./src/Components/Common/InstanceLink.js","webpack:///./src/Components/ProvisioningWizard/steps/ReservationProgress/ExpansionInfo.js","webpack:///./src/Components/Common/Hooks/useInterval.js","webpack:///./src/Components/ProvisioningWizard/steps/ReservationProgress/constants.js","webpack:///./src/Components/ProvisioningWizard/steps/ReservationProgress/helpers.js","webpack:///./src/Components/ProvisioningWizard/steps/ReservationProgress/index.js","webpack:///./src/Components/Common/Hooks/useMutationReservation.js","webpack:///./src/Components/ProvisioningWizard/steps/index.js","webpack:///./src/Components/ProvisioningWizard/CustomFooter.js","webpack:///./src/Components/ProvisioningWizard/index.js"],"sourcesContent":["const initialWizardContext = {\n  chosenSource: undefined,\n  chosenNumOfInstances: 1,\n  chosenInstanceType: undefined,\n  uploadedKey: false,\n  chosenRegion: 'us-east-1',\n  chosenImageID: undefined,\n  sshPublicName: '',\n  sshPublicKey: '',\n  chosenSshKeyId: undefined,\n  chosenSshKeyName: null,\n};\n\nexport default initialWizardContext;\n","import { useState } from 'react';\nimport { createContainer } from 'react-tracked';\nimport initialWizardContext from './initialState';\n\nconst useSharedState = () => useState(initialWizardContext);\n\nexport const { Provider: WizardProvider, useTracked: useWizardContext } = createContainer(useSharedState);\n","/* eslint-disable react/prop-types */\n\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient();\n\nconst APIProvider = ({ children }) => <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n\nexport default APIProvider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nconst ConfirmModal = ({ isOpen, onConfirm, onCancel }) => (\n  <Modal\n    ouiaId=\"app-confirm-modal\"\n    id=\"app-confirm-modal\"\n    aria-label=\"confirm cancel of launch modal\"\n    variant={ModalVariant.small}\n    title=\"Exit instance launching?\"\n    isOpen={isOpen}\n    onClose={onCancel}\n    actions={[\n      <Button key=\"exit\" variant=\"primary\" onClick={onConfirm} ouiaId=\"btn-exit-confirm\">\n        Exit\n      </Button>,\n      <Button key=\"stay\" variant=\"link\" onClick={onCancel}>\n        Stay\n      </Button>,\n    ]}\n    titleIconVariant=\"warning\"\n  >\n    All inputs will be discarded.\n  </Modal>\n);\n\nConfirmModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default ConfirmModal;\n","export const SOURCES_QUERY_KEY = 'sources';\nexport const PUBKEYS_QUERY_KEY = 'pubkeys';\nexport const instanceTypesQueryKeys = (region) => ['instanceTypes', region];\nexport const IMAGE_REGIONS_KEY = 'image_region';\n","export const provisioningUrl = (path) => `/api/provisioning/v1/${path}`;\nexport const imageBuilderURL = (path) => `/api/image-builder/v1/${path}`;\n","import axios from 'axios';\nimport { imageBuilderURL, provisioningUrl } from './helpers';\n\nexport const fetchSourcesList = async (provider) => {\n  const { data } = await axios.get(provisioningUrl(`sources?provider=${provider}`));\n  return data;\n};\n\nexport const fetchPubkeysList = async () => {\n  const { data } = await axios.get(provisioningUrl('pubkeys'));\n  return data;\n};\n\nexport const fetchInstanceTypesList = async (region) => {\n  const { data } = await axios.get(provisioningUrl(`instance_types/aws?region=${region}`));\n  return data;\n};\n\nexport const createAWSReservation = async (params) => {\n  return axios.post(provisioningUrl('reservations/aws'), params);\n};\n\nexport const createNewPublicKey = async (params) => {\n  return axios.post(provisioningUrl('pubkeys'), params);\n};\n\nexport const fetchReservation = async (id) => {\n  const { data } = await axios.get(provisioningUrl(`reservations/${id}`));\n  return data;\n};\n\nexport const fetchImageClones = async (composeID) => {\n  const { data } = await axios.get(imageBuilderURL(`composes/${composeID}/clones`));\n  return data;\n};\n\nexport const fetchReservationByProvider = async (reservationID, provider) => {\n  const { data } = await axios.get(provisioningUrl(`reservations/${provider}/${reservationID}`));\n  return data;\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst PROVIDER = 'aws';\nconst SourcesSelect = ({ setValidation }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState(null);\n  const selectObject = (id, name) => ({\n    id,\n    toString: () => name,\n    compareTo: (other) => other.id === id,\n  });\n  const {\n    error,\n    isLoading,\n    data: sources,\n  } = useQuery(SOURCES_QUERY_KEY, () => fetchSourcesList(PROVIDER), {\n    onSuccess: (data) => {\n      const id = wizardContext.chosenSource;\n\n      if (!id) return;\n      setSelected(selectObject(id, data.find((source) => source.id === id).name));\n    },\n  });\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      setSelected(null);\n      setWizardContext((prevState) => ({ ...prevState, chosenSource: null }));\n      setValidation('error');\n    } else {\n      setSelected(selection);\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenSource: selection.id,\n      }));\n      setValidation('success');\n    }\n    setIsOpen(false);\n  };\n\n  const selectItemsMapper = (sourcesData) =>\n    sourcesData.map(({ name, id }) => <SelectOption aria-label=\"Source account\" key={id} value={selectObject(id, name)}></SelectOption>);\n\n  if (error) {\n    console.warn('Failed to fetch sources list');\n    return (\n      <>\n        <Alert ouiaId=\"select_account_alert\" variant=\"warning\" isInline title=\"There are problems fetching accounts\" />\n        <Select ouiaId=\"select_account_empty\" isDisabled placeholderText=\"No accounts found\" aria-label=\"Select account\" />\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading accounts\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_account\"\n      isOpen={isOpen}\n      onToggle={(openState) => setIsOpen(openState)}\n      selections={selected}\n      onSelect={onSelect}\n      placeholderText=\"Select account\"\n      aria-label=\"Select account\"\n    >\n      {selectItemsMapper(sources)}\n    </Select>\n  );\n};\n\nSourcesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n};\n\nexport default SourcesSelect;\n","import React from 'react';\nimport { NumberInput } from '@patternfly/react-core';\nimport { useWizardContext } from '../Common/WizardContext';\nimport { MAX_INSTANCES, MIN_INSTANCES } from './constants';\n\nconst InstanceCounter = () => {\n  const [{ chosenNumOfInstances }, setWizardContext] = useWizardContext();\n\n  const onMinus = () => {\n    const newValue = chosenNumOfInstances - 1;\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  const onChange = (event) => {\n    let input = Math.floor(Number(event.target.value));\n    if (input > MAX_INSTANCES) {\n      input = MAX_INSTANCES;\n    }\n    if (input < MIN_INSTANCES) {\n      input = MIN_INSTANCES;\n    }\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: input,\n    }));\n  };\n\n  const onPlus = () => {\n    const newValue = chosenNumOfInstances + 1;\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  return (\n    <NumberInput\n      max={MAX_INSTANCES}\n      min={MIN_INSTANCES}\n      value={chosenNumOfInstances}\n      onMinus={onMinus}\n      onChange={onChange}\n      onPlus={onPlus}\n      inputName=\"instances\"\n      inputAriaLabel=\"number of instances\"\n      minusBtnAriaLabel=\"instances-minus\"\n      plusBtnAriaLabel=\"instances-plus\"\n    />\n  );\n};\nexport default InstanceCounter;\n","export const MAX_INSTANCES = 45;\nexport const MIN_INSTANCES = 1;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Spinner, Select, SelectOption, TextInput } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { instanceTypesQueryKeys } from '../../API/queryKeys';\nimport { fetchInstanceTypesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst OPTIONS_PER_SCREEN = 5;\nconst sanitizeSearchValue = (str) => str.replace(/\\\\+$/, '');\n\nconst InstanceTypesSelect = ({ setValidation, architecture }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [numOptions, setNumOptions] = React.useState(OPTIONS_PER_SCREEN);\n  const [filteredTypes, setFilteredTypes] = React.useState(null);\n  const [prevSearch, setPrevSearch] = React.useState('');\n  const {\n    isLoading,\n    error,\n    data: instanceTypes,\n  } = useQuery(instanceTypesQueryKeys(wizardContext.chosenRegion), () => fetchInstanceTypesList(wizardContext.chosenRegion), {\n    select: (types) => types.filter((type) => type.architecture === architecture),\n  });\n\n  if (!wizardContext.chosenSource || wizardContext.chosenSource === '') {\n    return (\n      <>\n        <TextInput\n          ouiaId=\"instance_type_readonly\"\n          className=\"pf-c-form-control\"\n          readOnly\n          type=\"text\"\n          value=\"Select account to load instances\"\n          id=\"input-readonly\"\n          aria-label=\"Readonly input example\"\n        />\n      </>\n    );\n  }\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenInstanceType: selection,\n      }));\n      setValidation('success');\n      setIsOpen(false);\n    }\n  };\n\n  const clearSelection = () => {\n    setValidation('error');\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenInstanceType: null,\n    }));\n    setIsOpen(false);\n  };\n\n  const onFilter = (_e, inputValue) => {\n    const search = sanitizeSearchValue(inputValue);\n    if (prevSearch !== search) {\n      setNumOptions(OPTIONS_PER_SCREEN);\n      setPrevSearch(search);\n      setFilteredTypes(instanceTypes.filter((i) => i.name.includes(search)));\n    }\n  };\n\n  const selectItemsMapper = (types, limit) => {\n    if (limit < types.length) types = types.slice(0, limit);\n    return types.map((instanceType, index) => (\n      <SelectOption\n        aria-label={'Instance Type item'}\n        key={index}\n        description={`${instanceType.cores} cores |\n          ${instanceType.vcpus} vCPU |\n          ${(parseFloat(instanceType.memory_mib) / 1024).toFixed(1)} GiB memory |\n          ${instanceType.storage_gb > 0 ? instanceType.storage_gb + ' GB storage | ' : 'EBS only | '}\n          ${instanceType.architecture}`}\n        value={instanceType.name}\n      />\n    ));\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (error) {\n    console.warn('Failed to fetch instance types list');\n    return (\n      <>\n        <Alert ouiaId=\"instance_type_alert\" variant=\"warning\" isInline title=\"There are problems fetching instance types\" />\n        <Select ouiaId=\"instance_type_empty\" isDisabled placeholderText=\"No instance types found\" aria-label=\"Select instance type\" />\n      </>\n    );\n  }\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Contents of the small example\" />;\n  }\n\n  const types = filteredTypes || instanceTypes;\n\n  return (\n    <Select\n      ouiaId=\"select_instance_type\"\n      variant=\"typeahead\"\n      aria-label=\"Select instance type\"\n      placeholderText=\"Select instance type\"\n      maxHeight=\"450px\"\n      isOpen={isOpen}\n      selections={wizardContext.chosenInstanceType}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      onFilter={onFilter}\n      {...(numOptions < types.length && {\n        loadingVariant: {\n          text: `View more (${types.length - numOptions})`,\n          onClick: () => setNumOptions(numOptions + OPTIONS_PER_SCREEN),\n        },\n      })}\n    >\n      {selectItemsMapper(types, numOptions)}\n    </Select>\n  );\n};\n\nInstanceTypesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n};\n\nexport default InstanceTypesSelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { useWizardContext } from '../Common/WizardContext';\nimport { IMAGE_REGIONS_KEY } from '../../API/queryKeys';\nimport { fetchImageClones } from '../../API';\n\nconst DEFAULT_REGION = 'us-east-1';\n\nconst RegionsSelect = ({ composeID }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const {\n    isError,\n    isLoading,\n    data: clonedImages,\n  } = useQuery([IMAGE_REGIONS_KEY, composeID], () => fetchImageClones(composeID), {\n    select: (images) => images.data?.map((image) => ({ id: image.id, region: image.request.region })),\n  });\n  const parentImage = [{ region: DEFAULT_REGION, id: composeID }];\n  const images = clonedImages ? parentImage.concat(clonedImages) : parentImage;\n\n  const onSelect = (_, selection) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenRegion: selection,\n      chosenImageID: images.find((image) => image.region === selection)?.id,\n    }));\n    setIsOpen(false);\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (isError) {\n    return (\n      <>\n        <Alert ouiaId=\"regions_alert\" variant=\"warning\" isInline title=\"There are problems fetching image's regions\" />\n        <Select ouiaId=\"regions_empty\" isDisabled placeholderText=\"No regions have found\" />\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"loading available regions\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_regions\"\n      variant=\"typeahead\"\n      aria-label=\"Select region\"\n      label=\"Select region\"\n      maxHeight=\"450px\"\n      isOpen={isOpen}\n      selections={wizardContext.chosenRegion}\n      onToggle={onToggle}\n      onSelect={onSelect}\n    >\n      {images.map(({ id, region }) => (\n        <SelectOption aria-label=\"Region item\" key={id} value={region} />\n      ))}\n    </Select>\n  );\n};\n\nRegionsSelect.propTypes = {\n  composeID: PropTypes.string.isRequired,\n};\n\nexport default RegionsSelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Text, Button } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst AccountCustomizationsAWS = ({ setStepValidated, architecture, composeID }) => {\n  const [{ chosenSource, chosenInstanceType }] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: chosenSource ? 'success' : 'default',\n    types: chosenInstanceType ? 'success' : 'default',\n  });\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  return (\n    <Form>\n      <Title ouiaId=\"account_custom_title\" headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | AWS\n      </Title>\n      <Text ouiaId=\"account_custom_description\">\n        Configure instances that will run on your AWS. All the instances will launch with the same configuration.\n      </Text>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"aws-select-source\"\n      >\n        <SourcesSelect\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select region\"\n        isRequired\n        fieldId=\"aws-select-region\"\n        labelIcon={\n          <Popover bodyContent=\"Select available geographical region\">\n            <Button\n              ouiaId=\"region_help\"\n              type=\"button\"\n              aria-label=\"More info for regions field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-region\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <RegionsSelect composeID={composeID} />\n      </FormGroup>\n      <FormGroup\n        label=\"Select instance type\"\n        isRequired\n        helperTextInvalid=\"Please pick a value\"\n        fieldId=\"aws-select-instance-types\"\n        labelIcon={\n          <Popover\n            bodyContent=\"Select AWS instance type based on your computing,\n           memory, networking, or storage needs\"\n          >\n            <Button\n              ouiaId=\"instance_type_help\"\n              type=\"button\"\n              aria-label=\"More info for instance types field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-types\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          architecture={architecture}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"aws-select-instance-counter\"\n        labelIcon={\n          <Popover bodyContent=\"Specify the number of AWS instances to be launched\">\n            <Button\n              ouiaId=\"instance_count_help\"\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceCounter />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsAWS.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n  composeID: PropTypes.string.isRequired,\n};\n\nexport default AccountCustomizationsAWS;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { DescriptionList, DescriptionListTerm, DescriptionListGroup, DescriptionListDescription } from '@patternfly/react-core';\n\nimport { useQuery } from 'react-query';\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst PROVIDER = 'aws';\nconst DescriptionListAWS = ({ imageName }) => {\n  const [wizardContext] = useWizardContext();\n  const { error, data: sources } = useQuery(SOURCES_QUERY_KEY, () => fetchSourcesList(PROVIDER));\n\n  if (error) {\n    // TODO: error handling, notifications\n    console.log('Failed to fetch sources list');\n  }\n\n  const getChosenSourceName = () => sources?.find((source) => source.id === wizardContext.chosenSource).name;\n\n  return (\n    <DescriptionList isHorizontal>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Image</DescriptionListTerm>\n        <DescriptionListDescription>{imageName}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Account</DescriptionListTerm>\n        <DescriptionListDescription>{getChosenSourceName()}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Region</DescriptionListTerm>\n        <DescriptionListDescription>{wizardContext.chosenRegion}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Instance type</DescriptionListTerm>\n        <DescriptionListDescription>{wizardContext.chosenInstanceType}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Count</DescriptionListTerm>\n        <DescriptionListDescription>{wizardContext.chosenNumOfInstances}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>{wizardContext.uploadedKey ? 'New SSH key' : 'Existing SSH key'}</DescriptionListTerm>\n        <DescriptionListDescription>\n          {wizardContext.uploadedKey ? wizardContext.sshPublicName : wizardContext.chosenSshKeyName}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n    </DescriptionList>\n  );\n};\n\nDescriptionListAWS.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default DescriptionListAWS;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ExpandableSection } from '@patternfly/react-core';\nimport DescriptionListAWS from '../DescriptionListAWS';\nexport const ExpandableAWS = ({ imageName }) => {\n  const [isExpanded, setIsExpanded] = React.useState(true);\n  const onToggle = (isExpanded) => {\n    setIsExpanded(isExpanded);\n  };\n  return (\n    <ExpandableSection toggleText={'AWS'} onToggle={onToggle} isExpanded={isExpanded} isIndented>\n      <DescriptionListAWS imageName={imageName} />\n    </ExpandableSection>\n  );\n};\n\nExpandableAWS.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title, Text } from '@patternfly/react-core';\nimport { ExpandableAWS } from '../../../ExpandableAWS';\n\nconst ReviewDetails = ({ imageName }) => {\n  return (\n    <div className=\"pf-c-form\">\n      <Title ouiaId=\"review_details_title\" headingLevel=\"h1\">\n        Review details\n      </Title>\n      <Text ouiaId=\"review_details_description\">\n        Review the information below and then click <b>Launch</b> to finish the process.\n      </Text>\n\n      <ExpandableAWS imageName={imageName} />\n    </div>\n  );\n};\n\nReviewDetails.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default ReviewDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst selectOptionObj = (id, name) => ({\n  id: id,\n  toString: () => name,\n  compareTo: (other) => other.id == id,\n});\n\nconst PubkeySelect = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selection, setSelection] = React.useState(\n    wizardContext.chosenSshKeyId ? selectOptionObj(wizardContext.chosenSshKeyId, wizardContext.chosenSshKeyName) : null\n  );\n\n  React.useEffect(() => {\n    setStepValidated(!!selection);\n  }, [selection]);\n\n  const { isLoading, isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n\n  const onSelect = (event, value) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenSshKeyId: value.id,\n      chosenSshKeyName: value.toString(),\n    }));\n    setSelection(value);\n    setIsOpen(false);\n  };\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading saved SSH keys\" />;\n  }\n\n  if (isError || (pubkeys && pubkeys.length < 1)) {\n    return (\n      <>\n        {isError && <Alert ouiaId=\"pubkey_alert\" variant=\"warning\" isInline title=\"There are problems fetching saved SSH keys\" />}\n        <Select ouiaId=\"pubkey_empty\" isDisabled placeholderText=\"No SSH key found\" aria-label=\"Select public key\" />\n      </>\n    );\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_pubkey\"\n      onToggle={(isExpanded) => setIsOpen(isExpanded)}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      selections={selection}\n      placeholderText=\"Select public key...\"\n      aria-label=\"Select public key\"\n    >\n      {pubkeys.map(({ id, name }) => (\n        <SelectOption aria-label={`Public key ${name}`} key={id} value={selectOptionObj(id, name)} />\n      ))}\n    </Select>\n  );\n};\n\nPubkeySelect.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PubkeySelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormGroup, TextInput, FileUpload } from '@patternfly/react-core';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\n// This is a simple regex format for public ssh key\nconst PUBLIC_KEY_FORMAT = '^(ssh|ecdsa)';\nconst validatePublicKey = (ssh) => {\n  const regex = new RegExp(PUBLIC_KEY_FORMAT);\n  return regex.test(ssh);\n};\n\nconst NewSSHKeyForm = ({ setStepValidated }) => {\n  const [{ sshPublicName, sshPublicKey }, setWizardContext] = useWizardContext();\n  const [isLoading, setIsLoading] = React.useState();\n  const [validations, setValidation] = React.useState({\n    sshKeyBody: validatePublicKey(sshPublicKey) ? 'success' : 'default',\n    sshKeyName: sshPublicName ? 'success' : 'default',\n  });\n  const [keyName, setName] = React.useState(sshPublicName);\n  const [publicKey, setPublicKey] = React.useState(sshPublicKey);\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  const updateValidation = (inputKey, value) =>\n    setValidation((prevValidations) => ({\n      ...prevValidations,\n      [inputKey]: value,\n    }));\n\n  const handleNameChange = (value) => {\n    setWizardContext((prevState) => ({ ...prevState, sshPublicName: value }));\n    setName(value);\n  };\n  const handleNameBlur = () => {\n    if (keyName.length === 0) {\n      updateValidation('sshKeyName', 'error');\n      return;\n    }\n    updateValidation('sshKeyName', 'success');\n  };\n  const handleSSHKeyChange = (value) => {\n    if (validatePublicKey(value)) {\n      setWizardContext((prevState) => ({\n        ...prevState,\n        sshPublicKey: value,\n      }));\n      setPublicKey(value);\n      updateValidation('sshKeyBody', 'success');\n    } else {\n      updateValidation('sshKeyBody', 'error');\n    }\n  };\n  const handleSSHKeyText = (text) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicKey: text,\n    }));\n    setPublicKey(text);\n  };\n  const handleSSHKeyTextBlur = () => {\n    if (publicKey === '') {\n      updateValidation('sshKeyBody', 'default');\n    } else {\n      updateValidation('sshKeyBody', validatePublicKey(publicKey) ? 'success' : 'error');\n    }\n  };\n\n  const handleClear = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: undefined,\n      sshPublicKey: undefined,\n    }));\n    setPublicKey('');\n    updateValidation('sshKeyBody', 'default');\n  };\n\n  const handleFileReadStarted = () => {\n    setIsLoading(true);\n  };\n\n  const handleFileReadFinished = () => {\n    setIsLoading(false);\n  };\n  const handleFileReadFailed = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: '<Failed to load the file>',\n    }));\n    updateValidation('sshKeyBody', 'error');\n  };\n\n  return (\n    <FormGroup isStack>\n      <FormGroup validated={validations.sshKeyName} helperTextInvalid=\"Name is required\" label=\"Name\" isRequired fieldId=\"ssh-name\">\n        <TextInput\n          ouiaId=\"new_pubkey_name\"\n          validated={validations.sshKeyName}\n          value={keyName}\n          id=\"public-key-name\"\n          onChange={handleNameChange}\n          onBlur={handleNameBlur}\n          type=\"text\"\n        />\n      </FormGroup>\n      <FormGroup\n        helperTextInvalid=\"Must be SSH public key format\"\n        label=\"SSH public key\"\n        isRequired\n        fieldId=\"ssh-file\"\n        validated={validations.sshKeyBody}\n      >\n        <FileUpload\n          // ouia not supported yet?\n          ouiaId=\"new_pubkey_file\"\n          id=\"public-key-value\"\n          onDataChange={handleSSHKeyChange}\n          allowEditingUploadedText\n          onTextChange={handleSSHKeyText}\n          onTextAreaBlur={handleSSHKeyTextBlur}\n          type=\"text\"\n          value={publicKey}\n          validated={validations.sshKeyBody}\n          onReadStarted={handleFileReadStarted}\n          onReadFinished={handleFileReadFinished}\n          onReadFailed={handleFileReadFailed}\n          onClearClick={handleClear}\n          isLoading={isLoading}\n          filenamePlaceholder=\"Drag a file here\"\n        />\n      </FormGroup>\n    </FormGroup>\n  );\n};\n\nNewSSHKeyForm.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\nexport default NewSSHKeyForm;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Radio, Text, Title } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport PubkeySelect from './PubkeySelect';\nimport NewSSHKeyForm from './NewKeyForm';\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\n\nconst EXIST_KEY_OPTION = 'existKey';\nconst NEW_KEY_OPTION = 'newKey';\n\nconst PublicKeys = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const { isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n  const [isSelectDisabled, disableSelect] = React.useState(false);\n\n  const switchTo = (optionKey) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      uploadedKey: NEW_KEY_OPTION === optionKey,\n    }));\n  };\n\n  const onOptionChange = (_, event) => {\n    switchTo(event.currentTarget.value);\n  };\n\n  React.useEffect(() => {\n    if (isError || pubkeys?.length < 1) {\n      disableSelect(true);\n      switchTo(NEW_KEY_OPTION);\n    }\n  }, [isError, pubkeys]);\n\n  return (\n    <Form className=\"pubkeys\">\n      <Title ouiaId=\"pubkey_title\" headingLevel=\"h1\">\n        SSH keys authentication\n      </Title>\n      <Text ouiaId=\"pubkey_description\">Establish secure, reliable communication and strong encryption to protect data.</Text>\n      <FormGroup role=\"radiogroup\" isStack isRequired label=\"Select a method to add SSH pubic key\">\n        <Radio\n          id=\"existing-pubkey-radio\"\n          ouiaId=\"pubkey_radio\"\n          isChecked={!wizardContext.uploadedKey}\n          isDisabled={isSelectDisabled}\n          name=\"ssh-keys-radio\"\n          value={EXIST_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Select existing SSH public key\"\n          data-testid=\"existing-pubkey-radio\"\n          body={\n            (!wizardContext.uploadedKey || isSelectDisabled) && (\n              <FormGroup label=\"Select public key\">\n                <PubkeySelect setStepValidated={setStepValidated} />\n              </FormGroup>\n            )\n          }\n        />\n        <Radio\n          id=\"upload-pubkey-radio\"\n          ouiaId=\"new_pubkey_radio\"\n          isChecked={wizardContext.uploadedKey}\n          name=\"ssh-keys-radio\"\n          value={NEW_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Add and save a new SSH public key\"\n          description=\"Newly added key will be automatically saved. Result of the provisioning will not be affected this process.\"\n          data-testid=\"upload-pubkey-radio\"\n          body={wizardContext.uploadedKey && <NewSSHKeyForm setStepValidated={setStepValidated} />}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nPublicKeys.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PublicKeys;\n","const instanceLink = (instanceID, provider, region) => {\n  switch (provider) {\n    case 'aws':\n      return `https://console.aws.amazon.com/ec2/home?region=${region}#InstanceDetails:instanceId=${instanceID}`;\n    default:\n      return null;\n  }\n};\n\nexport default instanceLink;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  ExpandableSection,\n  DescriptionList,\n  DescriptionListTerm,\n  DescriptionListDescription,\n  Timestamp,\n  Bullseye,\n  Truncate,\n  Card,\n  Spinner,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useQuery } from 'react-query';\nimport { fetchReservationByProvider } from '../../../../API';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport instanceLink from '../../../Common/InstanceLink';\n\nconst ExpandedInfo = ({ reservationID, error, createdAt, provider }) => {\n  const [{ chosenRegion }] = useWizardContext();\n  const { data: instances, isLoading } = useQuery(['launchInfo', reservationID], () => fetchReservationByProvider(reservationID, provider), {\n    enabled: !error,\n    select: (reservation) => reservation.instances,\n  });\n  return (\n    <Bullseye>\n      <ExpandableSection toggleTextCollapsed=\"Show additional info\" toggleTextExpanded=\"\">\n        <DescriptionList columnModifier={{ lg: '2Col' }}>\n          <Card component=\"div\">\n            <DescriptionListTerm>Launch ID</DescriptionListTerm>\n            <DescriptionListDescription>{<span aria-label=\"launch id\">{reservationID}</span>}</DescriptionListDescription>\n          </Card>\n          {error && (\n            <Card component=\"div\">\n              <DescriptionListTerm>Error message</DescriptionListTerm>\n              <DescriptionListDescription>\n                <span aria-label=\"launch error\">\n                  <Truncate content={error} />\n                </span>\n              </DescriptionListDescription>\n            </Card>\n          )}\n          <Card component=\"div\">\n            <DescriptionListTerm>Started at</DescriptionListTerm>\n            <DescriptionListDescription>{createdAt ? <Timestamp date={new Date(createdAt)} /> : 'N/A'}</DescriptionListDescription>\n          </Card>\n          {isLoading && (\n            <Card component=\"div\">\n              <DescriptionListTerm>Host</DescriptionListTerm>\n              <DescriptionListDescription>{<Spinner size=\"md\" />}</DescriptionListDescription>\n            </Card>\n          )}\n          {instances?.map((instance_id) => (\n            <Card key={instance_id} component=\"div\">\n              <DescriptionListTerm>Host</DescriptionListTerm>\n              <DescriptionListDescription>\n                {\n                  <span aria-label=\"instance link\">\n                    <a href={instanceLink(instance_id, provider, chosenRegion)} rel=\"noreferrer\" target=\"_blank\">\n                      {instance_id} <ExternalLinkAltIcon />\n                    </a>\n                  </span>\n                }\n              </DescriptionListDescription>\n            </Card>\n          ))}\n        </DescriptionList>\n      </ExpandableSection>\n    </Bullseye>\n  );\n};\n\nExpandedInfo.propTypes = {\n  createdAt: PropTypes.string,\n  error: PropTypes.string,\n  finishedAt: PropTypes.string,\n  reservationID: PropTypes.number,\n  provider: PropTypes.string,\n};\n\nExpandedInfo.defaultProps = {\n  createdAt: undefined,\n  finishedAt: undefined,\n  reservationID: undefined,\n  error: undefined,\n  provider: 'aws',\n};\n\nexport default ExpandedInfo;\n","import React from 'react';\n\nconst intervalGenerator = function* (intervalList) {\n  for (const interval of intervalList) yield interval;\n};\n\nconst useInterval = (list) => {\n  const generatorRef = React.useRef(null);\n  const savedList = React.useRef(list);\n  const [currentInterval, setCurrentInterval] = React.useState();\n\n  React.useEffect(() => {\n    generatorRef.current = intervalGenerator(savedList.current);\n  }, []);\n\n  const nextInterval = () => {\n    const nextValue = generatorRef.current.next().value;\n    setCurrentInterval(nextValue);\n    if (nextValue === undefined) return false;\n    return nextValue;\n  };\n  return { nextInterval, currentInterval };\n};\n\nexport default useInterval;\n","export const PF_SUCCESS_100 = '#3E8635';\nexport const PF_DANGER_100 = '#C9190B';\n\nexport const POLLING_BACKOFF_INTERVAL = [\n  500, 600, 700, 800, 900, 1000, 1200, 1400, 1600, 1800, 2000, 3000, 4000, 5000, 10000, 15000, 20000, 25000, 30000,\n];\n\nexport const AWS_STEPS = [\n  { name: 'Create reservation', description: `Submitting AWS reservation form` },\n  {\n    name: 'Transfer keys',\n    description: 'Uploading public key to AWS',\n  },\n  { name: 'Launch instance(s)', description: 'Running the new instance(s)' },\n];\n\nexport const SSH_STEP = [{ name: 'New SSH key', description: 'Creating new SSH public key resource' }];\n\nexport const AWS_PROVIDER = 'aws';\n","import { AWS_PROVIDER, AWS_STEPS } from './constants';\n\nexport const mapCurrentVariant = (step, currentStep, currentError) => {\n  if (step < currentStep) return 'success';\n  if (step === currentStep && currentError) return 'danger';\n  if (step === currentStep) return 'info';\n  if (step > currentStep) return 'pending';\n};\n\nexport const stepsByProvider = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return AWS_STEPS;\n    default:\n      undefined;\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ProgressStepper,\n  ProgressStep,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Title,\n  Popover,\n  Button,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { CogsIcon, PendingIcon } from '@patternfly/react-icons';\nimport { useMutation, useQuery } from 'react-query';\n\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport { createNewPublicKey, fetchReservation } from '../../../../API';\nimport ExpandedInfo from './ExpansionInfo';\nimport useInterval from '../../../Common/Hooks/useInterval';\nimport { POLLING_BACKOFF_INTERVAL, SSH_STEP } from './constants';\nimport { mapCurrentVariant, stepsByProvider } from './helpers';\nimport useReservationMutation from '../../../Common/Hooks/useMutationReservation';\n\nconst ReservationProgress = ({ imageID, setLaunchSuccess, provider }) => {\n  const [steps, setSteps] = React.useState([]);\n  const [currentError, setCurrentError] = React.useState();\n  const [currentStep, setCurrentStep] = React.useState(0);\n  const [currentJobStep, setCurrentJobStep] = React.useState(0);\n  const [reservationID, setReservationID] = React.useState();\n\n  const [\n    { chosenSource, chosenInstanceType, chosenNumOfInstances, chosenRegion, sshPublicName, sshPublicKey, chosenSshKeyId, uploadedKey, chosenImageID },\n  ] = useWizardContext();\n  const { nextInterval, currentInterval } = useInterval(POLLING_BACKOFF_INTERVAL);\n  const [createReservation, reservationError] = useReservationMutation(provider, (res) => {\n    stepUp();\n    setReservationID(res?.data?.reservation_id);\n  });\n\n  React.useEffect(() => {\n    if (createReservation) {\n      if (uploadedKey) {\n        setSteps(SSH_STEP.concat(stepsByProvider(provider)));\n        createPublicKey({ name: sshPublicName, body: sshPublicKey });\n      } else {\n        setSteps(stepsByProvider(provider));\n        createReservation({\n          source_id: chosenSource,\n          instance_type: chosenInstanceType,\n          amount: chosenNumOfInstances,\n          image_id: chosenImageID || imageID,\n          region: chosenRegion,\n          pubkey_id: chosenSshKeyId,\n        });\n      }\n    }\n  }, [createReservation, setSteps, uploadedKey]);\n\n  const { mutate: createPublicKey, error: pubkeyError } = useMutation(createNewPublicKey, {\n    onSuccess: (resp) => {\n      stepUp();\n      createReservation({\n        source_id: chosenSource,\n        instance_type: chosenInstanceType,\n        amount: chosenNumOfInstances,\n        image_id: chosenImageID || imageID,\n        region: chosenRegion,\n        pubkey_id: resp?.data?.id,\n      });\n    },\n  });\n\n  // polling request\n  const { data: polledReservation } = useQuery(['reservation', reservationID], () => fetchReservation(reservationID), {\n    enabled: !!reservationID && currentStep < steps.length && !currentError,\n    refetchInterval: (data) => {\n      if (data?.success || !!data?.error) return false;\n      return currentInterval;\n    },\n    onSuccess: (data) => {\n      if (currentJobStep < data.step) {\n        setCurrentJobStep((prev) => prev + 1);\n        stepUp();\n      }\n      !data?.success && nextInterval();\n      data.success && setLaunchSuccess();\n    },\n    refetchIntervalInBackground: true,\n  });\n\n  // error handling\n  React.useEffect(() => {\n    if (currentInterval === false) {\n      setCurrentError('Session timed out, the reservation took too long to fulfill');\n      return;\n    }\n    if (reservationError || pubkeyError || polledReservation?.error) {\n      const createReservationErrorMsg = reservationError?.response?.data?.msg;\n      const pubkeyErrorMsg = pubkeyError?.response?.data?.msg;\n\n      setCurrentError(createReservationErrorMsg || pubkeyErrorMsg || polledReservation?.error);\n    }\n  }, [reservationError, pubkeyError, polledReservation?.error, currentInterval]);\n\n  const stepUp = () => setCurrentStep((prevStep) => prevStep + 1);\n\n  return (\n    <WizardContextConsumer>\n      {({ goToStepById, onClose }) => (\n        <EmptyState variant=\"large\">\n          <EmptyStateIcon icon={CogsIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\" ouiaId=\"launch-status\">\n            {`Launching system(s)`}\n          </Title>\n          <EmptyStateBody>\n            <ProgressStepper isCenterAligned>\n              {steps.map(({ name, description }, step) => {\n                const variant = mapCurrentVariant(step, currentStep, currentError);\n                return (\n                  <ProgressStep\n                    variant={variant}\n                    id={name}\n                    key={name}\n                    icon={step > currentStep ? <PendingIcon /> : undefined}\n                    isCurrent={step === currentStep}\n                    description={description}\n                    titleId={name}\n                    aria-label={`step ${name} ${variant}`}\n                    popoverRender={\n                      currentError && step === currentStep\n                        ? (stepRef) => (\n                            <Popover\n                              aria-label={`${name} error message`}\n                              headerContent={<div>Error</div>}\n                              bodyContent={<div>{currentError}</div>}\n                              reference={stepRef}\n                              position=\"right\"\n                            />\n                          )\n                        : undefined\n                    }\n                  >\n                    {name}\n                  </ProgressStep>\n                );\n              })}\n            </ProgressStepper>\n          </EmptyStateBody>\n          {/* TODO: remove hidden input */}\n          {reservationID && <input type=\"hidden\" name=\"reservation_id\" value={reservationID} />}\n          <EmptyStateBody>\n            {(polledReservation?.error || polledReservation?.success) && (\n              <ExpandedInfo\n                reservationID={reservationID}\n                error={currentError}\n                createdAt={polledReservation?.created_at}\n                finishedAt={polledReservation?.finished_at}\n              />\n            )}\n          </EmptyStateBody>\n          {currentError && (\n            <Button id=\"wizard-provisioning-failed-edit-button\" onClick={() => goToStepById(1)} variant=\"primary\">\n              Edit\n            </Button>\n          )}\n          <EmptyStateSecondaryActions>\n            <Button variant=\"link\" isDisabled={!currentError && currentStep < 2} onClick={onClose}>\n              Close\n            </Button>\n          </EmptyStateSecondaryActions>\n        </EmptyState>\n      )}\n    </WizardContextConsumer>\n  );\n};\n\nReservationProgress.propTypes = {\n  imageID: PropTypes.string.isRequired,\n  provider: PropTypes.string.isRequired,\n  setLaunchSuccess: PropTypes.func.isRequired,\n};\n\nexport default ReservationProgress;\n","import React from 'react';\nimport { useMutation } from 'react-query';\nimport { createAWSReservation } from '../../../API';\nimport { AWS_PROVIDER } from '../../ProvisioningWizard/steps/ReservationProgress/constants';\n\nconst useReservationMutation = (provider, onSuccessCallback) => {\n  const reservationFnByProvider = () => {\n    switch (provider) {\n      case AWS_PROVIDER:\n        return AWSReservation;\n      default:\n        AWSReservation;\n    }\n  };\n  const [chosenReservationFn, setReservationFn] = React.useState();\n  const { mutate: AWSReservation, error: reservationError } = useMutation(createAWSReservation, {\n    onSuccess: (res) => {\n      onSuccessCallback(res);\n    },\n  });\n\n  React.useEffect(() => {\n    setReservationFn(reservationFnByProvider);\n  }, [provider]);\n\n  return [chosenReservationFn, reservationError];\n};\n\nexport default useReservationMutation;\n","import React from 'react';\nimport AccountCustomizationsAWS from '../steps/AccountCustomizations/aws';\nimport ReviewDetails from './ReviewDetails';\nimport PublicKeys from './Pubkeys';\nimport FinishStep from './ReservationProgress';\nimport { AWS_PROVIDER } from './ReservationProgress/constants';\n\nconst stringIds = {\n  1: 'account',\n  4: 'sshkey',\n  5: 'review',\n};\n\nexport const stepIdToString = (id) => stringIds[id];\n\nconst defaultSteps = ({ stepIdReached, image: { name, id, architecture }, stepValidation, setStepValidation, setLaunchSuccess }) => [\n  {\n    name: 'Account and customization',\n    steps: [\n      {\n        name: 'AWS',\n        id: 1,\n        enableNext: stepValidation.awsStep,\n        component: (\n          <AccountCustomizationsAWS\n            architecture={architecture || 'x86_64'}\n            composeID={id}\n            setStepValidated={(validated) => setStepValidation((prev) => ({ ...prev, awsStep: validated }))}\n          />\n        ),\n        canJumpTo: stepIdReached >= 1,\n      },\n    ],\n  },\n  {\n    name: 'SSH key authentication',\n    id: 4,\n    component: <PublicKeys setStepValidated={(validated) => setStepValidation((prev) => ({ ...prev, sshStep: validated }))} />,\n    canJumpTo: stepIdReached >= 4,\n    enableNext: stepValidation.sshStep,\n  },\n  {\n    name: 'Review details',\n    id: 5,\n    component: <ReviewDetails imageName={name} />,\n    canJumpTo: stepIdReached >= 5,\n    nextButtonText: 'Launch',\n  },\n  {\n    name: 'Finish Progress',\n    id: 6,\n    component: <FinishStep provider={AWS_PROVIDER} setLaunchSuccess={() => setLaunchSuccess(true)} imageID={id} />,\n    isFinishedStep: true,\n  },\n];\n\nexport default defaultSteps;\n","import * as React from 'react';\nimport { Button, ButtonVariant, WizardFooter, WizardContextConsumer } from '@patternfly/react-core';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nimport { stepIdToString } from './steps';\n\nconst CustomFooter = () => (\n  <WizardFooter>\n    <WizardContextConsumer>\n      {({ activeStep, onNext, onBack, onClose }) => {\n        const isValid = activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n\n        return (\n          <>\n            <Button\n              id={`wizard-provisioning-${stepIdToString(activeStep.id)}-next-button`}\n              variant={ButtonVariant.primary}\n              type=\"submit\"\n              onClick={onNext}\n              isDisabled={!isValid}\n            >\n              {activeStep.nextButtonText || 'Next'}\n            </Button>\n            {!activeStep.hideBackButton && (\n              <Button\n                id={`wizard-provisioning-${stepIdToString(activeStep.id)}-back-button`}\n                variant={ButtonVariant.secondary}\n                onClick={onBack}\n                isDisabled={activeStep.id == 1}\n              >\n                Back\n              </Button>\n            )}\n            {!activeStep.hideCancelButton && (\n              <div className={styles.wizardFooterCancel}>\n                <Button variant={ButtonVariant.link} onClick={onClose}>\n                  Cancel\n                </Button>\n              </div>\n            )}\n          </>\n        );\n      }}\n    </WizardContextConsumer>\n  </WizardFooter>\n);\n\nexport default CustomFooter;\n","import PropTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { WizardProvider } from '../Common/WizardContext';\nimport APIProvider from '../Common/Query';\nimport ConfirmModal from '../ConfirmModal';\nimport CustomFooter from './CustomFooter';\nimport defaultSteps from './steps';\nimport './steps/Pubkeys/pubkeys.scss';\n\nconst DEFAULT_STEP_VALIDATION = {\n  sshStep: false,\n  awsStep: false,\n};\n\nconst ProvisioningWizard = ({ isOpen, onClose, image, ...props }) => {\n  const [stepIdReached, setStepIdReached] = React.useState(1);\n  const [stepValidation, setStepValidation] = React.useState(DEFAULT_STEP_VALIDATION);\n  const [isConfirming, setConfirming] = React.useState(false);\n  const [successfulLaunch, setLaunchSuccess] = React.useState();\n\n  const onCustomClose = () => {\n    setConfirming(false);\n    setStepIdReached(1);\n    setStepValidation(DEFAULT_STEP_VALIDATION);\n    onClose();\n  };\n\n  const onWizardClose = () => {\n    if (stepIdReached >= 5 && !successfulLaunch) {\n      setConfirming(true);\n    } else {\n      onCustomClose();\n    }\n  };\n\n  const steps = defaultSteps({\n    stepIdReached,\n    image,\n    stepValidation,\n    setStepValidation,\n    setLaunchSuccess,\n  });\n\n  const onNext = ({ id, name }, { prevId, prevName }) => {\n    console.debug(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\n    setStepIdReached((prevID) => (prevID < id ? id : prevID));\n  };\n\n  return isOpen ? (\n    <WizardProvider>\n      <APIProvider>\n        <Wizard\n          {...props}\n          title=\"Launch\"\n          description={`Launch image ${image.name}`}\n          steps={steps}\n          isOpen\n          onClose={onWizardClose}\n          onNext={onNext}\n          className={'provisioning'}\n          footer={<CustomFooter />}\n        />\n        <ConfirmModal isOpen={isConfirming} onConfirm={onCustomClose} onCancel={() => setConfirming(false)} />\n      </APIProvider>\n    </WizardProvider>\n  ) : null;\n};\n\nProvisioningWizard.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func,\n  image: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    architecture: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ProvisioningWizard;\n"],"names":["chosenSource","undefined","chosenNumOfInstances","chosenInstanceType","uploadedKey","chosenRegion","chosenImageID","sshPublicName","sshPublicKey","chosenSshKeyId","chosenSshKeyName","createContainer","useState","initialWizardContext","WizardProvider","Provider","useWizardContext","useTracked","queryClient","QueryClient","children","QueryClientProvider","client","ConfirmModal","isOpen","onConfirm","onCancel","Modal","ouiaId","id","variant","ModalVariant","title","onClose","actions","Button","key","onClick","titleIconVariant","propTypes","PropTypes","SOURCES_QUERY_KEY","PUBKEYS_QUERY_KEY","provisioningUrl","path","fetchSourcesList","provider","axios","data","fetchPubkeysList","fetchInstanceTypesList","region","createAWSReservation","params","createNewPublicKey","fetchReservation","fetchImageClones","composeID","fetchReservationByProvider","reservationID","SourcesSelect","setValidation","wizardContext","setWizardContext","React","setIsOpen","selected","setSelected","selectObject","name","toString","compareTo","other","useQuery","onSuccess","find","source","error","isLoading","sources","console","warn","Alert","isInline","Select","isDisabled","placeholderText","Spinner","isSVG","size","onToggle","openState","selections","onSelect","event","selection","isPlaceholder","prevState","map","SelectOption","value","NumberInput","max","min","onMinus","newValue","onChange","input","Math","floor","Number","target","onPlus","inputName","inputAriaLabel","minusBtnAriaLabel","plusBtnAriaLabel","InstanceTypesSelect","architecture","numOptions","setNumOptions","filteredTypes","setFilteredTypes","prevSearch","setPrevSearch","select","types","filter","type","instanceTypes","TextInput","className","readOnly","maxHeight","onFilter","_e","inputValue","search","replace","i","includes","length","loadingVariant","text","limit","slice","instanceType","index","description","cores","vcpus","parseFloat","memory_mib","toFixed","storage_gb","selectItemsMapper","RegionsSelect","images","image","request","isError","clonedImages","parentImage","concat","label","_","AccountCustomizationsAWS","setStepValidated","validations","errorExists","Object","values","some","valid","Form","Title","headingLevel","Text","FormGroup","validated","helperTextInvalid","isRequired","fieldId","validation","prevValidations","labelIcon","Popover","bodyContent","e","preventDefault","noVerticalAlign","DescriptionListAWS","imageName","log","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","ExpandableAWS","isExpanded","setIsExpanded","ExpandableSection","toggleText","isIndented","ReviewDetails","selectOptionObj","PubkeySelect","setSelection","pubkeys","validatePublicKey","ssh","RegExp","test","NewSSHKeyForm","setIsLoading","sshKeyBody","sshKeyName","keyName","setName","publicKey","setPublicKey","updateValidation","inputKey","isStack","onBlur","FileUpload","onDataChange","allowEditingUploadedText","onTextChange","onTextAreaBlur","onReadStarted","onReadFinished","onReadFailed","onClearClick","filenamePlaceholder","NEW_KEY_OPTION","PublicKeys","isSelectDisabled","disableSelect","switchTo","optionKey","onOptionChange","currentTarget","role","Radio","isChecked","body","instanceID","ExpandedInfo","createdAt","enabled","reservation","instances","Bullseye","toggleTextCollapsed","toggleTextExpanded","columnModifier","lg","Card","component","Truncate","content","Timestamp","date","Date","instance_id","href","instanceLink","rel","finishedAt","defaultProps","intervalGenerator","intervalList","interval","f","POLLING_BACKOFF_INTERVAL","AWS_STEPS","SSH_STEP","AWS_PROVIDER","stepsByProvider","ReservationProgress","imageID","setLaunchSuccess","steps","setSteps","currentError","setCurrentError","currentStep","setCurrentStep","currentJobStep","setCurrentJobStep","setReservationID","list","generatorRef","savedList","currentInterval","setCurrentInterval","current","nextInterval","nextValue","next","useInterval","onSuccessCallback","reservationFnByProvider","AWSReservation","chosenReservationFn","setReservationFn","useMutation","res","mutate","reservationError","useReservationMutation","stepUp","reservation_id","createReservation","createPublicKey","source_id","instance_type","amount","image_id","pubkey_id","resp","pubkeyError","polledReservation","refetchInterval","success","step","prev","refetchIntervalInBackground","createReservationErrorMsg","response","msg","pubkeyErrorMsg","prevStep","WizardContextConsumer","goToStepById","EmptyState","EmptyStateIcon","icon","CogsIcon","EmptyStateBody","ProgressStepper","isCenterAligned","mapCurrentVariant","ProgressStep","isCurrent","titleId","popoverRender","stepRef","headerContent","reference","position","created_at","finished_at","EmptyStateSecondaryActions","stringIds","stepIdToString","WizardFooter","activeStep","onNext","onBack","isValid","enableNext","ButtonVariant","nextButtonText","hideBackButton","hideCancelButton","styles","DEFAULT_STEP_VALIDATION","sshStep","awsStep","ProvisioningWizard","props","stepIdReached","setStepIdReached","stepValidation","setStepValidation","isConfirming","setConfirming","successfulLaunch","onCustomClose","canJumpTo","isFinishedStep","defaultSteps","Wizard","prevId","prevName","debug","prevID","footer"],"sourceRoot":""}