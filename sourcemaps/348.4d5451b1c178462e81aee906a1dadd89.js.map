{"version":3,"file":"js/348.5ca3d5f8513164886134.js","mappings":"2PAMO,SAASA,IAAoB,QAAAC,EAAAC,UAAAC,OAAZC,EAAU,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAVF,EAAUE,GAAAJ,UAAAI,GAEhC,OADWC,EAAAA,EAAAA,IAAY,CAAC,EAAG,CAACC,KAAmBC,EAAAA,EAAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAAWC,OAAKP,GAE3H,C,eCJMQ,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,wEAA6E,IACrGC,GAAWD,EAAAA,EAAAA,OAAK,kBAAM,8BAAuE,IAC7FE,GAAoBF,EAAAA,EAAAA,OAAK,kBAAM,8BAAkG,IAU1HG,EAAS,WAAH,OACjBC,IAAAA,cAACC,EAAAA,SAAQ,CACPC,SACEF,IAAAA,cAACG,EAAAA,SAAQ,KACPH,IAAAA,cAACI,EAAAA,QAAO,QAIZJ,IAAAA,cAACK,EAAAA,OAAM,KACLL,IAAAA,cAACM,EAAAA,MAAK,CAACC,KAAK,UAAUC,UAAWb,IACjCK,IAAAA,cAACM,EAAAA,MAAK,CAACC,KAAK,QAAQC,UAAWX,IAC/BG,IAAAA,cAACM,EAAAA,MAAK,CAACC,KAAK,kBAAkBC,UAAWV,IAEzCE,IAAAA,cAACM,EAAAA,MAAK,KACJN,IAAAA,cAACS,EAAAA,SAAQ,CAACC,GAAG,cAGR,E,iCCFb,QAtBY,SAACC,GACX,IAAMC,GAAUC,EAAAA,EAAAA,cACJC,GAAkBC,EAAAA,EAAAA,KAAtBC,GAYR,OAVAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,GAAW5B,EAAAA,EAAAA,MACX6B,EAAaL,EAAc,kBAAkB,SAACM,GAAK,OAAKR,EAAQS,KAAK,IAAD3B,OAAK0B,EAAME,OAAQ,IAG7F,OAFAJ,EAASK,SAAS,CAAEC,cAAeC,EAAAA,KAE5B,WACLN,SAAAA,GACF,CACF,GAAG,IAGDnB,IAAAA,cAAC0B,EAAAA,SAAQ,KACP1B,IAAAA,cAAC2B,EAAAA,GAAmB,MACpB3B,IAAAA,cAACD,EAAM,CAAC6B,WAAYjB,IAG1B,E,wBCdA,QARiB,WAAH,OACZX,IAAAA,cAAC6B,EAAAA,GAAQ,CAACC,MAAO/C,EAAAA,WAAK,GAADgD,EAAAA,EAAAA,GAAwD,KAAKC,YAChFhC,IAAAA,cAACiC,EAAAA,cAAM,CAACC,UAAUC,EAAAA,EAAAA,IAAYC,OAAOC,SAASC,WAC5CtC,IAAAA,cAACuC,EAAG,OAEG,ECTb,IAAMC,EAAOC,SAASC,eAAe,QAErCC,IAAAA,OAAgB3C,IAAAA,cAAC4C,EAAQ,MAAKJ,GAAM,kBAAMA,EAAKK,aAAa,kBAAkB,EAAK,G","sources":["webpack:///./src/store/index.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js"],"sourcesContent":["import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [promiseMiddleware, notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }), ...middleware]);\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst SamplePage = lazy(() => import(/* webpackChunkName: \"SamplePage\" */ './Routes/SamplePage/SamplePage'));\nconst OopsPage = lazy(() => import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage'));\nconst NoPermissionsPage = lazy(() => import(/* webpackChunkName: \"NoPermissionsPage\" */ './Routes/NoPermissionsPage/NoPermissionsPage'));\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route path=\"/sample\" component={SamplePage} />\n      <Route path=\"/oops\" component={OopsPage} />\n      <Route path=\"/no-permissions\" component={NoPermissionsPage} />\n      {/* Finally, catch all unmatched routes */}\n      <Route>\n        <Redirect to=\"/sample\" />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n","import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = (props) => {\n  const history = useHistory();\n  const { on: onChromeEvent } = useChrome();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    const unregister = onChromeEvent('APP_NAVIGATION', (event) => history.push(`/${event.navId}`));\n    registry.register({ notifications: notificationsReducer });\n\n    return () => {\n      unregister?.();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n  <Provider store={init(...(process.env.NODE_ENV !== 'production' ? [logger] : [])).getStore()}>\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App />\n    </Router>\n  </Provider>\n);\n\nexport default AppEntry;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root, () => root.setAttribute('data-ouia-safe', true));\n"],"names":["init","_len","arguments","length","middleware","Array","_key","getRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey","concat","SamplePage","lazy","OopsPage","NoPermissionsPage","Routes","React","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","component","Redirect","to","props","history","useHistory","onChromeEvent","useChrome","on","useEffect","registry","unregister","event","push","navId","register","notifications","notificationsReducer","Fragment","NotificationsPortal","childProps","Provider","store","_toConsumableArray","getStore","Router","basename","getBaseName","window","location","pathname","App","root","document","getElementById","ReactDOM","AppEntry","setAttribute"],"sourceRoot":""}