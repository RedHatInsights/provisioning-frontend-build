{"version":3,"file":"js/494.1665749459168.b6c028d74965aed4a6ba.js","mappings":"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","sources":["webpack:///./src/Components/Common/WizardContext/initialState.js","webpack:///./src/Components/Common/WizardContext/index.js","webpack:///./src/Components/Common/Query/index.js","webpack:///./src/API/queryKeys.js","webpack:///./src/API/helpers.js","webpack:///./src/API/index.js","webpack:///./src/Components/SourcesSelect/index.js","webpack:///./src/Components/InstanceCounter/index.js","webpack:///./src/Components/InstanceTypesSelect/index.js","webpack:///./src/Components/RegionsSelect/index.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/aws.js","webpack:///./src/Components/DescriptionListAWS/index.js","webpack:///./src/Components/ExpandableAWS/index.js","webpack:///./src/Components/ProvisioningWizard/steps/ReviewDetails/index.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/PubkeySelect.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/NewKeyForm.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/index.js","webpack:///./src/Components/ProvisioningWizard/steps/FinishProgress/index.js","webpack:///./src/Components/ConfirmModal/index.js","webpack:///./src/Components/ProvisioningWizard/index.js","webpack:///./src/Components/ProvisioningWizard/steps/index.js"],"sourcesContent":["const initialWizardContext = {\n  chosenSource: undefined,\n  chosenNumOfInstances: 1,\n  chosenInstanceType: undefined,\n  uploadedKey: false,\n  chosenRegion: 'us-east-1',\n  sshPublicName: '',\n  sshPublicKey: '',\n  chosenSshKeyId: undefined,\n  chosenSshKeyName: null,\n};\n\nexport default initialWizardContext;\n","import { useState } from 'react';\nimport { createContainer } from 'react-tracked';\nimport initialWizardContext from './initialState';\n\nconst useSharedState = () => useState(initialWizardContext);\n\nexport const { Provider: WizardProvider, useTracked: useWizardContext } =\n  createContainer(useSharedState);\n","/* eslint-disable react/prop-types */\n\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient();\n\nconst APIProvider = ({ children }) => (\n  <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n);\n\nexport default APIProvider;\n","export const SOURCES_QUERY_KEY = 'sources';\nexport const PUBKEYS_QUERY_KEY = 'pubkeys';\nexport const instanceTypesQueryKeys = (region) => ['instanceTypes', region];\n","export const provisioningUrl = (path) => `/api/provisioning/v1/${path}`;\n","import axios from 'axios';\nimport { provisioningUrl } from './helpers';\n\nexport const fetchSourcesList = async () => {\n  const { data } = await axios.get(provisioningUrl('sources'));\n  return data;\n};\n\nexport const fetchPubkeysList = async () => {\n  const { data } = await axios.get(provisioningUrl('pubkeys'));\n  return data;\n};\n\nexport const fetchInstanceTypesList = async (region) => {\n  const { data } = await axios.get(\n    provisioningUrl(`instance_types/aws?region=${region}`)\n  );\n  return data;\n};\n\nexport const createAWSReservation = async (params) => {\n  return axios.post(provisioningUrl('reservations/aws'), params);\n};\n\nexport const createNewPublicKey = async (params) => {\n  return axios.post(provisioningUrl('pubkeys'), params);\n};\n\nexport const fetchAWSReservation = async (id) => {\n  const { data } = await axios.get(provisioningUrl(`reservations/${id}`));\n  return data;\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst SourcesSelect = ({ setValidation }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState(null);\n  const selectObject = (id, name) => ({\n    id,\n    toString: () => name,\n    compareTo: (other) => other.id === id,\n  });\n  const {\n    error,\n    isLoading,\n    data: sources,\n  } = useQuery(SOURCES_QUERY_KEY, fetchSourcesList, {\n    onSuccess: (data) => {\n      const id = wizardContext.chosenSource;\n\n      if (!id) return;\n      setSelected(\n        selectObject(id, data.find((source) => source.id === id).name)\n      );\n    },\n  });\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      setSelected(null);\n      setWizardContext((prevState) => ({ ...prevState, chosenSource: null }));\n      setValidation('error');\n    } else {\n      setSelected(selection);\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenSource: selection.id,\n      }));\n      setValidation('success');\n    }\n    setIsOpen(false);\n  };\n\n  const selectItemsMapper = (sourcesData) =>\n    sourcesData.map(({ name, id }) => (\n      <SelectOption\n        aria-label=\"Source account\"\n        key={id}\n        value={selectObject(id, name)}\n      ></SelectOption>\n    ));\n\n  if (error) {\n    console.warn('Failed to fetch sources list');\n    return (\n      <>\n        <Alert\n          variant=\"warning\"\n          isInline\n          title=\"There are problems fetching accounts\"\n        />\n        <Select\n          isDisabled\n          placeholderText=\"No accounts found\"\n          aria-label=\"Select account\"\n        />\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading accounts\" />;\n  }\n\n  return (\n    <Select\n      isOpen={isOpen}\n      onToggle={(openState) => setIsOpen(openState)}\n      selections={selected}\n      onSelect={onSelect}\n      placeholderText=\"Select account\"\n      aria-label=\"Select account\"\n    >\n      {selectItemsMapper(sources)}\n    </Select>\n  );\n};\n\nSourcesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n};\n\nexport default SourcesSelect;\n","import React from 'react';\nimport { Slider } from '@patternfly/react-core';\nimport { useWizardContext } from '../Common/WizardContext';\nconst MAX_INSTANCES = 45;\nconst MIN_INSTANCES = 1;\n\nconst InstanceCounter = () => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const onChange = (value, inputValue, setLocalInputValue) => {\n    let newValue;\n    if (inputValue === undefined) {\n      newValue = Number(value);\n    } else {\n      if (inputValue > MAX_INSTANCES) {\n        newValue = MAX_INSTANCES;\n        setLocalInputValue(MAX_INSTANCES);\n      } else if (inputValue < MIN_INSTANCES) {\n        newValue = MIN_INSTANCES;\n        setLocalInputValue(MIN_INSTANCES);\n      } else {\n        newValue = Math.floor(inputValue);\n      }\n    }\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n  return (\n    <Slider\n      max={MAX_INSTANCES}\n      min={MIN_INSTANCES}\n      value={wizardContext.chosenNumOfInstances}\n      isInputVisible\n      inputValue={wizardContext.chosenNumOfInstances}\n      hasTooltipOverThumb\n      onChange={onChange}\n    />\n  );\n};\nexport default InstanceCounter;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Spinner, Select, SelectOption } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { instanceTypesQueryKeys } from '../../API/queryKeys';\nimport { fetchInstanceTypesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst OPTIONS_PER_SCREEN = 5;\nconst sanitizeSearchValue = (str) => str.replace(/\\\\+$/, '');\n\nconst InstanceTypesSelect = ({ setValidation }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [numOptions, setNumOptions] = React.useState(OPTIONS_PER_SCREEN);\n  const [filteredTypes, setFilteredTypes] = React.useState(null);\n  const [prevSearch, setPrevSearch] = React.useState('');\n  const {\n    isLoading,\n    error,\n    data: instanceTypes,\n  } = useQuery(instanceTypesQueryKeys(wizardContext.chosenRegion), () =>\n    fetchInstanceTypesList(wizardContext.chosenRegion)\n  );\n\n  if (!wizardContext.chosenSource || wizardContext.chosenSource === '') {\n    return (\n      <>\n        <input\n          className=\"pf-c-form-control\"\n          readOnly\n          type=\"text\"\n          value=\"Select account to load instances\"\n          id=\"input-readonly\"\n          aria-label=\"Readonly input example\"\n        />\n      </>\n    );\n  }\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenInstanceType: selection,\n      }));\n      setValidation('success');\n      setIsOpen(false);\n    }\n  };\n\n  const clearSelection = () => {\n    setValidation('error');\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenInstanceType: null,\n    }));\n    setIsOpen(false);\n  };\n\n  const onFilter = (_e, inputValue) => {\n    const search = sanitizeSearchValue(inputValue);\n    if (prevSearch !== search) {\n      setNumOptions(OPTIONS_PER_SCREEN);\n      setPrevSearch(search);\n      setFilteredTypes(\n        instanceTypes.filter((i) => i.name.search(search) === 0)\n      );\n    }\n  };\n\n  const selectItemsMapper = (types, limit) => {\n    if (limit < types.length) types = types.slice(0, limit);\n    return types.map((instanceType, index) => (\n      <SelectOption\n        aria-label={'Instance Type item'}\n        key={index}\n        description={`${instanceType.cores} cores |\n          ${instanceType.vcpus} vCPU |\n          ${(parseFloat(instanceType.memory_mib) / 1024).toFixed(\n            1\n          )} GiB memory |\n          ${\n            instanceType.storage_gb > 0\n              ? instanceType.storage_gb + ' GB storage | '\n              : 'EBS only | '\n          }\n          ${instanceType.architecture}`}\n        value={instanceType.name}\n      />\n    ));\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (error) {\n    console.warn('Failed to fetch instance types list');\n    return (\n      <>\n        <Alert\n          variant=\"warning\"\n          isInline\n          title=\"There are problems fetching instance types\"\n        />\n        <Select\n          isDisabled\n          placeholderText=\"No instance types found\"\n          aria-label=\"Select instance type\"\n        />\n      </>\n    );\n  }\n  if (isLoading) {\n    return (\n      <Spinner isSVG size=\"sm\" aria-label=\"Contents of the small example\" />\n    );\n  }\n\n  const types = filteredTypes || instanceTypes;\n\n  return (\n    <Select\n      variant=\"typeahead\"\n      aria-label=\"Select instance type\"\n      placeholderText=\"Select instance type\"\n      maxHeight=\"450px\"\n      isOpen={isOpen}\n      selections={wizardContext.chosenInstanceType}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      onFilter={onFilter}\n      {...(numOptions < types.length && {\n        loadingVariant: {\n          text: `View more (${types.length - numOptions})`,\n          onClick: () => setNumOptions(numOptions + OPTIONS_PER_SCREEN),\n        },\n      })}\n    >\n      {selectItemsMapper(types, numOptions)}\n    </Select>\n  );\n};\n\nInstanceTypesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n};\n\nexport default InstanceTypesSelect;\n","import React from 'react';\nimport { FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { useWizardContext } from '../Common/WizardContext';\nexport const RegionsSelect = () => {\n  const [wizardContext] = useWizardContext();\n  return (\n    <FormSelect isDisabled aria-label=\"Select region\" value=\"\">\n      <FormSelectOption\n        label={wizardContext.chosenRegion}\n        key=\"placeholder\"\n        isPlaceholder\n        value=\"\"\n      ></FormSelectOption>\n    </FormSelect>\n  );\n};\nexport default RegionsSelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Text } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst AccountCustomizationsAWS = ({ setStepValidated }) => {\n  const [{ chosenSource, chosenInstanceType }] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: chosenSource ? 'success' : 'default',\n    types: chosenInstanceType ? 'success' : 'default',\n  });\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some(\n      (valid) => valid !== 'success'\n    );\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  return (\n    <Form>\n      <Title headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | AWS\n      </Title>\n      <Text>\n        Configure instances that will run on your AWS. All the instances will\n        launch with the same configuration.\n      </Text>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"aws-select-source\"\n      >\n        <SourcesSelect\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select region\"\n        isRequired\n        fieldId=\"aws-select-region\"\n        labelIcon={\n          <Popover headerContent={<div>AWS regions</div>}>\n            <button\n              type=\"button\"\n              aria-label=\"More info for regions field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-region\"\n              className=\"pf-c-form__group-label-help\"\n            >\n              <HelpIcon noVerticalAlign />\n            </button>\n          </Popover>\n        }\n      >\n        <RegionsSelect />\n      </FormGroup>\n      <FormGroup\n        label=\"Select instance type\"\n        isRequired\n        helperTextInvalid=\"Please pick a value\"\n        fieldId=\"aws-select-instance-types\"\n        labelIcon={\n          <Popover headerContent={<div>AWS instance types</div>}>\n            <button\n              type=\"button\"\n              aria-label=\"More info for instance types field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-types\"\n              className=\"pf-c-form__group-label-help\"\n            >\n              <HelpIcon noVerticalAlign />\n            </button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"aws-select-instance-counter\"\n        labelIcon={\n          <Popover headerContent={<div>Number of ec2 AWS instances</div>}>\n            <button\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n            >\n              <HelpIcon noVerticalAlign />\n            </button>\n          </Popover>\n        }\n      >\n        <InstanceCounter />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsAWS.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\nexport default AccountCustomizationsAWS;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  DescriptionList,\n  DescriptionListTerm,\n  DescriptionListGroup,\n  DescriptionListDescription,\n} from '@patternfly/react-core';\n\nimport { useQuery } from 'react-query';\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst DescriptionListAWS = ({ imageName }) => {\n  const [wizardContext] = useWizardContext();\n  const { error, data: sources } = useQuery(\n    SOURCES_QUERY_KEY,\n    fetchSourcesList\n  );\n\n  if (error) {\n    // TODO: error handling, notifications\n    console.log('Failed to fetch sources list');\n  }\n\n  const getChosenSourceName = () =>\n    sources?.find((source) => source.id === wizardContext.chosenSource).name;\n\n  return (\n    <DescriptionList isHorizontal>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Image</DescriptionListTerm>\n        <DescriptionListDescription>{imageName}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Account</DescriptionListTerm>\n        <DescriptionListDescription>\n          {getChosenSourceName()}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Region</DescriptionListTerm>\n        <DescriptionListDescription>\n          {wizardContext.chosenRegion}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Instance type</DescriptionListTerm>\n        <DescriptionListDescription>\n          {wizardContext.chosenInstanceType}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Count</DescriptionListTerm>\n        <DescriptionListDescription>\n          {wizardContext.chosenNumOfInstances}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>\n          {wizardContext.uploadedKey ? 'New SSH key' : 'Existing SSH key'}\n        </DescriptionListTerm>\n        <DescriptionListDescription>\n          {wizardContext.uploadedKey\n            ? wizardContext.sshPublicName\n            : wizardContext.chosenSshKeyName}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n    </DescriptionList>\n  );\n};\n\nDescriptionListAWS.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default DescriptionListAWS;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ExpandableSection } from '@patternfly/react-core';\nimport DescriptionListAWS from '../DescriptionListAWS';\nexport const ExpandableAWS = ({ imageName }) => {\n  const [isExpanded, setIsExpanded] = React.useState(true);\n  const onToggle = (isExpanded) => {\n    setIsExpanded(isExpanded);\n  };\n  return (\n    <ExpandableSection\n      toggleText={'AWS'}\n      onToggle={onToggle}\n      isExpanded={isExpanded}\n      isIndented\n    >\n      <DescriptionListAWS imageName={imageName} />\n    </ExpandableSection>\n  );\n};\n\nExpandableAWS.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title, Text } from '@patternfly/react-core';\nimport { ExpandableAWS } from '../../../ExpandableAWS';\n\nconst ReviewDetails = ({ imageName }) => {\n  return (\n    <div className=\"pf-c-form\">\n      <Title headingLevel=\"h1\">Review details</Title>\n      <Text>\n        Review the information below and click <b>Launch</b> to complete\n        provisioning.\n      </Text>\n\n      <ExpandableAWS imageName={imageName} />\n    </div>\n  );\n};\n\nReviewDetails.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default ReviewDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst selectOptionObj = (id, name) => ({\n  id: id,\n  toString: () => name,\n  compareTo: (other) => other.id == id,\n});\n\nconst PubkeySelect = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selection, setSelection] = React.useState(\n    wizardContext.chosenSshKeyId\n      ? selectOptionObj(\n          wizardContext.chosenSshKeyId,\n          wizardContext.chosenSshKeyName\n        )\n      : null\n  );\n\n  React.useEffect(() => {\n    setStepValidated(!!selection);\n  }, [selection]);\n\n  const {\n    isLoading,\n    isError,\n    data: pubkeys,\n  } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n\n  const onSelect = (event, value) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenSshKeyId: value.id,\n      chosenSshKeyName: value.toString(),\n    }));\n    setSelection(value);\n    setIsOpen(false);\n  };\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading saved SSH keys\" />;\n  }\n\n  if (isError || (pubkeys && pubkeys.length < 1)) {\n    return (\n      <>\n        {isError && (\n          <Alert\n            variant=\"warning\"\n            isInline\n            title=\"There are problems fetching saved SSH keys\"\n          />\n        )}\n        <Select\n          isDisabled\n          placeholderText=\"No SSH key found\"\n          aria-label=\"Select public key\"\n        />\n      </>\n    );\n  }\n\n  return (\n    <Select\n      onToggle={(isExpanded) => setIsOpen(isExpanded)}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      selections={selection}\n      placeholderText=\"Select public key...\"\n      aria-label=\"Select public key\"\n    >\n      {pubkeys.map(({ id, name }) => (\n        <SelectOption\n          aria-label={`Public key ${name}`}\n          key={id}\n          value={selectOptionObj(id, name)}\n        />\n      ))}\n    </Select>\n  );\n};\n\nPubkeySelect.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PubkeySelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormGroup, TextInput, FileUpload } from '@patternfly/react-core';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\n// This is a simple regex format for public ssh key\nconst PUBLIC_KEY_FORMAT = '^(ssh|ecdsa)';\n\nconst NewSSHKeyForm = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isLoading, setIsLoading] = React.useState();\n  const [validations, setValidation] = React.useState({\n    sshKeyBody: 'default',\n    sshKeyName: 'default',\n  });\n  const [keyName, setName] = React.useState(wizardContext.sshPublicName);\n  const [publicKey, setPublicKey] = React.useState(wizardContext.sshPublicKey);\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some(\n      (valid) => valid !== 'success'\n    );\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  const updateValidation = (inputKey, value) =>\n    setValidation((prevValidations) => ({\n      ...prevValidations,\n      [inputKey]: value,\n    }));\n\n  const handleNameChange = (value) => {\n    setWizardContext((prevState) => ({ ...prevState, sshPublicName: value }));\n    setName(value);\n  };\n  const handleNameBlur = () => {\n    if (keyName.length === 0) {\n      updateValidation('sshKeyName', 'error');\n      return;\n    }\n    updateValidation('sshKeyName', 'success');\n  };\n  const handleSSHKeyChange = (value) => {\n    if (validatePublicKey(value)) {\n      setWizardContext((prevState) => ({\n        ...prevState,\n        sshPublicKey: value,\n      }));\n      setPublicKey(value);\n      updateValidation('sshKeyBody', 'success');\n    } else {\n      updateValidation('sshKeyBody', 'error');\n    }\n  };\n  const handleSSHKeyText = (text) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicKey: text,\n    }));\n    setPublicKey(text);\n  };\n  const handleSSHKeyTextBlur = () => {\n    if (publicKey === '') {\n      updateValidation('sshKeyBody', 'default');\n    } else {\n      updateValidation(\n        'sshKeyBody',\n        validatePublicKey(publicKey) ? 'success' : 'error'\n      );\n    }\n  };\n\n  const handleClear = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: undefined,\n      sshPublicKey: undefined,\n    }));\n    setPublicKey('');\n    updateValidation('sshKeyBody', 'default');\n  };\n\n  const handleFileReadStarted = () => {\n    setIsLoading(true);\n  };\n\n  const handleFileReadFinished = () => {\n    setIsLoading(false);\n  };\n  const handleFileReadFailed = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: '<Failed to load the file>',\n    }));\n    updateValidation('sshKeyBody', 'error');\n  };\n\n  const validatePublicKey = (ssh) => {\n    const regex = new RegExp(PUBLIC_KEY_FORMAT);\n    return regex.test(ssh);\n  };\n  return (\n    <>\n      <FormGroup\n        validated={validations.sshKeyName}\n        helperTextInvalid=\"Name is required\"\n        label=\"Name\"\n        isRequired\n        fieldId=\"ssh-name\"\n      >\n        <TextInput\n          validated={validations.sshKeyName}\n          value={keyName}\n          id=\"public-key-name\"\n          onChange={handleNameChange}\n          onBlur={handleNameBlur}\n          type=\"text\"\n        />\n      </FormGroup>\n      <FormGroup\n        helperTextInvalid=\"Must be SSH public key format\"\n        label=\"SSH public key\"\n        isRequired\n        fieldId=\"ssh-file\"\n        validated={validations.sshKeyBody}\n      >\n        <FileUpload\n          id=\"public-key-value\"\n          onDataChange={handleSSHKeyChange}\n          allowEditingUploadedText\n          onTextChange={handleSSHKeyText}\n          onTextAreaBlur={handleSSHKeyTextBlur}\n          type=\"text\"\n          value={publicKey}\n          validated={validations.sshKeyBody}\n          onReadStarted={handleFileReadStarted}\n          onReadFinished={handleFileReadFinished}\n          onReadFailed={handleFileReadFailed}\n          onClearClick={handleClear}\n          isLoading={isLoading}\n          filenamePlaceholder=\"Drag a file here\"\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nNewSSHKeyForm.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\nexport default NewSSHKeyForm;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Radio, Text, Title } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport PubkeySelect from './PubkeySelect';\nimport NewSSHKeyForm from './NewKeyForm';\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\n\nconst EXIST_KEY_OPTION = 'existKey';\nconst NEW_KEY_OPTION = 'newKey';\n\nconst PublicKeys = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const {\n    isLoading,\n    isError,\n    data: pubkeys,\n  } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n  const [isSelectDisabled, disableSelect] = React.useState(false);\n\n  const switchTo = (optionKey) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      uploadedKey: NEW_KEY_OPTION === optionKey,\n    }));\n  };\n\n  const onOptionChange = (_, event) => {\n    switchTo(event.currentTarget.value);\n  };\n\n  React.useEffect(() => {\n    if (!isLoading && (isError || (pubkeys && pubkeys.length < 1))) {\n      disableSelect(true);\n      switchTo(NEW_KEY_OPTION);\n    }\n  }, [isLoading]);\n\n  return (\n    <Form className=\"pubkeys\">\n      <Title headingLevel=\"h1\">SSH keys authentication</Title>\n      <Text>\n        Establish secure, reliable communication and strong encryption to\n        protect data.\n      </Text>\n      <FormGroup isRequired label=\"Select a method to add SSH pubic key\">\n        <Radio\n          id=\"existing-pubkey-radio\"\n          isChecked={!wizardContext.uploadedKey}\n          isDisabled={isSelectDisabled}\n          name=\"ssh-keys-radio\"\n          value={EXIST_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Select existing SSH public key\"\n          data-testid=\"existing-pubkey-radio\"\n          body={\n            (!wizardContext.uploadedKey || isSelectDisabled) && (\n              <FormGroup label=\"Select public key\">\n                <PubkeySelect setStepValidated={setStepValidated} />\n              </FormGroup>\n            )\n          }\n        />\n        <Radio\n          id=\"upload-pubkey-radio\"\n          isChecked={wizardContext.uploadedKey}\n          name=\"ssh-keys-radio\"\n          value={NEW_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Add and save a new SSH public key\"\n          description=\"Newly added key will be automatically saved. Result of the provisioning will not be affected this process.\"\n          data-testid=\"upload-pubkey-radio\"\n          body={\n            wizardContext.uploadedKey && (\n              <NewSSHKeyForm setStepValidated={setStepValidated} />\n            )\n          }\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nPublicKeys.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PublicKeys;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Title,\n  Progress,\n  Button,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { CogsIcon, OkIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport { useMutation, useQuery } from 'react-query';\nimport {\n  createAWSReservation,\n  createNewPublicKey,\n  fetchAWSReservation,\n} from '../../../../API';\nimport './styles.scss';\n\nconst pf_success_color_100 = '#3E8635';\nconst pf_danger_color_100 = '#C9190B';\nconst RESERVATION_POLLING_INTERVAL = 500;\n\nconst steps = [\n  { description: 'Uploading SSH public key', progress: 0 },\n  { description: 'Creating AWS reservation', progress: 20 },\n  {\n    description: 'Waiting for AWS',\n    progress: 40,\n  },\n  { description: 'Provisioning has been completed', progress: 100 },\n];\n\nconst FinishStep = ({ onClose, imageID }) => {\n  const [\n    {\n      chosenSource,\n      chosenInstanceType,\n      chosenNumOfInstances,\n      chosenRegion,\n      sshPublicName,\n      sshPublicKey,\n      chosenSshKeyId,\n      uploadedKey,\n    },\n  ] = useWizardContext();\n  const [reservationID, setReservationID] = React.useState();\n  const [activeStep, setActiveStep] = React.useState(uploadedKey ? 0 : 1);\n  const stepUp = () =>\n    setActiveStep((prevStep) =>\n      prevStep < steps.length - 1 ? prevStep + 1 : prevStep\n    );\n\n  const { data: polledReservation } = useQuery(\n    ['reservation', reservationID],\n    () => fetchAWSReservation(reservationID),\n    {\n      enabled: !!reservationID,\n      refetchInterval: RESERVATION_POLLING_INTERVAL,\n      refetchIntervalInBackground: true,\n    }\n  );\n\n  const { mutate: createAWSDeployment, error: awsReservationError } =\n    useMutation(createAWSReservation, {\n      onSuccess: (data) => {\n        stepUp();\n        setReservationID(data?.data?.reservation_id);\n      },\n    });\n\n  const { mutate: createPublicKey, error: pubkeyError } = useMutation(\n    createNewPublicKey,\n    {\n      onSuccess: (resp) => {\n        createAWSDeployment({\n          source_id: chosenSource,\n          instance_type: chosenInstanceType,\n          amount: chosenNumOfInstances,\n          image_id: imageID,\n          region: chosenRegion,\n          pubkey_id: resp?.data?.id,\n        });\n        stepUp();\n      },\n    }\n  );\n\n  React.useEffect(() => {\n    if (polledReservation?.success) {\n      stepUp();\n      setReservationID(undefined);\n    }\n  }, [polledReservation?.success]);\n\n  React.useEffect(() => {\n    if (uploadedKey) {\n      createPublicKey({ name: sshPublicName, body: sshPublicKey });\n    } else {\n      createAWSDeployment({\n        source_id: chosenSource,\n        instance_type: chosenInstanceType,\n        amount: chosenNumOfInstances,\n        image_id: imageID,\n        region: chosenRegion,\n        pubkey_id: chosenSshKeyId,\n      });\n    }\n  }, []);\n\n  const activeProgress = steps[activeStep].progress;\n  const isJobError = polledReservation\n    ? polledReservation.success === false\n    : false;\n  const isError = !!awsReservationError || !!pubkeyError || isJobError;\n\n  const iconGenerator = () => {\n    if (isError) return ErrorCircleOIcon;\n    return activeProgress === 100 ? OkIcon : CogsIcon;\n  };\n\n  const showCloseButton = () => {\n    if (isError) return true;\n    return activeStep >= 2;\n  };\n\n  const iconColor = () => {\n    if (isError) return pf_danger_color_100;\n    if (activeProgress === 100) return pf_success_color_100;\n    return undefined;\n  };\n\n  return (\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <EmptyState variant=\"large\">\n          <EmptyStateIcon color={iconColor()} icon={iconGenerator()} />\n          <Title headingLevel=\"h4\" size=\"lg\">\n            {activeProgress === 100\n              ? 'Provisioning has been finished successfully'\n              : 'Provisioning in progress'}\n          </Title>\n          <EmptyStateBody>\n            <Progress\n              style={{ width: '500px' }}\n              variant={isError && 'danger'}\n              value={activeProgress}\n              measureLocation=\"outside\"\n            />\n          </EmptyStateBody>\n          <EmptyStateBody>\n            <span>\n              {isError\n                ? `An error has been occurred while ${steps[\n                    activeStep\n                  ].description.toLowerCase()}`\n                : steps[activeStep].description}\n              <br />\n              {polledReservation?.status}\n              <span className=\"status-error\">\n                {awsReservationError?.response?.data?.msg}\n                {pubkeyError?.response?.data?.msg}\n                {polledReservation?.error}\n              </span>\n            </span>\n          </EmptyStateBody>\n          <EmptyStateSecondaryActions>\n            {isError && (\n              <Button onClick={() => goToStepById(1)} variant=\"link\">\n                Back\n              </Button>\n            )}\n            <Button\n              variant=\"link\"\n              isDisabled={!showCloseButton()}\n              onClick={onClose}\n            >\n              Close\n            </Button>\n          </EmptyStateSecondaryActions>\n        </EmptyState>\n      )}\n    </WizardContextConsumer>\n  );\n};\n\nFinishStep.propTypes = {\n  imageID: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default FinishStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nconst ConfirmModal = ({ isOpen, onConfirm, onCancel }) => (\n  <Modal\n    ouiaId=\"app-confirm-modal\"\n    id=\"app-confirm-modal\"\n    aria-label=\"confirm cancel of launch modal\"\n    variant={ModalVariant.small}\n    title=\"Exit instance launching?\"\n    isOpen={isOpen}\n    onClose={onCancel}\n    actions={[\n      <Button\n        key=\"exit\"\n        variant=\"primary\"\n        onClick={onConfirm}\n        ouiaId=\"btn-exit-confirm\"\n      >\n        Exit\n      </Button>,\n      <Button key=\"stay\" variant=\"link\" onClick={onCancel}>\n        Stay\n      </Button>,\n    ]}\n    titleIconVariant=\"warning\"\n  >\n    All inputs will be discarded.\n  </Modal>\n);\n\nConfirmModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default ConfirmModal;\n","import PropTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { WizardProvider } from '../Common/WizardContext';\nimport APIProvider from '../Common/Query';\nimport defaultSteps from './steps';\nimport ConfirmModal from '../ConfirmModal';\nimport './steps/Pubkeys/pubkeys.scss';\n\nconst DEFAULT_STEP_VALIDATION = {\n  sshStep: false,\n  awsStep: false,\n};\n\nconst ProvisioningWizard = ({ isOpen, onClose, image, ...props }) => {\n  const [stepIdReached, setStepIdReached] = React.useState(1);\n  const [stepValidation, setStepValidation] = React.useState(\n    DEFAULT_STEP_VALIDATION\n  );\n  const [isConfirming, setConfirming] = React.useState(false);\n\n  const onCustomClose = () => {\n    setConfirming(false);\n    setStepIdReached(1);\n    setStepValidation(DEFAULT_STEP_VALIDATION);\n    onClose();\n  };\n\n  const onWizardClose = () => {\n    if (stepIdReached >= 5) {\n      setConfirming(true);\n    } else {\n      onCustomClose();\n    }\n  };\n\n  const steps = defaultSteps({\n    stepIdReached,\n    image,\n    stepValidation,\n    setStepValidation,\n    onClose: onCustomClose,\n  });\n\n  const onNext = ({ id, name }, { prevId, prevName }) => {\n    console.debug(\n      `current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`\n    );\n    setStepIdReached((prevID) => (prevID < id ? id : prevID));\n  };\n\n  return isOpen ? (\n    <WizardProvider>\n      <APIProvider>\n        <Wizard\n          {...props}\n          title=\"Provisioning\"\n          description={`Provision image ${image.name}`}\n          steps={steps}\n          isOpen\n          onClose={onWizardClose}\n          onNext={onNext}\n        />\n        <ConfirmModal\n          isOpen={isConfirming}\n          onConfirm={onCustomClose}\n          onCancel={() => setConfirming(false)}\n        />\n      </APIProvider>\n    </WizardProvider>\n  ) : null;\n};\n\nProvisioningWizard.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func,\n  image: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ProvisioningWizard;\n","import React from 'react';\nimport AccountCustomizationsAWS from '../steps/AccountCustomizations/aws';\nimport ReviewDetails from './ReviewDetails';\nimport PublicKeys from './Pubkeys';\nimport FinishStep from './FinishProgress';\n\nconst defaultSteps = ({\n  stepIdReached,\n  image: { name, id },\n  stepValidation,\n  setStepValidation,\n  onClose,\n}) => [\n  {\n    name: 'Account and customization',\n    steps: [\n      {\n        name: 'AWS',\n        id: 1,\n        enableNext: stepValidation.awsStep,\n        component: (\n          <AccountCustomizationsAWS\n            setStepValidated={(validated) =>\n              setStepValidation((prev) => ({ ...prev, awsStep: validated }))\n            }\n          />\n        ),\n        canJumpTo: stepIdReached >= 1,\n      },\n    ],\n  },\n  {\n    name: 'SSH key authentication',\n    id: 4,\n    component: (\n      <PublicKeys\n        setStepValidated={(validated) =>\n          setStepValidation((prev) => ({ ...prev, sshStep: validated }))\n        }\n      />\n    ),\n    canJumpTo: stepIdReached >= 4,\n    enableNext: stepValidation.sshStep,\n  },\n  {\n    name: 'Review details',\n    id: 5,\n    component: <ReviewDetails imageName={name} />,\n    canJumpTo: stepIdReached >= 5,\n    nextButtonText: 'Launch',\n  },\n  {\n    name: 'Finish Progress',\n    id: 6,\n    component: <FinishStep onClose={onClose} imageID={id} />,\n    isFinishedStep: true,\n  },\n];\n\nexport default defaultSteps;\n"],"names":["chosenSource","undefined","chosenNumOfInstances","chosenInstanceType","uploadedKey","chosenRegion","sshPublicName","sshPublicKey","chosenSshKeyId","chosenSshKeyName","createContainer","useState","initialWizardContext","WizardProvider","Provider","useWizardContext","useTracked","queryClient","QueryClient","children","QueryClientProvider","client","SOURCES_QUERY_KEY","PUBKEYS_QUERY_KEY","provisioningUrl","path","fetchSourcesList","axios","data","fetchPubkeysList","fetchInstanceTypesList","region","createAWSReservation","params","createNewPublicKey","fetchAWSReservation","id","SourcesSelect","setValidation","wizardContext","setWizardContext","React","isOpen","setIsOpen","selected","setSelected","selectObject","name","toString","compareTo","other","useQuery","onSuccess","find","source","error","isLoading","sources","console","warn","Alert","variant","isInline","title","Select","isDisabled","placeholderText","Spinner","isSVG","size","onToggle","openState","selections","onSelect","event","selection","isPlaceholder","prevState","map","SelectOption","key","value","propTypes","PropTypes","Slider","max","min","isInputVisible","inputValue","hasTooltipOverThumb","onChange","setLocalInputValue","newValue","Number","Math","floor","InstanceTypesSelect","numOptions","setNumOptions","filteredTypes","setFilteredTypes","prevSearch","setPrevSearch","instanceTypes","className","readOnly","type","types","maxHeight","onFilter","_e","search","replace","filter","i","length","loadingVariant","text","onClick","limit","slice","instanceType","index","description","cores","vcpus","parseFloat","memory_mib","toFixed","storage_gb","architecture","selectItemsMapper","FormSelect","FormSelectOption","label","AccountCustomizationsAWS","setStepValidated","validations","errorExists","Object","values","some","valid","Form","Title","headingLevel","Text","FormGroup","validated","helperTextInvalid","isRequired","fieldId","validation","prevValidations","labelIcon","Popover","headerContent","e","preventDefault","noVerticalAlign","DescriptionListAWS","imageName","log","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","ExpandableAWS","isExpanded","setIsExpanded","ExpandableSection","toggleText","isIndented","ReviewDetails","selectOptionObj","PubkeySelect","setSelection","isError","pubkeys","NewSSHKeyForm","setIsLoading","sshKeyBody","sshKeyName","keyName","setName","publicKey","setPublicKey","updateValidation","inputKey","validatePublicKey","ssh","RegExp","test","TextInput","onBlur","FileUpload","onDataChange","allowEditingUploadedText","onTextChange","onTextAreaBlur","onReadStarted","onReadFinished","onReadFailed","onClearClick","filenamePlaceholder","NEW_KEY_OPTION","PublicKeys","isSelectDisabled","disableSelect","switchTo","optionKey","onOptionChange","_","currentTarget","Radio","isChecked","body","steps","progress","FinishStep","onClose","imageID","reservationID","setReservationID","activeStep","setActiveStep","stepUp","prevStep","polledReservation","enabled","refetchInterval","refetchIntervalInBackground","useMutation","reservation_id","createAWSDeployment","mutate","awsReservationError","resp","source_id","instance_type","amount","image_id","pubkey_id","createPublicKey","pubkeyError","success","activeProgress","isJobError","WizardContextConsumer","goToStepById","EmptyState","EmptyStateIcon","color","icon","ErrorCircleOIcon","OkIcon","CogsIcon","EmptyStateBody","Progress","style","width","measureLocation","toLowerCase","status","response","msg","EmptyStateSecondaryActions","Button","ConfirmModal","onConfirm","onCancel","Modal","ouiaId","ModalVariant","actions","titleIconVariant","DEFAULT_STEP_VALIDATION","sshStep","awsStep","ProvisioningWizard","image","props","stepIdReached","setStepIdReached","stepValidation","setStepValidation","isConfirming","setConfirming","onCustomClose","enableNext","component","prev","canJumpTo","nextButtonText","isFinishedStep","defaultSteps","Wizard","onNext","prevId","prevName","debug","prevID"],"sourceRoot":""}