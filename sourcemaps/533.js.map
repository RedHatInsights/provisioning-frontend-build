{"version":3,"file":"js/533.1674023871349.bff2848907a639872f12.js","mappings":"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","sources":["webpack:///./src/Components/Common/WizardContext/initialState.js","webpack:///./src/Components/Common/WizardContext/index.js","webpack:///./src/Components/Common/Query/index.js","webpack:///./src/API/queryKeys.js","webpack:///./src/API/helpers.js","webpack:///./src/API/index.js","webpack:///./src/Components/SourcesSelect/index.js","webpack:///./src/Components/InstanceCounter/index.js","webpack:///./src/Components/InstanceCounter/constants.js","webpack:///./src/Components/InstanceTypesSelect/index.js","webpack:///./src/Components/RegionsSelect/index.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/aws.js","webpack:///./src/Components/DescriptionListAWS/index.js","webpack:///./src/Components/ExpandableAWS/index.js","webpack:///./src/Components/ProvisioningWizard/steps/ReviewDetails/index.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/PubkeySelect.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/NewKeyForm.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/index.js","webpack:///./src/Components/ProvisioningWizard/steps/FinishProgress/index.js","webpack:///./src/Components/ConfirmModal/index.js","webpack:///./src/Components/ProvisioningWizard/index.js","webpack:///./src/Components/ProvisioningWizard/steps/index.js"],"sourcesContent":["const initialWizardContext = {\n  chosenSource: undefined,\n  chosenNumOfInstances: 1,\n  chosenInstanceType: undefined,\n  uploadedKey: false,\n  chosenRegion: 'us-east-1',\n  chosenImageID: undefined,\n  sshPublicName: '',\n  sshPublicKey: '',\n  chosenSshKeyId: undefined,\n  chosenSshKeyName: null,\n};\n\nexport default initialWizardContext;\n","import { useState } from 'react';\nimport { createContainer } from 'react-tracked';\nimport initialWizardContext from './initialState';\n\nconst useSharedState = () => useState(initialWizardContext);\n\nexport const { Provider: WizardProvider, useTracked: useWizardContext } = createContainer(useSharedState);\n","/* eslint-disable react/prop-types */\n\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient();\n\nconst APIProvider = ({ children }) => <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n\nexport default APIProvider;\n","export const SOURCES_QUERY_KEY = 'sources';\nexport const PUBKEYS_QUERY_KEY = 'pubkeys';\nexport const instanceTypesQueryKeys = (region) => ['instanceTypes', region];\nexport const IMAGE_REGIONS_KEY = 'image_region';\n","export const provisioningUrl = (path) => `/api/provisioning/v1/${path}`;\nexport const imageBuilderURL = (path) => `/api/image-builder/v1/${path}`;\n","import axios from 'axios';\nimport { imageBuilderURL, provisioningUrl } from './helpers';\n\nexport const fetchSourcesList = async () => {\n  const { data } = await axios.get(provisioningUrl('sources'));\n  return data;\n};\n\nexport const fetchPubkeysList = async () => {\n  const { data } = await axios.get(provisioningUrl('pubkeys'));\n  return data;\n};\n\nexport const fetchInstanceTypesList = async (region) => {\n  const { data } = await axios.get(provisioningUrl(`instance_types/aws?region=${region}`));\n  return data;\n};\n\nexport const createAWSReservation = async (params) => {\n  return axios.post(provisioningUrl('reservations/aws'), params);\n};\n\nexport const createNewPublicKey = async (params) => {\n  return axios.post(provisioningUrl('pubkeys'), params);\n};\n\nexport const fetchAWSReservation = async (id) => {\n  const { data } = await axios.get(provisioningUrl(`reservations/${id}`));\n  return data;\n};\n\nexport const fetchImageClones = async (composeID) => {\n  const { data } = await axios.get(imageBuilderURL(`composes/${composeID}/clones`));\n  return data;\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst SourcesSelect = ({ setValidation }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState(null);\n  const selectObject = (id, name) => ({\n    id,\n    toString: () => name,\n    compareTo: (other) => other.id === id,\n  });\n  const {\n    error,\n    isLoading,\n    data: sources,\n  } = useQuery(SOURCES_QUERY_KEY, fetchSourcesList, {\n    onSuccess: (data) => {\n      const id = wizardContext.chosenSource;\n\n      if (!id) return;\n      setSelected(selectObject(id, data.find((source) => source.id === id).name));\n    },\n  });\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      setSelected(null);\n      setWizardContext((prevState) => ({ ...prevState, chosenSource: null }));\n      setValidation('error');\n    } else {\n      setSelected(selection);\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenSource: selection.id,\n      }));\n      setValidation('success');\n    }\n    setIsOpen(false);\n  };\n\n  const selectItemsMapper = (sourcesData) =>\n    sourcesData.map(({ name, id }) => <SelectOption aria-label=\"Source account\" key={id} value={selectObject(id, name)}></SelectOption>);\n\n  if (error) {\n    console.warn('Failed to fetch sources list');\n    return (\n      <>\n        <Alert ouiaId=\"select_account_alert\" variant=\"warning\" isInline title=\"There are problems fetching accounts\" />\n        <Select ouiaId=\"select_account_empty\" isDisabled placeholderText=\"No accounts found\" aria-label=\"Select account\" />\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading accounts\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_account\"\n      isOpen={isOpen}\n      onToggle={(openState) => setIsOpen(openState)}\n      selections={selected}\n      onSelect={onSelect}\n      placeholderText=\"Select account\"\n      aria-label=\"Select account\"\n    >\n      {selectItemsMapper(sources)}\n    </Select>\n  );\n};\n\nSourcesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n};\n\nexport default SourcesSelect;\n","import React from 'react';\nimport { NumberInput } from '@patternfly/react-core';\nimport { useWizardContext } from '../Common/WizardContext';\nimport { MAX_INSTANCES, MIN_INSTANCES } from './constants';\n\nconst InstanceCounter = () => {\n  const [{ chosenNumOfInstances }, setWizardContext] = useWizardContext();\n\n  const onMinus = () => {\n    const newValue = chosenNumOfInstances - 1;\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  const onChange = (event) => {\n    let input = Math.floor(Number(event.target.value));\n    if (input > MAX_INSTANCES) {\n      input = MAX_INSTANCES;\n    }\n    if (input < MIN_INSTANCES) {\n      input = MIN_INSTANCES;\n    }\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: input,\n    }));\n  };\n\n  const onPlus = () => {\n    const newValue = chosenNumOfInstances + 1;\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  return (\n    <NumberInput\n      max={MAX_INSTANCES}\n      min={MIN_INSTANCES}\n      value={chosenNumOfInstances}\n      onMinus={onMinus}\n      onChange={onChange}\n      onPlus={onPlus}\n      inputName=\"instances\"\n      inputAriaLabel=\"number of instances\"\n      minusBtnAriaLabel=\"instances-minus\"\n      plusBtnAriaLabel=\"instances-plus\"\n    />\n  );\n};\nexport default InstanceCounter;\n","export const MAX_INSTANCES = 45;\nexport const MIN_INSTANCES = 1;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Spinner, Select, SelectOption, TextInput } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { instanceTypesQueryKeys } from '../../API/queryKeys';\nimport { fetchInstanceTypesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst OPTIONS_PER_SCREEN = 5;\nconst sanitizeSearchValue = (str) => str.replace(/\\\\+$/, '');\n\nconst InstanceTypesSelect = ({ setValidation, architecture }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [numOptions, setNumOptions] = React.useState(OPTIONS_PER_SCREEN);\n  const [filteredTypes, setFilteredTypes] = React.useState(null);\n  const [prevSearch, setPrevSearch] = React.useState('');\n  const {\n    isLoading,\n    error,\n    data: instanceTypes,\n  } = useQuery(instanceTypesQueryKeys(wizardContext.chosenRegion), () => fetchInstanceTypesList(wizardContext.chosenRegion), {\n    select: (types) => types.filter((type) => type.architecture === architecture),\n  });\n\n  if (!wizardContext.chosenSource || wizardContext.chosenSource === '') {\n    return (\n      <>\n        <TextInput\n          ouiaId=\"instance_type_readonly\"\n          className=\"pf-c-form-control\"\n          readOnly\n          type=\"text\"\n          value=\"Select account to load instances\"\n          id=\"input-readonly\"\n          aria-label=\"Readonly input example\"\n        />\n      </>\n    );\n  }\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenInstanceType: selection,\n      }));\n      setValidation('success');\n      setIsOpen(false);\n    }\n  };\n\n  const clearSelection = () => {\n    setValidation('error');\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenInstanceType: null,\n    }));\n    setIsOpen(false);\n  };\n\n  const onFilter = (_e, inputValue) => {\n    const search = sanitizeSearchValue(inputValue);\n    if (prevSearch !== search) {\n      setNumOptions(OPTIONS_PER_SCREEN);\n      setPrevSearch(search);\n      setFilteredTypes(instanceTypes.filter((i) => i.name.includes(search)));\n    }\n  };\n\n  const selectItemsMapper = (types, limit) => {\n    if (limit < types.length) types = types.slice(0, limit);\n    return types.map((instanceType, index) => (\n      <SelectOption\n        aria-label={'Instance Type item'}\n        key={index}\n        description={`${instanceType.cores} cores |\n          ${instanceType.vcpus} vCPU |\n          ${(parseFloat(instanceType.memory_mib) / 1024).toFixed(1)} GiB memory |\n          ${instanceType.storage_gb > 0 ? instanceType.storage_gb + ' GB storage | ' : 'EBS only | '}\n          ${instanceType.architecture}`}\n        value={instanceType.name}\n      />\n    ));\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (error) {\n    console.warn('Failed to fetch instance types list');\n    return (\n      <>\n        <Alert ouiaId=\"instance_type_alert\" variant=\"warning\" isInline title=\"There are problems fetching instance types\" />\n        <Select ouiaId=\"instance_type_empty\" isDisabled placeholderText=\"No instance types found\" aria-label=\"Select instance type\" />\n      </>\n    );\n  }\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Contents of the small example\" />;\n  }\n\n  const types = filteredTypes || instanceTypes;\n\n  return (\n    <Select\n      ouiaId=\"select_instance_type\"\n      variant=\"typeahead\"\n      aria-label=\"Select instance type\"\n      placeholderText=\"Select instance type\"\n      maxHeight=\"450px\"\n      isOpen={isOpen}\n      selections={wizardContext.chosenInstanceType}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      onFilter={onFilter}\n      {...(numOptions < types.length && {\n        loadingVariant: {\n          text: `View more (${types.length - numOptions})`,\n          onClick: () => setNumOptions(numOptions + OPTIONS_PER_SCREEN),\n        },\n      })}\n    >\n      {selectItemsMapper(types, numOptions)}\n    </Select>\n  );\n};\n\nInstanceTypesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n};\n\nexport default InstanceTypesSelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { useWizardContext } from '../Common/WizardContext';\nimport { IMAGE_REGIONS_KEY } from '../../API/queryKeys';\nimport { fetchImageClones } from '../../API';\n\nconst DEFAULT_REGION = 'us-east-1';\n\nconst RegionsSelect = ({ composeID }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const {\n    isError,\n    isLoading,\n    data: clonedImages,\n  } = useQuery([IMAGE_REGIONS_KEY, composeID], () => fetchImageClones(composeID), {\n    select: (images) => images.data?.map((image) => ({ id: image.id, region: image.request.region })),\n  });\n  const parentImage = [{ region: DEFAULT_REGION, id: composeID }];\n  const images = clonedImages ? parentImage.concat(clonedImages) : parentImage;\n\n  const onSelect = (_, selection) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenRegion: selection,\n      chosenImageID: images.find((image) => image.region === selection)?.id,\n    }));\n    setIsOpen(false);\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (isError) {\n    return (\n      <>\n        <Alert ouiaId=\"regions_alert\" variant=\"warning\" isInline title=\"There are problems fetching image's regions\" />\n        <Select ouiaId=\"regions_empty\" isDisabled placeholderText=\"No regions have found\" />\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"loading available regions\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_regions\"\n      variant=\"typeahead\"\n      aria-label=\"Select region\"\n      label=\"Select region\"\n      maxHeight=\"450px\"\n      isOpen={isOpen}\n      selections={wizardContext.chosenRegion}\n      onToggle={onToggle}\n      onSelect={onSelect}\n    >\n      {images.map(({ id, region }) => (\n        <SelectOption aria-label=\"Region item\" key={id} value={region} />\n      ))}\n    </Select>\n  );\n};\n\nRegionsSelect.propTypes = {\n  composeID: PropTypes.string.isRequired,\n};\n\nexport default RegionsSelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Text, Button } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst AccountCustomizationsAWS = ({ setStepValidated, architecture, composeID }) => {\n  const [{ chosenSource, chosenInstanceType }] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: chosenSource ? 'success' : 'default',\n    types: chosenInstanceType ? 'success' : 'default',\n  });\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  return (\n    <Form>\n      <Title ouiaId=\"account_custom_title\" headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | AWS\n      </Title>\n      <Text ouiaId=\"account_custom_description\">\n        Configure instances that will run on your AWS. All the instances will launch with the same configuration.\n      </Text>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"aws-select-source\"\n      >\n        <SourcesSelect\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select region\"\n        isRequired\n        fieldId=\"aws-select-region\"\n        labelIcon={\n          <Popover bodyContent=\"Select available geographical region\">\n            <Button\n              ouiaId=\"region_help\"\n              type=\"button\"\n              aria-label=\"More info for regions field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-region\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <RegionsSelect composeID={composeID} />\n      </FormGroup>\n      <FormGroup\n        label=\"Select instance type\"\n        isRequired\n        helperTextInvalid=\"Please pick a value\"\n        fieldId=\"aws-select-instance-types\"\n        labelIcon={\n          <Popover\n            bodyContent=\"Select AWS instance type based on your computing,\n           memory, networking, or storage needs\"\n          >\n            <Button\n              ouiaId=\"instance_type_help\"\n              type=\"button\"\n              aria-label=\"More info for instance types field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-types\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          architecture={architecture}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"aws-select-instance-counter\"\n        labelIcon={\n          <Popover bodyContent=\"Specify the number of AWS instances to be launched\">\n            <Button\n              ouiaId=\"instance_count_help\"\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceCounter />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsAWS.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n  composeID: PropTypes.string.isRequired,\n};\n\nexport default AccountCustomizationsAWS;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { DescriptionList, DescriptionListTerm, DescriptionListGroup, DescriptionListDescription } from '@patternfly/react-core';\n\nimport { useQuery } from 'react-query';\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst DescriptionListAWS = ({ imageName }) => {\n  const [wizardContext] = useWizardContext();\n  const { error, data: sources } = useQuery(SOURCES_QUERY_KEY, fetchSourcesList);\n\n  if (error) {\n    // TODO: error handling, notifications\n    console.log('Failed to fetch sources list');\n  }\n\n  const getChosenSourceName = () => sources?.find((source) => source.id === wizardContext.chosenSource).name;\n\n  return (\n    <DescriptionList isHorizontal>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Image</DescriptionListTerm>\n        <DescriptionListDescription>{imageName}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Account</DescriptionListTerm>\n        <DescriptionListDescription>{getChosenSourceName()}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Region</DescriptionListTerm>\n        <DescriptionListDescription>{wizardContext.chosenRegion}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Instance type</DescriptionListTerm>\n        <DescriptionListDescription>{wizardContext.chosenInstanceType}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Count</DescriptionListTerm>\n        <DescriptionListDescription>{wizardContext.chosenNumOfInstances}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>{wizardContext.uploadedKey ? 'New SSH key' : 'Existing SSH key'}</DescriptionListTerm>\n        <DescriptionListDescription>\n          {wizardContext.uploadedKey ? wizardContext.sshPublicName : wizardContext.chosenSshKeyName}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n    </DescriptionList>\n  );\n};\n\nDescriptionListAWS.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default DescriptionListAWS;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ExpandableSection } from '@patternfly/react-core';\nimport DescriptionListAWS from '../DescriptionListAWS';\nexport const ExpandableAWS = ({ imageName }) => {\n  const [isExpanded, setIsExpanded] = React.useState(true);\n  const onToggle = (isExpanded) => {\n    setIsExpanded(isExpanded);\n  };\n  return (\n    <ExpandableSection toggleText={'AWS'} onToggle={onToggle} isExpanded={isExpanded} isIndented>\n      <DescriptionListAWS imageName={imageName} />\n    </ExpandableSection>\n  );\n};\n\nExpandableAWS.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title, Text } from '@patternfly/react-core';\nimport { ExpandableAWS } from '../../../ExpandableAWS';\n\nconst ReviewDetails = ({ imageName }) => {\n  return (\n    <div className=\"pf-c-form\">\n      <Title ouiaId=\"review_details_title\" headingLevel=\"h1\">\n        Review details\n      </Title>\n      <Text ouiaId=\"review_details_description\">\n        Review the information below and then click <b>Launch</b> to finish the process.\n      </Text>\n\n      <ExpandableAWS imageName={imageName} />\n    </div>\n  );\n};\n\nReviewDetails.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default ReviewDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst selectOptionObj = (id, name) => ({\n  id: id,\n  toString: () => name,\n  compareTo: (other) => other.id == id,\n});\n\nconst PubkeySelect = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selection, setSelection] = React.useState(\n    wizardContext.chosenSshKeyId ? selectOptionObj(wizardContext.chosenSshKeyId, wizardContext.chosenSshKeyName) : null\n  );\n\n  React.useEffect(() => {\n    setStepValidated(!!selection);\n  }, [selection]);\n\n  const { isLoading, isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n\n  const onSelect = (event, value) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenSshKeyId: value.id,\n      chosenSshKeyName: value.toString(),\n    }));\n    setSelection(value);\n    setIsOpen(false);\n  };\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading saved SSH keys\" />;\n  }\n\n  if (isError || (pubkeys && pubkeys.length < 1)) {\n    return (\n      <>\n        {isError && <Alert ouiaId=\"pubkey_alert\" variant=\"warning\" isInline title=\"There are problems fetching saved SSH keys\" />}\n        <Select ouiaId=\"pubkey_empty\" isDisabled placeholderText=\"No SSH key found\" aria-label=\"Select public key\" />\n      </>\n    );\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_pubkey\"\n      onToggle={(isExpanded) => setIsOpen(isExpanded)}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      selections={selection}\n      placeholderText=\"Select public key...\"\n      aria-label=\"Select public key\"\n    >\n      {pubkeys.map(({ id, name }) => (\n        <SelectOption aria-label={`Public key ${name}`} key={id} value={selectOptionObj(id, name)} />\n      ))}\n    </Select>\n  );\n};\n\nPubkeySelect.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PubkeySelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormGroup, TextInput, FileUpload } from '@patternfly/react-core';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\n// This is a simple regex format for public ssh key\nconst PUBLIC_KEY_FORMAT = '^(ssh|ecdsa)';\n\nconst NewSSHKeyForm = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isLoading, setIsLoading] = React.useState();\n  const [validations, setValidation] = React.useState({\n    sshKeyBody: 'default',\n    sshKeyName: 'default',\n  });\n  const [keyName, setName] = React.useState(wizardContext.sshPublicName);\n  const [publicKey, setPublicKey] = React.useState(wizardContext.sshPublicKey);\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  const updateValidation = (inputKey, value) =>\n    setValidation((prevValidations) => ({\n      ...prevValidations,\n      [inputKey]: value,\n    }));\n\n  const handleNameChange = (value) => {\n    setWizardContext((prevState) => ({ ...prevState, sshPublicName: value }));\n    setName(value);\n  };\n  const handleNameBlur = () => {\n    if (keyName.length === 0) {\n      updateValidation('sshKeyName', 'error');\n      return;\n    }\n    updateValidation('sshKeyName', 'success');\n  };\n  const handleSSHKeyChange = (value) => {\n    if (validatePublicKey(value)) {\n      setWizardContext((prevState) => ({\n        ...prevState,\n        sshPublicKey: value,\n      }));\n      setPublicKey(value);\n      updateValidation('sshKeyBody', 'success');\n    } else {\n      updateValidation('sshKeyBody', 'error');\n    }\n  };\n  const handleSSHKeyText = (text) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicKey: text,\n    }));\n    setPublicKey(text);\n  };\n  const handleSSHKeyTextBlur = () => {\n    if (publicKey === '') {\n      updateValidation('sshKeyBody', 'default');\n    } else {\n      updateValidation('sshKeyBody', validatePublicKey(publicKey) ? 'success' : 'error');\n    }\n  };\n\n  const handleClear = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: undefined,\n      sshPublicKey: undefined,\n    }));\n    setPublicKey('');\n    updateValidation('sshKeyBody', 'default');\n  };\n\n  const handleFileReadStarted = () => {\n    setIsLoading(true);\n  };\n\n  const handleFileReadFinished = () => {\n    setIsLoading(false);\n  };\n  const handleFileReadFailed = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: '<Failed to load the file>',\n    }));\n    updateValidation('sshKeyBody', 'error');\n  };\n\n  const validatePublicKey = (ssh) => {\n    const regex = new RegExp(PUBLIC_KEY_FORMAT);\n    return regex.test(ssh);\n  };\n  return (\n    <FormGroup isStack>\n      <FormGroup validated={validations.sshKeyName} helperTextInvalid=\"Name is required\" label=\"Name\" isRequired fieldId=\"ssh-name\">\n        <TextInput\n          ouiaId=\"new_pubkey_name\"\n          validated={validations.sshKeyName}\n          value={keyName}\n          id=\"public-key-name\"\n          onChange={handleNameChange}\n          onBlur={handleNameBlur}\n          type=\"text\"\n        />\n      </FormGroup>\n      <FormGroup\n        helperTextInvalid=\"Must be SSH public key format\"\n        label=\"SSH public key\"\n        isRequired\n        fieldId=\"ssh-file\"\n        validated={validations.sshKeyBody}\n      >\n        <FileUpload\n          // ouia not supported yet?\n          ouiaId=\"new_pubkey_file\"\n          id=\"public-key-value\"\n          onDataChange={handleSSHKeyChange}\n          allowEditingUploadedText\n          onTextChange={handleSSHKeyText}\n          onTextAreaBlur={handleSSHKeyTextBlur}\n          type=\"text\"\n          value={publicKey}\n          validated={validations.sshKeyBody}\n          onReadStarted={handleFileReadStarted}\n          onReadFinished={handleFileReadFinished}\n          onReadFailed={handleFileReadFailed}\n          onClearClick={handleClear}\n          isLoading={isLoading}\n          filenamePlaceholder=\"Drag a file here\"\n        />\n      </FormGroup>\n    </FormGroup>\n  );\n};\n\nNewSSHKeyForm.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\nexport default NewSSHKeyForm;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Radio, Text, Title } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport PubkeySelect from './PubkeySelect';\nimport NewSSHKeyForm from './NewKeyForm';\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\n\nconst EXIST_KEY_OPTION = 'existKey';\nconst NEW_KEY_OPTION = 'newKey';\n\nconst PublicKeys = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const { isLoading, isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n  const [isSelectDisabled, disableSelect] = React.useState(false);\n\n  const switchTo = (optionKey) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      uploadedKey: NEW_KEY_OPTION === optionKey,\n    }));\n  };\n\n  const onOptionChange = (_, event) => {\n    switchTo(event.currentTarget.value);\n  };\n\n  React.useEffect(() => {\n    if (!isLoading && (isError || (pubkeys && pubkeys.length < 1))) {\n      disableSelect(true);\n      switchTo(NEW_KEY_OPTION);\n    }\n  }, [isLoading]);\n\n  return (\n    <Form className=\"pubkeys\">\n      <Title ouiaId=\"pubkey_title\" headingLevel=\"h1\">\n        SSH keys authentication\n      </Title>\n      <Text ouiaId=\"pubkey_description\">Establish secure, reliable communication and strong encryption to protect data.</Text>\n      <FormGroup role=\"radiogroup\" isStack isRequired label=\"Select a method to add SSH pubic key\">\n        <Radio\n          id=\"existing-pubkey-radio\"\n          ouiaId=\"pubkey_radio\"\n          isChecked={!wizardContext.uploadedKey}\n          isDisabled={isSelectDisabled}\n          name=\"ssh-keys-radio\"\n          value={EXIST_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Select existing SSH public key\"\n          data-testid=\"existing-pubkey-radio\"\n          body={\n            (!wizardContext.uploadedKey || isSelectDisabled) && (\n              <FormGroup label=\"Select public key\">\n                <PubkeySelect setStepValidated={setStepValidated} />\n              </FormGroup>\n            )\n          }\n        />\n        <Radio\n          id=\"upload-pubkey-radio\"\n          ouiaId=\"new_pubkey_radio\"\n          isChecked={wizardContext.uploadedKey}\n          name=\"ssh-keys-radio\"\n          value={NEW_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Add and save a new SSH public key\"\n          description=\"Newly added key will be automatically saved. Result of the provisioning will not be affected this process.\"\n          data-testid=\"upload-pubkey-radio\"\n          body={wizardContext.uploadedKey && <NewSSHKeyForm setStepValidated={setStepValidated} />}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nPublicKeys.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PublicKeys;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Title,\n  Progress,\n  Button,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { CogsIcon, CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport { useMutation, useQuery } from 'react-query';\nimport { createAWSReservation, createNewPublicKey, fetchAWSReservation } from '../../../../API';\nimport './styles.scss';\n\nconst pf_success_color_100 = '#3E8635';\nconst pf_danger_color_100 = '#C9190B';\nconst RESERVATION_POLLING_INTERVAL = 500;\n\nconst steps = [\n  { description: 'Uploading SSH public key', progress: 0 },\n  { description: 'Creating AWS reservation', progress: 20 },\n  {\n    description: 'Waiting for AWS',\n    progress: 40,\n  },\n  { description: 'Launch is completed', progress: 100 },\n];\n\nconst FinishStep = ({ imageID, setLaunchSuccess }) => {\n  const [\n    { chosenSource, chosenInstanceType, chosenNumOfInstances, chosenRegion, sshPublicName, sshPublicKey, chosenSshKeyId, uploadedKey, chosenImageID },\n  ] = useWizardContext();\n  const [reservationID, setReservationID] = React.useState();\n  const [activeStep, setActiveStep] = React.useState(uploadedKey ? 0 : 1);\n  const stepUp = () => setActiveStep((prevStep) => (prevStep < steps.length - 1 ? prevStep + 1 : prevStep));\n\n  const { mutate: createPublicKey, error: pubkeyError } = useMutation(createNewPublicKey, {\n    onSuccess: (resp) => {\n      createAWSDeployment({\n        source_id: chosenSource,\n        instance_type: chosenInstanceType,\n        amount: chosenNumOfInstances,\n        image_id: chosenImageID || imageID,\n        region: chosenRegion,\n        pubkey_id: resp?.data?.id,\n      });\n      stepUp();\n    },\n  });\n\n  const { mutate: createAWSDeployment, error: awsReservationError } = useMutation(createAWSReservation, {\n    onSuccess: (res) => {\n      stepUp();\n      setReservationID(res?.data?.reservation_id);\n    },\n  });\n\n  const { data: polledReservation } = useQuery(['reservation', reservationID], () => fetchAWSReservation(reservationID), {\n    enabled: !!reservationID && activeStep < steps.length - 1 && !awsReservationError && !pubkeyError,\n    refetchInterval: RESERVATION_POLLING_INTERVAL,\n    refetchIntervalInBackground: true,\n  });\n\n  React.useEffect(() => {\n    if (polledReservation?.success) {\n      stepUp();\n      setLaunchSuccess();\n    }\n  }, [polledReservation?.success]);\n\n  React.useEffect(() => {\n    if (uploadedKey) {\n      createPublicKey({ name: sshPublicName, body: sshPublicKey });\n    } else {\n      createAWSDeployment({\n        source_id: chosenSource,\n        instance_type: chosenInstanceType,\n        amount: chosenNumOfInstances,\n        image_id: chosenImageID || imageID,\n        region: chosenRegion,\n        pubkey_id: chosenSshKeyId,\n      });\n    }\n  }, []);\n\n  const activeProgress = steps[activeStep].progress;\n  const activeDescription = steps[activeStep].description;\n  const isJobError = polledReservation?.success === false;\n  const isError = !!awsReservationError || !!pubkeyError || isJobError;\n\n  let title;\n  let iconProps;\n  if (isError) {\n    title = 'Launching system(s): Failure';\n    iconProps = { color: pf_danger_color_100, icon: ExclamationCircleIcon };\n  } else if (activeProgress === 100) {\n    title = 'Launching system(s): Success';\n    iconProps = { color: pf_success_color_100, icon: CheckCircleIcon };\n  } else {\n    title = 'Launching your system(s)';\n    iconProps = { icon: CogsIcon };\n  }\n\n  return (\n    <WizardContextConsumer>\n      {({ goToStepById, onClose }) => (\n        <EmptyState variant=\"large\">\n          <EmptyStateIcon {...iconProps} />\n          <Title headingLevel=\"h4\" size=\"lg\" ouiaId=\"launch-status\">\n            {title}\n          </Title>\n          <EmptyStateBody>\n            <Progress\n              style={{ width: '500px' }}\n              variant={isError && 'danger'}\n              value={activeProgress}\n              measureLocation=\"outside\"\n              id=\"launch-progress\"\n            />\n          </EmptyStateBody>\n          <EmptyStateBody>\n            <span>\n              {isError ? `An error has occurred while ${activeDescription[0].toLowerCase() + activeDescription.substring(1)}` : activeDescription}\n              .\n              <br />\n              {polledReservation?.status}\n              <span className=\"status-error\">\n                {awsReservationError?.response?.data?.msg}\n                {pubkeyError?.response?.data?.msg}\n                {polledReservation?.error}\n              </span>\n              {reservationID && <input type=\"hidden\" name=\"reservation_id\" value={reservationID} />}\n            </span>\n          </EmptyStateBody>\n          {isError && (\n            <Button onClick={() => goToStepById(1)} variant=\"primary\">\n              Edit\n            </Button>\n          )}\n          <EmptyStateSecondaryActions>\n            <Button variant=\"link\" isDisabled={!isError && activeStep < 2} onClick={onClose}>\n              Close\n            </Button>\n          </EmptyStateSecondaryActions>\n        </EmptyState>\n      )}\n    </WizardContextConsumer>\n  );\n};\n\nFinishStep.propTypes = {\n  imageID: PropTypes.string.isRequired,\n  setLaunchSuccess: PropTypes.func.isRequired,\n};\n\nexport default FinishStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nconst ConfirmModal = ({ isOpen, onConfirm, onCancel }) => (\n  <Modal\n    ouiaId=\"app-confirm-modal\"\n    id=\"app-confirm-modal\"\n    aria-label=\"confirm cancel of launch modal\"\n    variant={ModalVariant.small}\n    title=\"Exit instance launching?\"\n    isOpen={isOpen}\n    onClose={onCancel}\n    actions={[\n      <Button key=\"exit\" variant=\"primary\" onClick={onConfirm} ouiaId=\"btn-exit-confirm\">\n        Exit\n      </Button>,\n      <Button key=\"stay\" variant=\"link\" onClick={onCancel}>\n        Stay\n      </Button>,\n    ]}\n    titleIconVariant=\"warning\"\n  >\n    All inputs will be discarded.\n  </Modal>\n);\n\nConfirmModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default ConfirmModal;\n","import PropTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { WizardProvider } from '../Common/WizardContext';\nimport APIProvider from '../Common/Query';\nimport defaultSteps from './steps';\nimport ConfirmModal from '../ConfirmModal';\nimport './steps/Pubkeys/pubkeys.scss';\n\nconst DEFAULT_STEP_VALIDATION = {\n  sshStep: false,\n  awsStep: false,\n};\n\nconst ProvisioningWizard = ({ isOpen, onClose, image, ...props }) => {\n  const [stepIdReached, setStepIdReached] = React.useState(1);\n  const [stepValidation, setStepValidation] = React.useState(DEFAULT_STEP_VALIDATION);\n  const [isConfirming, setConfirming] = React.useState(false);\n  const [successfulLaunch, setLaunchSuccess] = React.useState();\n\n  const onCustomClose = () => {\n    setConfirming(false);\n    setStepIdReached(1);\n    setStepValidation(DEFAULT_STEP_VALIDATION);\n    onClose();\n  };\n\n  const onWizardClose = () => {\n    if (stepIdReached >= 5 && !successfulLaunch) {\n      setConfirming(true);\n    } else {\n      onCustomClose();\n    }\n  };\n\n  const steps = defaultSteps({\n    stepIdReached,\n    image,\n    stepValidation,\n    setStepValidation,\n    setLaunchSuccess,\n  });\n\n  const onNext = ({ id, name }, { prevId, prevName }) => {\n    console.debug(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\n    setStepIdReached((prevID) => (prevID < id ? id : prevID));\n  };\n\n  return isOpen ? (\n    <WizardProvider>\n      <APIProvider>\n        <Wizard\n          {...props}\n          title=\"Launch\"\n          description={`Launch image ${image.name}`}\n          steps={steps}\n          isOpen\n          onClose={onWizardClose}\n          onNext={onNext}\n          className={'provisioning'}\n        />\n        <ConfirmModal isOpen={isConfirming} onConfirm={onCustomClose} onCancel={() => setConfirming(false)} />\n      </APIProvider>\n    </WizardProvider>\n  ) : null;\n};\n\nProvisioningWizard.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func,\n  image: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    architecture: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ProvisioningWizard;\n","import React from 'react';\nimport AccountCustomizationsAWS from '../steps/AccountCustomizations/aws';\nimport ReviewDetails from './ReviewDetails';\nimport PublicKeys from './Pubkeys';\nimport FinishStep from './FinishProgress';\n\nconst defaultSteps = ({ stepIdReached, image: { name, id, architecture }, stepValidation, setStepValidation, setLaunchSuccess }) => [\n  {\n    name: 'Account and customization',\n    steps: [\n      {\n        name: 'AWS',\n        id: 1,\n        enableNext: stepValidation.awsStep,\n        component: (\n          <AccountCustomizationsAWS\n            architecture={architecture || 'x86_64'}\n            composeID={id}\n            setStepValidated={(validated) => setStepValidation((prev) => ({ ...prev, awsStep: validated }))}\n          />\n        ),\n        canJumpTo: stepIdReached >= 1,\n      },\n    ],\n  },\n  {\n    name: 'SSH key authentication',\n    id: 4,\n    component: <PublicKeys setStepValidated={(validated) => setStepValidation((prev) => ({ ...prev, sshStep: validated }))} />,\n    canJumpTo: stepIdReached >= 4,\n    enableNext: stepValidation.sshStep,\n  },\n  {\n    name: 'Review details',\n    id: 5,\n    component: <ReviewDetails imageName={name} />,\n    canJumpTo: stepIdReached >= 5,\n    nextButtonText: 'Launch',\n  },\n  {\n    name: 'Finish Progress',\n    id: 6,\n    component: <FinishStep setLaunchSuccess={() => setLaunchSuccess(true)} imageID={id} />,\n    isFinishedStep: true,\n  },\n];\n\nexport default defaultSteps;\n"],"names":["chosenSource","undefined","chosenNumOfInstances","chosenInstanceType","uploadedKey","chosenRegion","chosenImageID","sshPublicName","sshPublicKey","chosenSshKeyId","chosenSshKeyName","createContainer","useState","initialWizardContext","WizardProvider","Provider","useWizardContext","useTracked","queryClient","QueryClient","children","QueryClientProvider","client","SOURCES_QUERY_KEY","PUBKEYS_QUERY_KEY","provisioningUrl","path","fetchSourcesList","axios","data","fetchPubkeysList","fetchInstanceTypesList","region","createAWSReservation","params","createNewPublicKey","fetchAWSReservation","id","fetchImageClones","composeID","SourcesSelect","setValidation","wizardContext","setWizardContext","React","isOpen","setIsOpen","selected","setSelected","selectObject","name","toString","compareTo","other","useQuery","onSuccess","find","source","error","isLoading","sources","console","warn","Alert","ouiaId","variant","isInline","title","Select","isDisabled","placeholderText","Spinner","isSVG","size","onToggle","openState","selections","onSelect","event","selection","isPlaceholder","prevState","map","SelectOption","key","value","propTypes","PropTypes","NumberInput","max","min","onMinus","newValue","onChange","input","Math","floor","Number","target","onPlus","inputName","inputAriaLabel","minusBtnAriaLabel","plusBtnAriaLabel","InstanceTypesSelect","architecture","numOptions","setNumOptions","filteredTypes","setFilteredTypes","prevSearch","setPrevSearch","select","types","filter","type","instanceTypes","TextInput","className","readOnly","maxHeight","onFilter","_e","inputValue","search","replace","i","includes","length","loadingVariant","text","onClick","limit","slice","instanceType","index","description","cores","vcpus","parseFloat","memory_mib","toFixed","storage_gb","selectItemsMapper","RegionsSelect","images","image","request","isError","clonedImages","parentImage","concat","label","_","AccountCustomizationsAWS","setStepValidated","validations","errorExists","Object","values","some","valid","Form","Title","headingLevel","Text","FormGroup","validated","helperTextInvalid","isRequired","fieldId","validation","prevValidations","labelIcon","Popover","bodyContent","Button","e","preventDefault","noVerticalAlign","DescriptionListAWS","imageName","log","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","ExpandableAWS","isExpanded","setIsExpanded","ExpandableSection","toggleText","isIndented","ReviewDetails","selectOptionObj","PubkeySelect","setSelection","pubkeys","NewSSHKeyForm","setIsLoading","sshKeyBody","sshKeyName","keyName","setName","publicKey","setPublicKey","updateValidation","inputKey","validatePublicKey","ssh","RegExp","test","isStack","onBlur","FileUpload","onDataChange","allowEditingUploadedText","onTextChange","onTextAreaBlur","onReadStarted","onReadFinished","onReadFailed","onClearClick","filenamePlaceholder","NEW_KEY_OPTION","PublicKeys","isSelectDisabled","disableSelect","switchTo","optionKey","onOptionChange","currentTarget","role","Radio","isChecked","body","steps","progress","FinishStep","imageID","setLaunchSuccess","reservationID","setReservationID","activeStep","setActiveStep","stepUp","prevStep","useMutation","resp","createAWSDeployment","source_id","instance_type","amount","image_id","pubkey_id","createPublicKey","mutate","pubkeyError","res","reservation_id","awsReservationError","polledReservation","enabled","refetchInterval","refetchIntervalInBackground","success","iconProps","activeProgress","activeDescription","isJobError","color","icon","ExclamationCircleIcon","CheckCircleIcon","CogsIcon","WizardContextConsumer","goToStepById","onClose","EmptyState","EmptyStateIcon","EmptyStateBody","Progress","style","width","measureLocation","toLowerCase","substring","status","response","msg","EmptyStateSecondaryActions","ConfirmModal","onConfirm","onCancel","Modal","ModalVariant","actions","titleIconVariant","DEFAULT_STEP_VALIDATION","sshStep","awsStep","ProvisioningWizard","props","stepIdReached","setStepIdReached","stepValidation","setStepValidation","isConfirming","setConfirming","successfulLaunch","onCustomClose","enableNext","component","prev","canJumpTo","nextButtonText","isFinishedStep","defaultSteps","Wizard","onNext","prevId","prevName","debug","prevID"],"sourceRoot":""}