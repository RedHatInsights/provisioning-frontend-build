{"version":3,"file":"js/834.1676969770847.2ce8cc9fa6e8c1d410fb.js","mappings":"kPAMO,SAASA,IAAoB,2BAAZC,EAAY,yBAAZA,EAAY,gBAElC,OADWC,EAAAA,EAAAA,IAAY,CAAC,EAAF,CAAMC,KAAmBC,EAAAA,EAAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAAnF,OAAmGJ,GAE1H,C,cCJKK,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,8DAAN,IAClBC,GAAWD,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IAChBE,GAAoBF,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAUlBG,EAAS,kBACpB,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,QAIJ,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,KAAK,UAAUC,UAAWZ,IACjC,kBAAC,EAAAU,MAAD,CAAOC,KAAK,QAAQC,UAAWV,IAC/B,kBAAC,EAAAQ,MAAD,CAAOC,KAAK,kBAAkBC,UAAWT,IAEzC,kBAAC,EAAAO,MAAD,KACE,kBAAC,EAAAG,SAAD,CAAUC,GAAG,cAdC,E,8BCetB,QAtBY,SAACC,GACX,IAAMC,GAAUC,EAAAA,EAAAA,cACJC,GAAkBC,EAAAA,EAAAA,KAAtBC,GAYR,OAVAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,GAAW1B,EAAAA,EAAAA,MACX2B,EAAaL,EAAc,kBAAkB,SAACM,GAAD,OAAWR,EAAQS,KAAR,WAAiBD,EAAME,OAAlC,IAGnD,OAFAJ,EAASK,SAAS,CAAEC,cAAeC,EAAAA,KAE5B,WACLN,SAAAA,GACD,CACF,GAAE,IAGD,kBAAC,EAAAO,SAAD,KACE,kBAAC,KAAD,MACA,kBAAC1B,EAAD,CAAQ2B,WAAYhB,IAGzB,E,sBCdD,QARiB,kBACf,kBAAC,KAAD,CAAUiB,MAAOtC,EAAAA,WAAA,UAA4D,KAAKuC,YAChF,kBAAC,gBAAD,CAAQC,UAAUC,EAAAA,EAAAA,IAAYC,OAAOC,SAASC,WAC5C,kBAAC,EAAD,OAHW,ECJjB,IAAMC,EAAOC,SAASC,eAAe,QAErCC,IAAAA,OAAgB,kBAAC,EAAD,MAAcH,GAAM,kBAAMA,EAAKI,aAAa,kBAAkB,EAA1C,G","sources":["webpack:///./src/store/index.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js"],"sourcesContent":["import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [promiseMiddleware, notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }), ...middleware]);\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst SamplePage = lazy(() => import(/* webpackChunkName: \"SamplePage\" */ './Routes/SamplePage/SamplePage'));\nconst OopsPage = lazy(() => import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage'));\nconst NoPermissionsPage = lazy(() => import(/* webpackChunkName: \"NoPermissionsPage\" */ './Routes/NoPermissionsPage/NoPermissionsPage'));\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route path=\"/sample\" component={SamplePage} />\n      <Route path=\"/oops\" component={OopsPage} />\n      <Route path=\"/no-permissions\" component={NoPermissionsPage} />\n      {/* Finally, catch all unmatched routes */}\n      <Route>\n        <Redirect to=\"/sample\" />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n","import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = (props) => {\n  const history = useHistory();\n  const { on: onChromeEvent } = useChrome();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    const unregister = onChromeEvent('APP_NAVIGATION', (event) => history.push(`/${event.navId}`));\n    registry.register({ notifications: notificationsReducer });\n\n    return () => {\n      unregister?.();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n  <Provider store={init(...(process.env.NODE_ENV !== 'production' ? [logger] : [])).getStore()}>\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App />\n    </Router>\n  </Provider>\n);\n\nexport default AppEntry;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root, () => root.setAttribute('data-ouia-safe', true));\n"],"names":["init","middleware","getRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey","SamplePage","lazy","OopsPage","NoPermissionsPage","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","component","Redirect","to","props","history","useHistory","onChromeEvent","useChrome","on","useEffect","registry","unregister","event","push","navId","register","notifications","notificationsReducer","Fragment","childProps","store","getStore","basename","getBaseName","window","location","pathname","root","document","getElementById","ReactDOM","setAttribute"],"sourceRoot":""}