{"version":3,"file":"js/528.1665564790877.da9cf387da1fa9bb3cd1.js","mappings":"wOAyCA,QA9BY,SAACA,GACX,IAAMC,GAAUC,EAAAA,EAAAA,cACVC,GAASC,EAAAA,EAAAA,KAoBf,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EACJ,GAAIH,EAAQ,EACOI,EAAAA,EAAAA,MACRC,SAAS,CAAEC,cAAeC,EAAAA,KACnC,MAA2CP,EAAOQ,OAA1CC,EAAR,EAAQA,YAAiBC,EAAzB,EAAqBC,GAGrBF,EAAYG,EAAAA,GAAAA,GACZT,EAAaO,EAAc,kBAAkB,SAACG,GAAD,OAC3Cf,EAAQgB,KAAR,WAAiBD,EAAME,OADoB,GAG9C,CACD,OAAO,WACLZ,GACD,CACF,GAAE,CAACH,IAGF,kBAAC,EAAAgB,SAAD,KACE,kBAAC,KAAD,MACA,kBAAC,IAAD,CAAQC,WAAYpB,IAGzB,C,yICnBD,QAZiB,kBACf,kBAAC,KAAD,CACEqB,MAAOV,EAAAA,GAAAA,WAAA,UACkD,KACvDW,YAEF,kBAAC,gBAAD,CAAQC,UAAUC,EAAAA,EAAAA,IAAYC,OAAOC,SAASC,WAC5C,kBAAC,IAAD,OAPW,C,2ECHXC,GAAaC,EAAAA,EAAAA,OAAK,kBACtB,oDADsB,IAGlBC,GAAWD,EAAAA,EAAAA,OAAK,kBACpB,4BADoB,IAGhBE,GAAoBF,EAAAA,EAAAA,OAAK,kBAC7B,6BAD6B,IAclBG,EAAS,kBACpB,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,QAIJ,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,KAAK,UAAUC,UAAWZ,IACjC,kBAAC,EAAAU,MAAD,CAAOC,KAAK,QAAQC,UAAWV,IAC/B,kBAAC,EAAAQ,MAAD,CAAOC,KAAK,kBAAkBC,UAAWT,IAEzC,kBAAC,EAAAO,MAAD,KACE,kBAAC,EAAAG,SAAD,CAAUC,GAAG,cAdC,C,4ECnBf,SAAS/B,IAAoB,2BAAZgC,EAAY,yBAAZA,EAAY,gBAMlC,OALWpC,EAAAA,EAAAA,IAAY,CAAC,EAAF,CACpBqC,KACAC,EAAAA,EAAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAFtC,OAGjBH,GAGN,C","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport pckg from '../package.json';\n\nconst App = (props) => {\n  const history = useHistory();\n  const chrome = useChrome();\n\n  useEffect(() => {\n    let unregister;\n    if (chrome) {\n      const registry = getRegistry();\n      registry.register({ notifications: notificationsReducer });\n      const { identifyApp, on: onChromeEvent } = chrome.init();\n\n      // You can use directly the name of your app\n      identifyApp(pckg.insights.appname);\n      unregister = onChromeEvent('APP_NAVIGATION', (event) =>\n        history.push(`/${event.navId}`)\n      );\n    }\n    return () => {\n      unregister();\n    };\n  }, [chrome]);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n  <Provider\n    store={init(\n      ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n    ).getStore()}\n  >\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App />\n    </Router>\n  </Provider>\n);\n\nexport default AppEntry;\n","import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst SamplePage = lazy(() =>\n  import(/* webpackChunkName: \"SamplePage\" */ './Routes/SamplePage/SamplePage')\n);\nconst OopsPage = lazy(() =>\n  import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage')\n);\nconst NoPermissionsPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"NoPermissionsPage\" */ './Routes/NoPermissionsPage/NoPermissionsPage'\n  )\n);\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route path=\"/sample\" component={SamplePage} />\n      <Route path=\"/oops\" component={OopsPage} />\n      <Route path=\"/no-permissions\" component={NoPermissionsPage} />\n      {/* Finally, catch all unmatched routes */}\n      <Route>\n        <Redirect to=\"/sample\" />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n"],"names":["props","history","useHistory","chrome","useChrome","useEffect","unregister","getRegistry","register","notifications","notificationsReducer","init","identifyApp","onChromeEvent","on","pckg","event","push","navId","Fragment","childProps","store","getStore","basename","getBaseName","window","location","pathname","SamplePage","lazy","OopsPage","NoPermissionsPage","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","component","Redirect","to","middleware","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"sourceRoot":""}