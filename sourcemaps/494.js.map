{"version":3,"file":"js/494.1669195023256.beb7e1efe35c353b7b3a.js","mappings":"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","sources":["webpack:///./src/Components/Common/WizardContext/initialState.js","webpack:///./src/Components/Common/WizardContext/index.js","webpack:///./src/Components/Common/Query/index.js","webpack:///./src/API/queryKeys.js","webpack:///./src/API/helpers.js","webpack:///./src/API/index.js","webpack:///./src/Components/SourcesSelect/index.js","webpack:///./src/Components/InstanceCounter/index.js","webpack:///./src/Components/InstanceTypesSelect/index.js","webpack:///./src/Components/RegionsSelect/index.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/aws.js","webpack:///./src/Components/DescriptionListAWS/index.js","webpack:///./src/Components/ExpandableAWS/index.js","webpack:///./src/Components/ProvisioningWizard/steps/ReviewDetails/index.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/PubkeySelect.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/NewKeyForm.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/index.js","webpack:///./src/Components/ProvisioningWizard/steps/FinishProgress/index.js","webpack:///./src/Components/ConfirmModal/index.js","webpack:///./src/Components/ProvisioningWizard/index.js","webpack:///./src/Components/ProvisioningWizard/steps/index.js"],"sourcesContent":["const initialWizardContext = {\n  chosenSource: undefined,\n  chosenNumOfInstances: 1,\n  chosenInstanceType: undefined,\n  uploadedKey: false,\n  chosenRegion: 'us-east-1',\n  sshPublicName: '',\n  sshPublicKey: '',\n  chosenSshKeyId: undefined,\n  chosenSshKeyName: null,\n};\n\nexport default initialWizardContext;\n","import { useState } from 'react';\nimport { createContainer } from 'react-tracked';\nimport initialWizardContext from './initialState';\n\nconst useSharedState = () => useState(initialWizardContext);\n\nexport const { Provider: WizardProvider, useTracked: useWizardContext } = createContainer(useSharedState);\n","/* eslint-disable react/prop-types */\n\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient();\n\nconst APIProvider = ({ children }) => <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n\nexport default APIProvider;\n","export const SOURCES_QUERY_KEY = 'sources';\nexport const PUBKEYS_QUERY_KEY = 'pubkeys';\nexport const instanceTypesQueryKeys = (region) => ['instanceTypes', region];\n","export const provisioningUrl = (path) => `/api/provisioning/v1/${path}`;\n","import axios from 'axios';\nimport { provisioningUrl } from './helpers';\n\nexport const fetchSourcesList = async () => {\n  const { data } = await axios.get(provisioningUrl('sources'));\n  return data;\n};\n\nexport const fetchPubkeysList = async () => {\n  const { data } = await axios.get(provisioningUrl('pubkeys'));\n  return data;\n};\n\nexport const fetchInstanceTypesList = async (region) => {\n  const { data } = await axios.get(provisioningUrl(`instance_types/aws?region=${region}`));\n  return data;\n};\n\nexport const createAWSReservation = async (params) => {\n  return axios.post(provisioningUrl('reservations/aws'), params);\n};\n\nexport const createNewPublicKey = async (params) => {\n  return axios.post(provisioningUrl('pubkeys'), params);\n};\n\nexport const fetchAWSReservation = async (id) => {\n  const { data } = await axios.get(provisioningUrl(`reservations/${id}`));\n  return data;\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst SourcesSelect = ({ setValidation }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState(null);\n  const selectObject = (id, name) => ({\n    id,\n    toString: () => name,\n    compareTo: (other) => other.id === id,\n  });\n  const {\n    error,\n    isLoading,\n    data: sources,\n  } = useQuery(SOURCES_QUERY_KEY, fetchSourcesList, {\n    onSuccess: (data) => {\n      const id = wizardContext.chosenSource;\n\n      if (!id) return;\n      setSelected(selectObject(id, data.find((source) => source.id === id).name));\n    },\n  });\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      setSelected(null);\n      setWizardContext((prevState) => ({ ...prevState, chosenSource: null }));\n      setValidation('error');\n    } else {\n      setSelected(selection);\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenSource: selection.id,\n      }));\n      setValidation('success');\n    }\n    setIsOpen(false);\n  };\n\n  const selectItemsMapper = (sourcesData) =>\n    sourcesData.map(({ name, id }) => <SelectOption aria-label=\"Source account\" key={id} value={selectObject(id, name)}></SelectOption>);\n\n  if (error) {\n    console.warn('Failed to fetch sources list');\n    return (\n      <>\n        <Alert ouiaId=\"select_account_alert\" variant=\"warning\" isInline title=\"There are problems fetching accounts\" />\n        <Select ouiaId=\"select_account_empty\" isDisabled placeholderText=\"No accounts found\" aria-label=\"Select account\" />\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading accounts\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_account\"\n      isOpen={isOpen}\n      onToggle={(openState) => setIsOpen(openState)}\n      selections={selected}\n      onSelect={onSelect}\n      placeholderText=\"Select account\"\n      aria-label=\"Select account\"\n    >\n      {selectItemsMapper(sources)}\n    </Select>\n  );\n};\n\nSourcesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n};\n\nexport default SourcesSelect;\n","import React from 'react';\nimport { NumberInput } from '@patternfly/react-core';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst MAX_INSTANCES = 45;\nconst MIN_INSTANCES = 1;\n\nconst InstanceCounter = () => {\n  const [{ chosenNumOfInstances }, setWizardContext] = useWizardContext();\n\n  const onMinus = () => {\n    const newValue = chosenNumOfInstances - 1;\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  const onChange = (event) => {\n    let input = Number(event.target.value);\n    if (input > MAX_INSTANCES) {\n      input = MAX_INSTANCES;\n    }\n    if (input < MIN_INSTANCES) {\n      input = MIN_INSTANCES;\n    }\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: input,\n    }));\n  };\n\n  const onPlus = () => {\n    const newValue = chosenNumOfInstances + 1;\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  return (\n    <NumberInput\n      max={MAX_INSTANCES}\n      min={MIN_INSTANCES}\n      value={chosenNumOfInstances}\n      onMinus={onMinus}\n      onChange={onChange}\n      onPlus={onPlus}\n      inputName=\"instances\"\n      inputAriaLabel=\"number of instances\"\n      minusBtnAriaLabel=\"instances-minus\"\n      plusBtnAriaLabel=\"instances-plus\"\n    />\n  );\n};\nexport default InstanceCounter;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Spinner, Select, SelectOption, TextInput } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { instanceTypesQueryKeys } from '../../API/queryKeys';\nimport { fetchInstanceTypesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst OPTIONS_PER_SCREEN = 5;\nconst sanitizeSearchValue = (str) => str.replace(/\\\\+$/, '');\n\nconst InstanceTypesSelect = ({ setValidation, architecture }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [numOptions, setNumOptions] = React.useState(OPTIONS_PER_SCREEN);\n  const [filteredTypes, setFilteredTypes] = React.useState(null);\n  const [prevSearch, setPrevSearch] = React.useState('');\n  const {\n    isLoading,\n    error,\n    data: instanceTypes,\n  } = useQuery(instanceTypesQueryKeys(wizardContext.chosenRegion), () => fetchInstanceTypesList(wizardContext.chosenRegion), {\n    select: (types) => types.filter((type) => type.architecture === architecture),\n  });\n\n  if (!wizardContext.chosenSource || wizardContext.chosenSource === '') {\n    return (\n      <>\n        <TextInput\n          ouiaId=\"instance_type_readonly\"\n          className=\"pf-c-form-control\"\n          readOnly\n          type=\"text\"\n          value=\"Select account to load instances\"\n          id=\"input-readonly\"\n          aria-label=\"Readonly input example\"\n        />\n      </>\n    );\n  }\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenInstanceType: selection,\n      }));\n      setValidation('success');\n      setIsOpen(false);\n    }\n  };\n\n  const clearSelection = () => {\n    setValidation('error');\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenInstanceType: null,\n    }));\n    setIsOpen(false);\n  };\n\n  const onFilter = (_e, inputValue) => {\n    const search = sanitizeSearchValue(inputValue);\n    if (prevSearch !== search) {\n      setNumOptions(OPTIONS_PER_SCREEN);\n      setPrevSearch(search);\n      setFilteredTypes(instanceTypes.filter((i) => i.name.search(search) === 0));\n    }\n  };\n\n  const selectItemsMapper = (types, limit) => {\n    if (limit < types.length) types = types.slice(0, limit);\n    return types.map((instanceType, index) => (\n      <SelectOption\n        aria-label={'Instance Type item'}\n        key={index}\n        description={`${instanceType.cores} cores |\n          ${instanceType.vcpus} vCPU |\n          ${(parseFloat(instanceType.memory_mib) / 1024).toFixed(1)} GiB memory |\n          ${instanceType.storage_gb > 0 ? instanceType.storage_gb + ' GB storage | ' : 'EBS only | '}\n          ${instanceType.architecture}`}\n        value={instanceType.name}\n      />\n    ));\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (error) {\n    console.warn('Failed to fetch instance types list');\n    return (\n      <>\n        <Alert ouiaId=\"instance_type_alert\" variant=\"warning\" isInline title=\"There are problems fetching instance types\" />\n        <Select ouiaId=\"instance_type_empty\" isDisabled placeholderText=\"No instance types found\" aria-label=\"Select instance type\" />\n      </>\n    );\n  }\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Contents of the small example\" />;\n  }\n\n  const types = filteredTypes || instanceTypes;\n\n  return (\n    <Select\n      ouiaId=\"select_instance_type\"\n      variant=\"typeahead\"\n      aria-label=\"Select instance type\"\n      placeholderText=\"Select instance type\"\n      maxHeight=\"450px\"\n      isOpen={isOpen}\n      selections={wizardContext.chosenInstanceType}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      onFilter={onFilter}\n      {...(numOptions < types.length && {\n        loadingVariant: {\n          text: `View more (${types.length - numOptions})`,\n          onClick: () => setNumOptions(numOptions + OPTIONS_PER_SCREEN),\n        },\n      })}\n    >\n      {selectItemsMapper(types, numOptions)}\n    </Select>\n  );\n};\n\nInstanceTypesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n};\n\nexport default InstanceTypesSelect;\n","import React from 'react';\nimport { FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { useWizardContext } from '../Common/WizardContext';\nexport const RegionsSelect = () => {\n  const [wizardContext] = useWizardContext();\n  return (\n    <FormSelect ouiaId=\"select_region\" isDisabled aria-label=\"Select region\" value=\"\">\n      <FormSelectOption label={wizardContext.chosenRegion} key=\"placeholder\" isPlaceholder value=\"\"></FormSelectOption>\n    </FormSelect>\n  );\n};\nexport default RegionsSelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Text, Button } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst AccountCustomizationsAWS = ({ setStepValidated, architecture }) => {\n  const [{ chosenSource, chosenInstanceType }] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: chosenSource ? 'success' : 'default',\n    types: chosenInstanceType ? 'success' : 'default',\n  });\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  return (\n    <Form>\n      <Title ouiaId=\"account_custom_title\" headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | AWS\n      </Title>\n      <Text ouiaId=\"account_custom_description\">\n        Configure instances that will run on your AWS. All the instances will launch with the same configuration.\n      </Text>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"aws-select-source\"\n      >\n        <SourcesSelect\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select region\"\n        isRequired\n        fieldId=\"aws-select-region\"\n        labelIcon={\n          <Popover headerContent=\"Select available geographical region\">\n            <Button\n              ouiaId=\"region_help\"\n              type=\"button\"\n              aria-label=\"More info for regions field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-region\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <RegionsSelect />\n      </FormGroup>\n      <FormGroup\n        label=\"Select instance type\"\n        isRequired\n        helperTextInvalid=\"Please pick a value\"\n        fieldId=\"aws-select-instance-types\"\n        labelIcon={\n          <Popover\n            headerContent=\"Select AWS instance type based on your computing,\n           memory, networking, or storage needs\"\n          >\n            <Button\n              ouiaId=\"instance_type_help\"\n              type=\"button\"\n              aria-label=\"More info for instance types field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-types\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          architecture={architecture}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"aws-select-instance-counter\"\n        labelIcon={\n          <Popover headerContent=\"Specify the number of AWS instances to be launched\">\n            <Button\n              ouiaId=\"instance_count_help\"\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceCounter />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsAWS.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n};\nexport default AccountCustomizationsAWS;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { DescriptionList, DescriptionListTerm, DescriptionListGroup, DescriptionListDescription } from '@patternfly/react-core';\n\nimport { useQuery } from 'react-query';\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst DescriptionListAWS = ({ imageName }) => {\n  const [wizardContext] = useWizardContext();\n  const { error, data: sources } = useQuery(SOURCES_QUERY_KEY, fetchSourcesList);\n\n  if (error) {\n    // TODO: error handling, notifications\n    console.log('Failed to fetch sources list');\n  }\n\n  const getChosenSourceName = () => sources?.find((source) => source.id === wizardContext.chosenSource).name;\n\n  return (\n    <DescriptionList isHorizontal>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Image</DescriptionListTerm>\n        <DescriptionListDescription>{imageName}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Account</DescriptionListTerm>\n        <DescriptionListDescription>{getChosenSourceName()}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Region</DescriptionListTerm>\n        <DescriptionListDescription>{wizardContext.chosenRegion}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Instance type</DescriptionListTerm>\n        <DescriptionListDescription>{wizardContext.chosenInstanceType}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Count</DescriptionListTerm>\n        <DescriptionListDescription>{wizardContext.chosenNumOfInstances}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>{wizardContext.uploadedKey ? 'New SSH key' : 'Existing SSH key'}</DescriptionListTerm>\n        <DescriptionListDescription>\n          {wizardContext.uploadedKey ? wizardContext.sshPublicName : wizardContext.chosenSshKeyName}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n    </DescriptionList>\n  );\n};\n\nDescriptionListAWS.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default DescriptionListAWS;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ExpandableSection } from '@patternfly/react-core';\nimport DescriptionListAWS from '../DescriptionListAWS';\nexport const ExpandableAWS = ({ imageName }) => {\n  const [isExpanded, setIsExpanded] = React.useState(true);\n  const onToggle = (isExpanded) => {\n    setIsExpanded(isExpanded);\n  };\n  return (\n    <ExpandableSection toggleText={'AWS'} onToggle={onToggle} isExpanded={isExpanded} isIndented>\n      <DescriptionListAWS imageName={imageName} />\n    </ExpandableSection>\n  );\n};\n\nExpandableAWS.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title, Text } from '@patternfly/react-core';\nimport { ExpandableAWS } from '../../../ExpandableAWS';\n\nconst ReviewDetails = ({ imageName }) => {\n  return (\n    <div className=\"pf-c-form\">\n      <Title ouiaId=\"review_details_title\" headingLevel=\"h1\">\n        Review details\n      </Title>\n      <Text ouiaId=\"review_details_description\">\n        Review the information below and then click <b>Launch</b> to finish the process.\n      </Text>\n\n      <ExpandableAWS imageName={imageName} />\n    </div>\n  );\n};\n\nReviewDetails.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default ReviewDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst selectOptionObj = (id, name) => ({\n  id: id,\n  toString: () => name,\n  compareTo: (other) => other.id == id,\n});\n\nconst PubkeySelect = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selection, setSelection] = React.useState(\n    wizardContext.chosenSshKeyId ? selectOptionObj(wizardContext.chosenSshKeyId, wizardContext.chosenSshKeyName) : null\n  );\n\n  React.useEffect(() => {\n    setStepValidated(!!selection);\n  }, [selection]);\n\n  const { isLoading, isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n\n  const onSelect = (event, value) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenSshKeyId: value.id,\n      chosenSshKeyName: value.toString(),\n    }));\n    setSelection(value);\n    setIsOpen(false);\n  };\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading saved SSH keys\" />;\n  }\n\n  if (isError || (pubkeys && pubkeys.length < 1)) {\n    return (\n      <>\n        {isError && <Alert ouiaId=\"pubkey_alert\" variant=\"warning\" isInline title=\"There are problems fetching saved SSH keys\" />}\n        <Select ouiaId=\"pubkey_empty\" isDisabled placeholderText=\"No SSH key found\" aria-label=\"Select public key\" />\n      </>\n    );\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_pubkey\"\n      onToggle={(isExpanded) => setIsOpen(isExpanded)}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      selections={selection}\n      placeholderText=\"Select public key...\"\n      aria-label=\"Select public key\"\n    >\n      {pubkeys.map(({ id, name }) => (\n        <SelectOption aria-label={`Public key ${name}`} key={id} value={selectOptionObj(id, name)} />\n      ))}\n    </Select>\n  );\n};\n\nPubkeySelect.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PubkeySelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormGroup, TextInput, FileUpload } from '@patternfly/react-core';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\n// This is a simple regex format for public ssh key\nconst PUBLIC_KEY_FORMAT = '^(ssh|ecdsa)';\n\nconst NewSSHKeyForm = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isLoading, setIsLoading] = React.useState();\n  const [validations, setValidation] = React.useState({\n    sshKeyBody: 'default',\n    sshKeyName: 'default',\n  });\n  const [keyName, setName] = React.useState(wizardContext.sshPublicName);\n  const [publicKey, setPublicKey] = React.useState(wizardContext.sshPublicKey);\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  const updateValidation = (inputKey, value) =>\n    setValidation((prevValidations) => ({\n      ...prevValidations,\n      [inputKey]: value,\n    }));\n\n  const handleNameChange = (value) => {\n    setWizardContext((prevState) => ({ ...prevState, sshPublicName: value }));\n    setName(value);\n  };\n  const handleNameBlur = () => {\n    if (keyName.length === 0) {\n      updateValidation('sshKeyName', 'error');\n      return;\n    }\n    updateValidation('sshKeyName', 'success');\n  };\n  const handleSSHKeyChange = (value) => {\n    if (validatePublicKey(value)) {\n      setWizardContext((prevState) => ({\n        ...prevState,\n        sshPublicKey: value,\n      }));\n      setPublicKey(value);\n      updateValidation('sshKeyBody', 'success');\n    } else {\n      updateValidation('sshKeyBody', 'error');\n    }\n  };\n  const handleSSHKeyText = (text) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicKey: text,\n    }));\n    setPublicKey(text);\n  };\n  const handleSSHKeyTextBlur = () => {\n    if (publicKey === '') {\n      updateValidation('sshKeyBody', 'default');\n    } else {\n      updateValidation('sshKeyBody', validatePublicKey(publicKey) ? 'success' : 'error');\n    }\n  };\n\n  const handleClear = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: undefined,\n      sshPublicKey: undefined,\n    }));\n    setPublicKey('');\n    updateValidation('sshKeyBody', 'default');\n  };\n\n  const handleFileReadStarted = () => {\n    setIsLoading(true);\n  };\n\n  const handleFileReadFinished = () => {\n    setIsLoading(false);\n  };\n  const handleFileReadFailed = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: '<Failed to load the file>',\n    }));\n    updateValidation('sshKeyBody', 'error');\n  };\n\n  const validatePublicKey = (ssh) => {\n    const regex = new RegExp(PUBLIC_KEY_FORMAT);\n    return regex.test(ssh);\n  };\n  return (\n    <FormGroup isStack>\n      <FormGroup validated={validations.sshKeyName} helperTextInvalid=\"Name is required\" label=\"Name\" isRequired fieldId=\"ssh-name\">\n        <TextInput\n          ouiaId=\"new_pubkey_name\"\n          validated={validations.sshKeyName}\n          value={keyName}\n          id=\"public-key-name\"\n          onChange={handleNameChange}\n          onBlur={handleNameBlur}\n          type=\"text\"\n        />\n      </FormGroup>\n      <FormGroup\n        helperTextInvalid=\"Must be SSH public key format\"\n        label=\"SSH public key\"\n        isRequired\n        fieldId=\"ssh-file\"\n        validated={validations.sshKeyBody}\n      >\n        <FileUpload\n          // ouia not supported yet?\n          ouiaId=\"new_pubkey_file\"\n          id=\"public-key-value\"\n          onDataChange={handleSSHKeyChange}\n          allowEditingUploadedText\n          onTextChange={handleSSHKeyText}\n          onTextAreaBlur={handleSSHKeyTextBlur}\n          type=\"text\"\n          value={publicKey}\n          validated={validations.sshKeyBody}\n          onReadStarted={handleFileReadStarted}\n          onReadFinished={handleFileReadFinished}\n          onReadFailed={handleFileReadFailed}\n          onClearClick={handleClear}\n          isLoading={isLoading}\n          filenamePlaceholder=\"Drag a file here\"\n        />\n      </FormGroup>\n    </FormGroup>\n  );\n};\n\nNewSSHKeyForm.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\nexport default NewSSHKeyForm;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Radio, Text, Title } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport PubkeySelect from './PubkeySelect';\nimport NewSSHKeyForm from './NewKeyForm';\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\n\nconst EXIST_KEY_OPTION = 'existKey';\nconst NEW_KEY_OPTION = 'newKey';\n\nconst PublicKeys = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const { isLoading, isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n  const [isSelectDisabled, disableSelect] = React.useState(false);\n\n  const switchTo = (optionKey) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      uploadedKey: NEW_KEY_OPTION === optionKey,\n    }));\n  };\n\n  const onOptionChange = (_, event) => {\n    switchTo(event.currentTarget.value);\n  };\n\n  React.useEffect(() => {\n    if (!isLoading && (isError || (pubkeys && pubkeys.length < 1))) {\n      disableSelect(true);\n      switchTo(NEW_KEY_OPTION);\n    }\n  }, [isLoading]);\n\n  return (\n    <Form className=\"pubkeys\">\n      <Title ouiaId=\"pubkey_title\" headingLevel=\"h1\">\n        SSH keys authentication\n      </Title>\n      <Text ouiaId=\"pubkey_description\">Establish secure, reliable communication and strong encryption to protect data.</Text>\n      <FormGroup role=\"radiogroup\" isStack isRequired label=\"Select a method to add SSH pubic key\">\n        <Radio\n          id=\"existing-pubkey-radio\"\n          ouiaId=\"pubkey_radio\"\n          isChecked={!wizardContext.uploadedKey}\n          isDisabled={isSelectDisabled}\n          name=\"ssh-keys-radio\"\n          value={EXIST_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Select existing SSH public key\"\n          data-testid=\"existing-pubkey-radio\"\n          body={\n            (!wizardContext.uploadedKey || isSelectDisabled) && (\n              <FormGroup label=\"Select public key\">\n                <PubkeySelect setStepValidated={setStepValidated} />\n              </FormGroup>\n            )\n          }\n        />\n        <Radio\n          id=\"upload-pubkey-radio\"\n          ouiaId=\"new_pubkey_radio\"\n          isChecked={wizardContext.uploadedKey}\n          name=\"ssh-keys-radio\"\n          value={NEW_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Add and save a new SSH public key\"\n          description=\"Newly added key will be automatically saved. Result of the provisioning will not be affected this process.\"\n          data-testid=\"upload-pubkey-radio\"\n          body={wizardContext.uploadedKey && <NewSSHKeyForm setStepValidated={setStepValidated} />}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nPublicKeys.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PublicKeys;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Title,\n  Progress,\n  Button,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { CogsIcon, CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport { useMutation, useQuery } from 'react-query';\nimport { createAWSReservation, createNewPublicKey, fetchAWSReservation } from '../../../../API';\nimport './styles.scss';\n\nconst pf_success_color_100 = '#3E8635';\nconst pf_danger_color_100 = '#C9190B';\nconst RESERVATION_POLLING_INTERVAL = 500;\n\nconst steps = [\n  { description: 'Uploading SSH public key', progress: 0 },\n  { description: 'Creating AWS reservation', progress: 20 },\n  {\n    description: 'Waiting for AWS',\n    progress: 40,\n  },\n  { description: 'Launch is completed', progress: 100 },\n];\n\nconst FinishStep = ({ onClose, imageID }) => {\n  const [{ chosenSource, chosenInstanceType, chosenNumOfInstances, chosenRegion, sshPublicName, sshPublicKey, chosenSshKeyId, uploadedKey }] =\n    useWizardContext();\n  const [reservationID, setReservationID] = React.useState();\n  const [activeStep, setActiveStep] = React.useState(uploadedKey ? 0 : 1);\n  const stepUp = () => setActiveStep((prevStep) => (prevStep < steps.length - 1 ? prevStep + 1 : prevStep));\n\n  const { data: polledReservation } = useQuery(['reservation', reservationID], () => fetchAWSReservation(reservationID), {\n    enabled: !!reservationID,\n    refetchInterval: RESERVATION_POLLING_INTERVAL,\n    refetchIntervalInBackground: true,\n  });\n\n  const { mutate: createAWSDeployment, error: awsReservationError } = useMutation(createAWSReservation, {\n    onSuccess: (data) => {\n      stepUp();\n      setReservationID(data?.data?.reservation_id);\n    },\n  });\n\n  const { mutate: createPublicKey, error: pubkeyError } = useMutation(createNewPublicKey, {\n    onSuccess: (resp) => {\n      createAWSDeployment({\n        source_id: chosenSource,\n        instance_type: chosenInstanceType,\n        amount: chosenNumOfInstances,\n        image_id: imageID,\n        region: chosenRegion,\n        pubkey_id: resp?.data?.id,\n      });\n      stepUp();\n    },\n  });\n\n  React.useEffect(() => {\n    if (polledReservation?.success) {\n      stepUp();\n      setReservationID(undefined);\n    }\n  }, [polledReservation?.success]);\n\n  React.useEffect(() => {\n    if (uploadedKey) {\n      createPublicKey({ name: sshPublicName, body: sshPublicKey });\n    } else {\n      createAWSDeployment({\n        source_id: chosenSource,\n        instance_type: chosenInstanceType,\n        amount: chosenNumOfInstances,\n        image_id: imageID,\n        region: chosenRegion,\n        pubkey_id: chosenSshKeyId,\n      });\n    }\n  }, []);\n\n  const activeProgress = steps[activeStep].progress;\n  const activeDescription = steps[activeStep].description;\n  const isJobError = polledReservation?.success === false;\n  const isError = !!awsReservationError || !!pubkeyError || isJobError;\n\n  let title;\n  let iconProps;\n  if (isError) {\n    title = 'Launching system(s): Failure';\n    iconProps = { color: pf_danger_color_100, icon: ExclamationCircleIcon };\n  } else if (activeProgress === 100) {\n    title = 'Launching system(s): Success';\n    iconProps = { color: pf_success_color_100, icon: CheckCircleIcon };\n  } else {\n    title = 'Launching your system(s)';\n    iconProps = { icon: CogsIcon };\n  }\n\n  return (\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <EmptyState variant=\"large\">\n          <EmptyStateIcon {...iconProps} />\n          <Title headingLevel=\"h4\" size=\"lg\" ouiaId=\"launch-status\">\n            {title}\n          </Title>\n          <EmptyStateBody>\n            <Progress\n              style={{ width: '500px' }}\n              variant={isError && 'danger'}\n              value={activeProgress}\n              measureLocation=\"outside\"\n              id=\"launch-progress\"\n            />\n          </EmptyStateBody>\n          <EmptyStateBody>\n            <span>\n              {isError ? `An error has occurred while ${activeDescription[0].toLowerCase() + activeDescription.substring(1)}` : activeDescription}\n              .\n              <br />\n              {polledReservation?.status}\n              <span className=\"status-error\">\n                {awsReservationError?.response?.data?.msg}\n                {pubkeyError?.response?.data?.msg}\n                {polledReservation?.error}\n              </span>\n            </span>\n          </EmptyStateBody>\n          {isError && (\n            <Button onClick={() => goToStepById(1)} variant=\"primary\">\n              Edit\n            </Button>\n          )}\n          <EmptyStateSecondaryActions>\n            <Button variant=\"link\" isDisabled={!isError && activeStep < 2} onClick={onClose}>\n              Close\n            </Button>\n          </EmptyStateSecondaryActions>\n        </EmptyState>\n      )}\n    </WizardContextConsumer>\n  );\n};\n\nFinishStep.propTypes = {\n  imageID: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default FinishStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nconst ConfirmModal = ({ isOpen, onConfirm, onCancel }) => (\n  <Modal\n    ouiaId=\"app-confirm-modal\"\n    id=\"app-confirm-modal\"\n    aria-label=\"confirm cancel of launch modal\"\n    variant={ModalVariant.small}\n    title=\"Exit instance launching?\"\n    isOpen={isOpen}\n    onClose={onCancel}\n    actions={[\n      <Button key=\"exit\" variant=\"primary\" onClick={onConfirm} ouiaId=\"btn-exit-confirm\">\n        Exit\n      </Button>,\n      <Button key=\"stay\" variant=\"link\" onClick={onCancel}>\n        Stay\n      </Button>,\n    ]}\n    titleIconVariant=\"warning\"\n  >\n    All inputs will be discarded.\n  </Modal>\n);\n\nConfirmModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default ConfirmModal;\n","import PropTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { WizardProvider } from '../Common/WizardContext';\nimport APIProvider from '../Common/Query';\nimport defaultSteps from './steps';\nimport ConfirmModal from '../ConfirmModal';\nimport './steps/Pubkeys/pubkeys.scss';\n\nconst DEFAULT_STEP_VALIDATION = {\n  sshStep: false,\n  awsStep: false,\n};\n\nconst ProvisioningWizard = ({ isOpen, onClose, image, ...props }) => {\n  const [stepIdReached, setStepIdReached] = React.useState(1);\n  const [stepValidation, setStepValidation] = React.useState(DEFAULT_STEP_VALIDATION);\n  const [isConfirming, setConfirming] = React.useState(false);\n\n  const onCustomClose = () => {\n    setConfirming(false);\n    setStepIdReached(1);\n    setStepValidation(DEFAULT_STEP_VALIDATION);\n    onClose();\n  };\n\n  const onWizardClose = () => {\n    if (stepIdReached >= 5) {\n      setConfirming(true);\n    } else {\n      onCustomClose();\n    }\n  };\n\n  const steps = defaultSteps({\n    stepIdReached,\n    image,\n    stepValidation,\n    setStepValidation,\n    onClose: onCustomClose,\n  });\n\n  const onNext = ({ id, name }, { prevId, prevName }) => {\n    console.debug(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\n    setStepIdReached((prevID) => (prevID < id ? id : prevID));\n  };\n\n  return isOpen ? (\n    <WizardProvider>\n      <APIProvider>\n        <Wizard\n          {...props}\n          title=\"Launch\"\n          description={`Launch image ${image.name}`}\n          steps={steps}\n          isOpen\n          onClose={onWizardClose}\n          onNext={onNext}\n          className={'provisioning'}\n        />\n        <ConfirmModal isOpen={isConfirming} onConfirm={onCustomClose} onCancel={() => setConfirming(false)} />\n      </APIProvider>\n    </WizardProvider>\n  ) : null;\n};\n\nProvisioningWizard.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func,\n  image: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    architecture: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ProvisioningWizard;\n","import React from 'react';\nimport AccountCustomizationsAWS from '../steps/AccountCustomizations/aws';\nimport ReviewDetails from './ReviewDetails';\nimport PublicKeys from './Pubkeys';\nimport FinishStep from './FinishProgress';\n\nconst defaultSteps = ({ stepIdReached, image: { name, id, architecture }, stepValidation, setStepValidation, onClose }) => [\n  {\n    name: 'Account and customization',\n    steps: [\n      {\n        name: 'AWS',\n        id: 1,\n        enableNext: stepValidation.awsStep,\n        component: (\n          <AccountCustomizationsAWS\n            architecture={architecture || 'x86_64'}\n            setStepValidated={(validated) => setStepValidation((prev) => ({ ...prev, awsStep: validated }))}\n          />\n        ),\n        canJumpTo: stepIdReached >= 1,\n      },\n    ],\n  },\n  {\n    name: 'SSH key authentication',\n    id: 4,\n    component: <PublicKeys setStepValidated={(validated) => setStepValidation((prev) => ({ ...prev, sshStep: validated }))} />,\n    canJumpTo: stepIdReached >= 4,\n    enableNext: stepValidation.sshStep,\n  },\n  {\n    name: 'Review details',\n    id: 5,\n    component: <ReviewDetails imageName={name} />,\n    canJumpTo: stepIdReached >= 5,\n    nextButtonText: 'Launch',\n  },\n  {\n    name: 'Finish Progress',\n    id: 6,\n    component: <FinishStep onClose={onClose} imageID={id} />,\n    isFinishedStep: true,\n  },\n];\n\nexport default defaultSteps;\n"],"names":["chosenSource","undefined","chosenNumOfInstances","chosenInstanceType","uploadedKey","chosenRegion","sshPublicName","sshPublicKey","chosenSshKeyId","chosenSshKeyName","createContainer","useState","initialWizardContext","WizardProvider","Provider","useWizardContext","useTracked","queryClient","QueryClient","children","QueryClientProvider","client","SOURCES_QUERY_KEY","PUBKEYS_QUERY_KEY","provisioningUrl","path","fetchSourcesList","axios","data","fetchPubkeysList","fetchInstanceTypesList","region","createAWSReservation","params","createNewPublicKey","fetchAWSReservation","id","SourcesSelect","setValidation","wizardContext","setWizardContext","React","isOpen","setIsOpen","selected","setSelected","selectObject","name","toString","compareTo","other","useQuery","onSuccess","find","source","error","isLoading","sources","console","warn","Alert","ouiaId","variant","isInline","title","Select","isDisabled","placeholderText","Spinner","isSVG","size","onToggle","openState","selections","onSelect","event","selection","isPlaceholder","prevState","map","SelectOption","key","value","propTypes","PropTypes","NumberInput","max","min","onMinus","newValue","onChange","input","Number","target","onPlus","inputName","inputAriaLabel","minusBtnAriaLabel","plusBtnAriaLabel","InstanceTypesSelect","architecture","numOptions","setNumOptions","filteredTypes","setFilteredTypes","prevSearch","setPrevSearch","select","types","filter","type","instanceTypes","TextInput","className","readOnly","maxHeight","onFilter","_e","inputValue","search","replace","i","length","loadingVariant","text","onClick","limit","slice","instanceType","index","description","cores","vcpus","parseFloat","memory_mib","toFixed","storage_gb","selectItemsMapper","FormSelect","FormSelectOption","label","AccountCustomizationsAWS","setStepValidated","validations","errorExists","Object","values","some","valid","Form","Title","headingLevel","Text","FormGroup","validated","helperTextInvalid","isRequired","fieldId","validation","prevValidations","labelIcon","Popover","headerContent","Button","e","preventDefault","noVerticalAlign","DescriptionListAWS","imageName","log","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","ExpandableAWS","isExpanded","setIsExpanded","ExpandableSection","toggleText","isIndented","ReviewDetails","selectOptionObj","PubkeySelect","setSelection","isError","pubkeys","NewSSHKeyForm","setIsLoading","sshKeyBody","sshKeyName","keyName","setName","publicKey","setPublicKey","updateValidation","inputKey","validatePublicKey","ssh","RegExp","test","isStack","onBlur","FileUpload","onDataChange","allowEditingUploadedText","onTextChange","onTextAreaBlur","onReadStarted","onReadFinished","onReadFailed","onClearClick","filenamePlaceholder","NEW_KEY_OPTION","PublicKeys","isSelectDisabled","disableSelect","switchTo","optionKey","onOptionChange","_","currentTarget","role","Radio","isChecked","body","steps","progress","FinishStep","onClose","imageID","reservationID","setReservationID","activeStep","setActiveStep","stepUp","prevStep","polledReservation","enabled","refetchInterval","refetchIntervalInBackground","useMutation","reservation_id","createAWSDeployment","mutate","awsReservationError","resp","source_id","instance_type","amount","image_id","pubkey_id","createPublicKey","pubkeyError","success","iconProps","activeProgress","activeDescription","isJobError","color","icon","ExclamationCircleIcon","CheckCircleIcon","CogsIcon","WizardContextConsumer","goToStepById","EmptyState","EmptyStateIcon","EmptyStateBody","Progress","style","width","measureLocation","toLowerCase","substring","status","response","msg","EmptyStateSecondaryActions","ConfirmModal","onConfirm","onCancel","Modal","ModalVariant","actions","titleIconVariant","DEFAULT_STEP_VALIDATION","sshStep","awsStep","ProvisioningWizard","image","props","stepIdReached","setStepIdReached","stepValidation","setStepValidation","isConfirming","setConfirming","onCustomClose","enableNext","component","prev","canJumpTo","nextButtonText","isFinishedStep","defaultSteps","Wizard","onNext","prevId","prevName","debug","prevID"],"sourceRoot":""}