{"version":3,"file":"js/615.7c542c322bab5ff26f7b.js","mappings":"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","sources":["webpack:///./src/Components/Common/constants.js","webpack:///./src/Components/Common/WizardContext/initialState.js","webpack:///./src/Components/Common/WizardContext/index.js","webpack:///./src/Components/Common/Query/index.js","webpack:///./src/Components/ConfirmModal/index.js","webpack:///./src/Components/Common/helpers.js","webpack:///./src/API/queryKeys.js","webpack:///./src/API/helpers.js","webpack:///./src/API/index.js","webpack:///./src/Components/SourcesSelect/index.js","webpack:///./src/Components/InstanceCounter/index.js","webpack:///./src/Components/InstanceCounter/constants.js","webpack:///./src/Components/InstanceTypesSelect/index.js","webpack:///./src/Components/RegionsSelect/index.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/aws.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/gcp.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/index.js","webpack:///./src/Components/ProvisioningWizard/steps/ReservationProgress/constants.js","webpack:///./src/Components/ProvisioningWizard/steps/ReservationProgress/helpers.js","webpack:///./src/Components/LaunchDescriptionList/index.js","webpack:///./src/Components/ProvisioningWizard/steps/ReviewDetails/index.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/PubkeySelect.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/NewKeyForm.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/index.js","webpack:///./src/Components/Common/InstanceLink.js","webpack:///./src/Components/ProvisioningWizard/steps/ReservationProgress/ExpansionInfo.js","webpack:///./src/Components/Common/Hooks/useInterval.js","webpack:///./src/Components/ProvisioningWizard/steps/ReservationProgress/index.js","webpack:///./src/Components/ProvisioningWizard/steps/index.js","webpack:///./src/Components/ProvisioningWizard/CustomFooter.js","webpack:///./src/Components/ProvisioningWizard/index.js"],"sourcesContent":["export const AWS_PROVIDER = 'aws';\nexport const GCP_PROVIDER = 'gcp';\n","const initialWizardContext = {\n  chosenSource: undefined,\n  chosenNumOfInstances: 1,\n  chosenInstanceType: undefined,\n  uploadedKey: false,\n  chosenRegion: undefined,\n  chosenImageID: undefined,\n  sshPublicName: '',\n  sshPublicKey: '',\n  chosenSshKeyId: undefined,\n  chosenSshKeyName: null,\n  provider: undefined,\n};\n\nexport default initialWizardContext;\n","import { useState } from 'react';\nimport { createContainer } from 'react-tracked';\nimport initialWizardContext from './initialState';\n\nconst useSharedState = () => useState(initialWizardContext);\n\nexport const { Provider: WizardProvider, useTracked: useWizardContext } = createContainer(useSharedState);\n","/* eslint-disable react/prop-types */\n\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient();\n\nconst APIProvider = ({ children }) => <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n\nexport default APIProvider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nconst ConfirmModal = ({ isOpen, onConfirm, onCancel }) => (\n  <Modal\n    ouiaId=\"app-confirm-modal\"\n    id=\"app-confirm-modal\"\n    aria-label=\"confirm cancel of launch modal\"\n    variant={ModalVariant.small}\n    title=\"Exit instance launching?\"\n    isOpen={isOpen}\n    onClose={onCancel}\n    actions={[\n      <Button key=\"exit\" variant=\"primary\" onClick={onConfirm} ouiaId=\"btn-exit-confirm\">\n        Exit\n      </Button>,\n      <Button key=\"stay\" variant=\"link\" onClick={onCancel}>\n        Stay\n      </Button>,\n    ]}\n    titleIconVariant=\"warning\"\n  >\n    All inputs will be discarded.\n  </Modal>\n);\n\nConfirmModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default ConfirmModal;\n","import { AWS_PROVIDER, GCP_PROVIDER } from './constants';\n\nexport const defaultRegionByProvider = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return 'us-east-1';\n    case GCP_PROVIDER:\n      return 'us-central1-a';\n    default:\n      throw new Error(`Unrecognized provider was entered: ${provider}`);\n  }\n};\n\nexport const humanizeProvider = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return 'Amazon cloud';\n    case GCP_PROVIDER:\n      return 'Google cloud';\n    default:\n      return '';\n  }\n};\n","export const SOURCES_QUERY_KEY = 'sources';\nexport const PUBKEYS_QUERY_KEY = 'pubkeys';\nexport const instanceTypesQueryKeys = (region) => ['instanceTypes', region];\nexport const IMAGE_REGIONS_KEY = 'image_region';\n","export const provisioningUrl = (path) => `/api/provisioning/v1/${path}`;\nexport const imageBuilderURL = (path) => `/api/image-builder/v1/${path}`;\n","import axios from 'axios';\nimport { imageBuilderURL, provisioningUrl } from './helpers';\n\nexport const fetchSourcesList = async (provider) => {\n  const { data } = await axios.get(provisioningUrl(`sources?provider=${provider}`));\n  return data;\n};\n\nexport const fetchPubkeysList = async () => {\n  const { data } = await axios.get(provisioningUrl('pubkeys'));\n  return data;\n};\n\nexport const fetchInstanceTypesList = async (region, provider) => {\n  const { data } = await axios.get(provisioningUrl(`instance_types/${provider}?region=${region}`));\n  return data;\n};\n\nexport const createReservation = (provider) => async (params) => {\n  return axios.post(provisioningUrl(`reservations/${provider}`), params);\n};\n\nexport const createNewPublicKey = async (params) => {\n  return axios.post(provisioningUrl('pubkeys'), params);\n};\n\nexport const fetchReservation = async (id) => {\n  const { data } = await axios.get(provisioningUrl(`reservations/${id}`));\n  return data;\n};\n\nexport const fetchImageClones = async (composeID) => {\n  const { data } = await axios.get(imageBuilderURL(`composes/${composeID}/clones`));\n  return data;\n};\n\nexport const fetchImageCloneStatus = async (cloneID) => {\n  const { data } = await axios.get(imageBuilderURL(`clones/${cloneID}`));\n  return data;\n};\n\nexport const fetchReservationByProvider = async (reservationID, provider) => {\n  const { data } = await axios.get(provisioningUrl(`reservations/${provider}/${reservationID}`));\n  return data;\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst SourcesSelect = ({ setValidation }) => {\n  const [{ provider, chosenSource }, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState(null);\n  const selectObject = (id, name) => ({\n    id,\n    toString: () => name,\n    compareTo: (other) => other.id === id,\n  });\n  const {\n    error,\n    isLoading,\n    data: sources,\n  } = useQuery([SOURCES_QUERY_KEY, provider], () => fetchSourcesList(provider), {\n    enabled: !!provider,\n    onSuccess: (data) => {\n      const id = chosenSource;\n\n      if (!id) return;\n      setSelected(selectObject(id, data.find((source) => source.id === id).name));\n    },\n  });\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      setSelected(null);\n      setWizardContext((prevState) => ({ ...prevState, chosenSource: null }));\n      setValidation('error');\n    } else {\n      setSelected(selection);\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenSource: selection.id,\n      }));\n      setValidation('success');\n    }\n    setIsOpen(false);\n  };\n\n  const selectItemsMapper = () =>\n    sources.map(({ name, id }) => <SelectOption aria-label=\"Source account\" key={id} value={selectObject(id, name)}></SelectOption>);\n\n  if (error) {\n    console.warn('Failed to fetch sources list');\n    return (\n      <>\n        <Alert ouiaId=\"select_account_alert\" variant=\"warning\" isInline title=\"There are problems fetching accounts\" />\n        <Select ouiaId=\"select_account_empty\" isDisabled placeholderText=\"No accounts found\" aria-label=\"Select account\" />\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading accounts\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_account\"\n      isOpen={isOpen}\n      onToggle={(openState) => setIsOpen(openState)}\n      selections={selected}\n      onSelect={onSelect}\n      placeholderText=\"Select account\"\n      aria-label=\"Select account\"\n    >\n      {sources && selectItemsMapper()}\n    </Select>\n  );\n};\n\nSourcesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n};\n\nexport default SourcesSelect;\n","import React from 'react';\nimport { NumberInput } from '@patternfly/react-core';\nimport { useWizardContext } from '../Common/WizardContext';\nimport { MAX_INSTANCES, MIN_INSTANCES } from './constants';\n\nconst InstanceCounter = () => {\n  const [{ chosenNumOfInstances }, setWizardContext] = useWizardContext();\n\n  const onMinus = () => {\n    const newValue = chosenNumOfInstances - 1;\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  const onChange = (event) => {\n    let input = Math.floor(Number(event.target.value));\n    if (input > MAX_INSTANCES) {\n      input = MAX_INSTANCES;\n    }\n    if (input < MIN_INSTANCES) {\n      input = MIN_INSTANCES;\n    }\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: input,\n    }));\n  };\n\n  const onPlus = () => {\n    const newValue = chosenNumOfInstances + 1;\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  return (\n    <NumberInput\n      max={MAX_INSTANCES}\n      min={MIN_INSTANCES}\n      value={chosenNumOfInstances}\n      onMinus={onMinus}\n      onChange={onChange}\n      onPlus={onPlus}\n      inputName=\"instances\"\n      inputAriaLabel=\"number of instances\"\n      minusBtnAriaLabel=\"instances-minus\"\n      plusBtnAriaLabel=\"instances-plus\"\n    />\n  );\n};\nexport default InstanceCounter;\n","export const MAX_INSTANCES = 45;\nexport const MIN_INSTANCES = 1;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Spinner, Select, SelectOption, TextInput } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { fetchInstanceTypesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst OPTIONS_PER_SCREEN = 5;\nconst sanitizeSearchValue = (str) => str.replace(/\\\\+$/, '');\n\nconst InstanceTypesSelect = ({ setValidation, architecture }) => {\n  const [{ chosenInstanceType, chosenRegion, chosenSource, provider }, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [numOptions, setNumOptions] = React.useState(OPTIONS_PER_SCREEN);\n  const [filteredTypes, setFilteredTypes] = React.useState(null);\n  const [prevSearch, setPrevSearch] = React.useState('');\n  const [isTypeSupported, setTypeSupported] = React.useState(true);\n  const {\n    isLoading,\n    error,\n    data: instanceTypes,\n  } = useQuery(['instanceTypes', chosenRegion], () => fetchInstanceTypesList(chosenRegion, provider), {\n    select: (types) => types.filter((type) => type.architecture === architecture),\n    enabled: !!chosenRegion && !!chosenSource,\n  });\n\n  if (!chosenSource || chosenSource === '') {\n    return (\n      <>\n        <TextInput\n          ouiaId=\"instance_type_readonly\"\n          className=\"pf-c-form-control\"\n          readOnly\n          type=\"text\"\n          value=\"Select account to load instances\"\n          id=\"input-readonly\"\n          aria-label=\"Select instance type - disabled\"\n        />\n      </>\n    );\n  }\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      const chosenInstanceType = instanceTypes.find((instanceType) => selection === instanceType.name);\n      setTypeSupported(chosenInstanceType.supported);\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenInstanceType: selection,\n      }));\n      setValidation('success');\n      setIsOpen(false);\n    }\n  };\n\n  const clearSelection = () => {\n    setValidation('error');\n    setTypeSupported(true);\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenInstanceType: null,\n    }));\n    setIsOpen(false);\n  };\n\n  const onFilter = (_e, inputValue) => {\n    const search = sanitizeSearchValue(inputValue);\n    if (prevSearch !== search) {\n      setNumOptions(OPTIONS_PER_SCREEN);\n      setPrevSearch(search);\n      setFilteredTypes(instanceTypes.filter((i) => i.name.includes(search)));\n    }\n  };\n\n  const selectItemsMapper = (types, limit) => {\n    if (limit < types?.length) types = types.slice(0, limit);\n    return types?.map((instanceType, index) => (\n      <SelectOption\n        aria-label={`Instance Type ${instanceType.name}`}\n        key={index}\n        description={`${instanceType.cores || 'only vCPU'} cores |\n          ${instanceType.vcpus} vCPU |\n          ${(parseFloat(instanceType.memory_mib) / 1024).toFixed(1)} GiB memory |\n          ${instanceType.storage_gb > 0 ? instanceType.storage_gb + ' GB storage | ' : 'EBS only | '}\n          ${instanceType.architecture}`}\n        value={instanceType.name}\n      />\n    ));\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (error) {\n    console.warn('Failed to fetch instance types list');\n    return (\n      <>\n        <Alert ouiaId=\"instance_type_alert\" variant=\"warning\" isInline title=\"There are problems fetching instance types\" />\n        <Select ouiaId=\"instance_type_empty\" isDisabled placeholderText=\"No instance types found\" toggleAriaLabel=\"Select instance type\" />\n      </>\n    );\n  }\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Contents of the small example\" />;\n  }\n\n  const types = filteredTypes || instanceTypes;\n\n  return (\n    <>\n      {!isTypeSupported && (\n        <Alert\n          data-testid=\"unsupported_type_alert\"\n          ouiaId=\"instance_type_not_supported_alert\"\n          variant=\"warning\"\n          isInline\n          title=\"Warning: The selected specification does not meet minimum requirements for this image.\"\n        />\n      )}\n      <Select\n        ouiaId=\"select_instance_type\"\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Selected instance type\"\n        toggleAriaLabel=\"Select instance type\"\n        placeholderText=\"Select instance type\"\n        maxHeight=\"450px\"\n        isOpen={isOpen}\n        selections={chosenInstanceType}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onFilter={onFilter}\n        {...(numOptions < types?.length && {\n          loadingVariant: {\n            text: `View more (${types.length - numOptions})`,\n            onClick: () => setNumOptions(numOptions + OPTIONS_PER_SCREEN),\n          },\n        })}\n      >\n        {selectItemsMapper(types, numOptions)}\n      </Select>\n    </>\n  );\n};\n\nInstanceTypesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n};\n\nexport default InstanceTypesSelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery, useQueries } from 'react-query';\n\nimport { useWizardContext } from '../Common/WizardContext';\nimport { IMAGE_REGIONS_KEY } from '../../API/queryKeys';\nimport { fetchImageClones, fetchImageCloneStatus } from '../../API';\nimport { defaultRegionByProvider } from '../Common/helpers';\n\nconst RegionsSelect = ({ composeID }) => {\n  const [{ provider, chosenRegion }, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const {\n    isError,\n    isLoading,\n    data: clonedImages,\n  } = useQuery([IMAGE_REGIONS_KEY, composeID], () => fetchImageClones(composeID), {\n    select: (images) => images.data?.map((image) => ({ id: image.id, region: image.request.region })),\n  });\n\n  const clonesStatusQueries = useQueries(\n    clonedImages?.map((clonedImage) => ({ queryKey: [IMAGE_REGIONS_KEY, clonedImage.id], queryFn: () => fetchImageCloneStatus(clonedImage.id) })) ||\n      []\n  );\n  const isCloneStatusLoading = clonesStatusQueries.some((clone) => clone.isLoading);\n  const defaultRegion = { region: provider && defaultRegionByProvider(provider), id: composeID };\n  const images = [defaultRegion];\n  // filter successful clones images\n  if (clonesStatusQueries.length && clonesStatusQueries.every((cloneQuery) => cloneQuery.isLoading === false)) {\n    const clonesStatus = clonesStatusQueries?.map((query) => query?.data);\n    const filteredCloned = clonedImages?.filter((_, index) => clonesStatus[index].status === 'success');\n    images.push(...filteredCloned);\n  }\n\n  const onSelect = (_, selection) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenRegion: selection,\n      chosenImageID: images.find((image) => image.region === selection)?.id,\n    }));\n    setIsOpen(false);\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (isError) {\n    return (\n      <>\n        <Alert ouiaId=\"regions_alert\" variant=\"warning\" isInline title=\"There are problems fetching image's regions\" />\n        <Select ouiaId=\"regions_empty\" isDisabled placeholderText=\"No regions have found\" />\n      </>\n    );\n  }\n\n  if (isLoading || isCloneStatusLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"loading available regions\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_regions\"\n      variant=\"typeahead\"\n      onClear={() =>\n        setWizardContext((prevState) => ({\n          ...prevState,\n          chosenRegion: undefined,\n        }))\n      }\n      clearSelectionsAriaLabel=\"clear region\"\n      aria-label=\"Select region\"\n      label=\"Select region\"\n      maxHeight=\"450px\"\n      isOpen={isOpen}\n      selections={chosenRegion}\n      onToggle={onToggle}\n      onSelect={onSelect}\n    >\n      {images.map(({ id, region }) => (\n        <SelectOption aria-label=\"Region item\" key={id} value={region} />\n      ))}\n    </Select>\n  );\n};\n\nRegionsSelect.propTypes = {\n  composeID: PropTypes.string.isRequired,\n};\n\nexport default RegionsSelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Text, Button } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst AccountCustomizationsAWS = ({ setStepValidated, architecture, composeID }) => {\n  const [{ chosenSource, chosenInstanceType }] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: chosenSource ? 'success' : 'default',\n    types: chosenInstanceType ? 'success' : 'default',\n  });\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  return (\n    <Form>\n      <Title ouiaId=\"account_custom_title\" headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | Amazon\n      </Title>\n      <Text ouiaId=\"account_custom_description\">\n        Configure instances that will run on your AWS. All the instances will launch with the same configuration.\n      </Text>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"aws-select-source\"\n      >\n        <SourcesSelect\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select region\"\n        isRequired\n        fieldId=\"aws-select-region\"\n        labelIcon={\n          <Popover bodyContent=\"Select available geographical region\">\n            <Button\n              ouiaId=\"region_help\"\n              type=\"button\"\n              aria-label=\"More info for regions field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-region\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <RegionsSelect composeID={composeID} />\n      </FormGroup>\n      <FormGroup\n        label=\"Select instance type\"\n        isRequired\n        helperTextInvalid=\"Please pick a value\"\n        fieldId=\"aws-select-instance-types\"\n        labelIcon={\n          <Popover\n            bodyContent=\"Select AWS instance type based on your computing,\n           memory, networking, or storage needs\"\n          >\n            <Button\n              ouiaId=\"instance_type_help\"\n              type=\"button\"\n              aria-label=\"More info for instance types field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-types\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          architecture={architecture}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"aws-select-instance-counter\"\n        labelIcon={\n          <Popover bodyContent=\"Specify the number of AWS instances to be launched\">\n            <Button\n              ouiaId=\"instance_count_help\"\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceCounter />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsAWS.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n  composeID: PropTypes.string.isRequired,\n};\n\nexport default AccountCustomizationsAWS;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Text, Button } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst AccountCustomizationsGCP = ({ setStepValidated, architecture, composeID }) => {\n  const [wizardContext] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: wizardContext.chosenSource ? 'success' : 'default',\n    types: wizardContext.chosenInstanceType ? 'success' : 'default',\n  });\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  return (\n    <Form>\n      <Title ouiaId=\"account_custom_title\" headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | Google cloud\n      </Title>\n      <Text ouiaId=\"account_custom_description\">\n        Configure instances that will run on your Google cloud. All the instances will launch with the same configuration.\n      </Text>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"gcp-select-source\"\n      >\n        <SourcesSelect\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select zone\"\n        isRequired\n        fieldId=\"gcp-select-zone\"\n        labelIcon={\n          <Popover headerContent={<div>GCP zones</div>}>\n            <Button\n              ouiaId=\"zone_help\"\n              type=\"button\"\n              aria-label=\"More info for zones field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"gcp-select-zone\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <RegionsSelect composeID={composeID} />\n      </FormGroup>\n      <FormGroup\n        label=\"Select machine type\"\n        isRequired\n        helperTextInvalid=\"Please pick a value\"\n        fieldId=\"gcp-select-machine-types\"\n        labelIcon={\n          <Popover headerContent={<div>GCP machine types</div>}>\n            <Button\n              ouiaId=\"machine_type_help\"\n              type=\"button\"\n              aria-label=\"More info for machine types field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"gcp-select-machine-types\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          architecture={architecture}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"gcp-select-instance-counter\"\n        labelIcon={\n          <Popover headerContent={<div>Number of GCP instances</div>}>\n            <Button\n              ouiaId=\"instance_count_help\"\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"gcp-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceCounter />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsGCP.propTypes = {\n  architecture: PropTypes.string.isRequired,\n  composeID: PropTypes.string.isRequired,\n  setStepValidated: PropTypes.func.isRequired,\n};\nexport default AccountCustomizationsGCP;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { AWS_PROVIDER, GCP_PROVIDER } from '../../../Common/constants';\nimport { defaultRegionByProvider } from '../../../Common/helpers';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport AWS from './aws';\nimport GCP from './gcp';\n\nconst AccountCustomizations = ({ setStepValidated, architecture, composeID, provider }) => {\n  const [, setWizardContext] = useWizardContext();\n\n  React.useEffect(() => {\n    provider &&\n      setWizardContext((prevState) => ({\n        ...prevState,\n        provider,\n        chosenRegion: defaultRegionByProvider(provider),\n        chosenImageID: composeID,\n      }));\n  }, [provider, setWizardContext]);\n\n  switch (provider) {\n    case AWS_PROVIDER:\n      return <AWS setStepValidated={setStepValidated} architecture={architecture} composeID={composeID} />;\n    case GCP_PROVIDER:\n      return <GCP setStepValidated={setStepValidated} architecture={architecture} composeID={composeID} />;\n    default:\n      throw new Error(`Can not render AccountCustomizations for unrecognized provider: ${provider}`);\n  }\n};\n\nAccountCustomizations.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n  composeID: PropTypes.string.isRequired,\n  provider: PropTypes.oneOf([AWS_PROVIDER, GCP_PROVIDER]),\n};\n\nexport default AccountCustomizations;\n","export const PF_SUCCESS_100 = '#3E8635';\nexport const PF_DANGER_100 = '#C9190B';\n\nexport const POLLING_BACKOFF_INTERVAL = [\n  500, 600, 700, 800, 900, 1000, 1200, 1400, 1600, 1800, 2000, 3000, 4000, 5000, 10000, 15000, 20000, 25000, 30000,\n];\n\nexport const AWS_STEPS = [\n  { name: 'Create reservation', description: `Submit requested data` },\n  {\n    name: 'Transfer keys',\n    description: 'Uploading public key to AWS',\n  },\n  { name: 'Launch instance(s)', description: 'Call AWS API for launching instance(s)' },\n];\n\nexport const GCP_STEPS = [\n  { name: 'Create reservation', description: `Submit requested data` },\n  { name: 'Launch instance(s)', description: 'Call Google API' },\n];\n\nexport const SSH_STEP = [{ name: 'New SSH key', description: 'Creating new SSH public key resource' }];\n","import { AWS_PROVIDER, GCP_PROVIDER } from '../../../Common/constants';\nimport { AWS_STEPS, GCP_STEPS } from './constants';\n\nexport const mapCurrentVariant = (step, currentStep, currentError) => {\n  if (step < currentStep) return 'success';\n  if (step === currentStep && currentError) return 'danger';\n  if (step === currentStep) return 'info';\n  if (step > currentStep) return 'pending';\n};\n\nexport const stepsByProvider = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return AWS_STEPS;\n    case GCP_PROVIDER:\n      return GCP_STEPS;\n    default:\n      throw new Error(`Steps requested for unknown provider: ${provider}`);\n  }\n};\n\nexport const instanceType = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return 'instance_type';\n    case GCP_PROVIDER:\n      return 'machine_type';\n    default:\n      return 'instance_type';\n  }\n};\n\nexport const region = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return 'region';\n    case GCP_PROVIDER:\n      return 'zone';\n    default:\n      return 'region';\n  }\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ExpandableSection, DescriptionList, DescriptionListTerm, DescriptionListGroup, DescriptionListDescription } from '@patternfly/react-core';\n\nimport { useQuery } from 'react-query';\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\nimport { instanceType, region } from '../ProvisioningWizard/steps/ReservationProgress/helpers';\n\nconst LaunchDescriptionList = ({ imageName }) => {\n  const [{ chosenRegion, chosenSshKeyName, uploadedKey, chosenInstanceType, chosenNumOfInstances, chosenSource, sshPublicName, provider }] =\n    useWizardContext();\n  const { data: sources } = useQuery([SOURCES_QUERY_KEY, provider], () => fetchSourcesList(provider));\n  const [isExpanded, setIsExpanded] = React.useState(true);\n  const onToggle = (isExpanded) => {\n    setIsExpanded(isExpanded);\n  };\n\n  const getChosenSourceName = () => sources?.find((source) => source.id === chosenSource).name;\n  const regionLabel = region(provider).charAt(0).toUpperCase() + region(provider).slice(1);\n  const providerInstanceType = instanceType(provider).replace('_', ' ');\n  const instanceTypeLabel = providerInstanceType.charAt(0).toUpperCase() + providerInstanceType.slice(1);\n\n  return (\n    <ExpandableSection toggleText={provider} onToggle={onToggle} isExpanded={isExpanded} isIndented>\n      <DescriptionList isHorizontal>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Image</DescriptionListTerm>\n          <DescriptionListDescription>{imageName}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Account</DescriptionListTerm>\n          <DescriptionListDescription>{getChosenSourceName()}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>{regionLabel}</DescriptionListTerm>\n          <DescriptionListDescription>{chosenRegion}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>{instanceTypeLabel}</DescriptionListTerm>\n          <DescriptionListDescription>{chosenInstanceType}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Count</DescriptionListTerm>\n          <DescriptionListDescription>{chosenNumOfInstances}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>{uploadedKey ? 'New SSH key' : 'Existing SSH key'}</DescriptionListTerm>\n          <DescriptionListDescription>{uploadedKey ? sshPublicName : chosenSshKeyName}</DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n    </ExpandableSection>\n  );\n};\n\nLaunchDescriptionList.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default LaunchDescriptionList;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title, Text } from '@patternfly/react-core';\nimport LaunchDescriptionList from '../../../LaunchDescriptionList';\n\nconst ReviewDetails = ({ imageName }) => {\n  return (\n    <div className=\"pf-c-form\">\n      <Title ouiaId=\"review_details_title\" headingLevel=\"h1\">\n        Review details\n      </Title>\n      <Text ouiaId=\"review_details_description\">\n        Review the information below and then click <b>Launch</b> to finish the process.\n      </Text>\n\n      <LaunchDescriptionList imageName={imageName} />\n    </div>\n  );\n};\n\nReviewDetails.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default ReviewDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst selectOptionObj = (id, name) => ({\n  id: id,\n  toString: () => name,\n  compareTo: (other) => other.id == id,\n});\n\nconst PubkeySelect = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selection, setSelection] = React.useState(\n    wizardContext.chosenSshKeyId ? selectOptionObj(wizardContext.chosenSshKeyId, wizardContext.chosenSshKeyName) : null\n  );\n\n  React.useEffect(() => {\n    setStepValidated(!!selection);\n  }, [selection]);\n\n  const { isLoading, isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n\n  const onSelect = (event, value) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenSshKeyId: value.id,\n      chosenSshKeyName: value.toString(),\n    }));\n    setSelection(value);\n    setIsOpen(false);\n  };\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading saved SSH keys\" />;\n  }\n\n  if (isError || (pubkeys && pubkeys.length < 1)) {\n    return (\n      <>\n        {isError && <Alert ouiaId=\"pubkey_alert\" variant=\"warning\" isInline title=\"There are problems fetching saved SSH keys\" />}\n        <Select ouiaId=\"pubkey_empty\" isDisabled placeholderText=\"No SSH key found\" aria-label=\"Select public key\" />\n      </>\n    );\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_pubkey\"\n      onToggle={(isExpanded) => setIsOpen(isExpanded)}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      selections={selection}\n      placeholderText=\"Select public key...\"\n      aria-label=\"Select public key\"\n    >\n      {pubkeys.map(({ id, name }) => (\n        <SelectOption aria-label={`Public key ${name}`} key={id} value={selectOptionObj(id, name)} />\n      ))}\n    </Select>\n  );\n};\n\nPubkeySelect.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PubkeySelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormGroup, TextInput, FileUpload } from '@patternfly/react-core';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\n// This is a simple regex format for public ssh key\nconst PUBLIC_KEY_FORMAT = '^(ssh|ecdsa)';\nconst validatePublicKey = (ssh) => {\n  const regex = new RegExp(PUBLIC_KEY_FORMAT);\n  return regex.test(ssh);\n};\n\nconst NewSSHKeyForm = ({ setStepValidated }) => {\n  const [{ sshPublicName, sshPublicKey }, setWizardContext] = useWizardContext();\n  const [isLoading, setIsLoading] = React.useState();\n  const [validations, setValidation] = React.useState({\n    sshKeyBody: validatePublicKey(sshPublicKey) ? 'success' : 'default',\n    sshKeyName: sshPublicName ? 'success' : 'default',\n  });\n  const [keyName, setName] = React.useState(sshPublicName);\n  const [publicKey, setPublicKey] = React.useState(sshPublicKey);\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  const updateValidation = (inputKey, value) =>\n    setValidation((prevValidations) => ({\n      ...prevValidations,\n      [inputKey]: value,\n    }));\n\n  const handleNameChange = (value) => {\n    setWizardContext((prevState) => ({ ...prevState, sshPublicName: value }));\n    setName(value);\n  };\n  const handleNameBlur = () => {\n    if (keyName.length === 0) {\n      updateValidation('sshKeyName', 'error');\n      return;\n    }\n    updateValidation('sshKeyName', 'success');\n  };\n  const handleSSHKeyChange = (value) => {\n    if (validatePublicKey(value)) {\n      setWizardContext((prevState) => ({\n        ...prevState,\n        sshPublicKey: value,\n      }));\n      setPublicKey(value);\n      updateValidation('sshKeyBody', 'success');\n    } else {\n      updateValidation('sshKeyBody', 'error');\n    }\n  };\n  const handleSSHKeyText = (text) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicKey: text,\n    }));\n    setPublicKey(text);\n  };\n  const handleSSHKeyTextBlur = () => {\n    if (publicKey === '') {\n      updateValidation('sshKeyBody', 'default');\n    } else {\n      updateValidation('sshKeyBody', validatePublicKey(publicKey) ? 'success' : 'error');\n    }\n  };\n\n  const handleClear = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: undefined,\n      sshPublicKey: undefined,\n    }));\n    setPublicKey('');\n    updateValidation('sshKeyBody', 'default');\n  };\n\n  const handleFileReadStarted = () => {\n    setIsLoading(true);\n  };\n\n  const handleFileReadFinished = () => {\n    setIsLoading(false);\n  };\n  const handleFileReadFailed = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: '<Failed to load the file>',\n    }));\n    updateValidation('sshKeyBody', 'error');\n  };\n\n  return (\n    <FormGroup isStack>\n      <FormGroup validated={validations.sshKeyName} helperTextInvalid=\"Name is required\" label=\"Name\" isRequired fieldId=\"ssh-name\">\n        <TextInput\n          ouiaId=\"new_pubkey_name\"\n          validated={validations.sshKeyName}\n          value={keyName}\n          id=\"public-key-name\"\n          onChange={handleNameChange}\n          onBlur={handleNameBlur}\n          type=\"text\"\n        />\n      </FormGroup>\n      <FormGroup\n        helperTextInvalid=\"Must be SSH public key format\"\n        label=\"SSH public key\"\n        isRequired\n        fieldId=\"ssh-file\"\n        validated={validations.sshKeyBody}\n      >\n        <FileUpload\n          // ouia not supported yet?\n          ouiaId=\"new_pubkey_file\"\n          id=\"public-key-value\"\n          onDataChange={handleSSHKeyChange}\n          allowEditingUploadedText\n          onTextChange={handleSSHKeyText}\n          onTextAreaBlur={handleSSHKeyTextBlur}\n          type=\"text\"\n          value={publicKey}\n          validated={validations.sshKeyBody}\n          onReadStarted={handleFileReadStarted}\n          onReadFinished={handleFileReadFinished}\n          onReadFailed={handleFileReadFailed}\n          onClearClick={handleClear}\n          isLoading={isLoading}\n          filenamePlaceholder=\"Drag a file here\"\n        />\n      </FormGroup>\n    </FormGroup>\n  );\n};\n\nNewSSHKeyForm.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\nexport default NewSSHKeyForm;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Radio, Text, Title } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport PubkeySelect from './PubkeySelect';\nimport NewSSHKeyForm from './NewKeyForm';\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\n\nconst EXIST_KEY_OPTION = 'existKey';\nconst NEW_KEY_OPTION = 'newKey';\n\nconst PublicKeys = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const { isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n  const [isSelectDisabled, disableSelect] = React.useState(false);\n\n  const switchTo = (optionKey) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      uploadedKey: NEW_KEY_OPTION === optionKey,\n    }));\n  };\n\n  const onOptionChange = (_, event) => {\n    switchTo(event.currentTarget.value);\n  };\n\n  React.useEffect(() => {\n    if (isError || pubkeys?.length < 1) {\n      disableSelect(true);\n      switchTo(NEW_KEY_OPTION);\n    }\n  }, [isError, pubkeys]);\n\n  return (\n    <Form className=\"pubkeys\">\n      <Title ouiaId=\"pubkey_title\" headingLevel=\"h1\">\n        SSH keys authentication\n      </Title>\n      <Text ouiaId=\"pubkey_description\">Establish secure, reliable communication and strong encryption to protect data.</Text>\n      <FormGroup role=\"radiogroup\" isStack isRequired label=\"Select a method to add SSH pubic key\">\n        <Radio\n          id=\"existing-pubkey-radio\"\n          ouiaId=\"pubkey_radio\"\n          isChecked={!wizardContext.uploadedKey}\n          isDisabled={isSelectDisabled}\n          name=\"ssh-keys-radio\"\n          value={EXIST_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Select existing SSH public key\"\n          data-testid=\"existing-pubkey-radio\"\n          body={\n            (!wizardContext.uploadedKey || isSelectDisabled) && (\n              <FormGroup label=\"Select public key\">\n                <PubkeySelect setStepValidated={setStepValidated} />\n              </FormGroup>\n            )\n          }\n        />\n        <Radio\n          id=\"upload-pubkey-radio\"\n          ouiaId=\"new_pubkey_radio\"\n          isChecked={wizardContext.uploadedKey}\n          name=\"ssh-keys-radio\"\n          value={NEW_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Add and save a new SSH public key\"\n          description=\"Newly added key will be automatically saved. Result of the provisioning will not be affected this process.\"\n          data-testid=\"upload-pubkey-radio\"\n          body={wizardContext.uploadedKey && <NewSSHKeyForm setStepValidated={setStepValidated} />}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nPublicKeys.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PublicKeys;\n","const instanceLink = (instanceID, provider, region) => {\n  switch (provider) {\n    case 'aws':\n      return `https://console.aws.amazon.com/ec2/home?region=${region}#InstanceDetails:instanceId=${instanceID}`;\n    default:\n      return null;\n  }\n};\n\nexport default instanceLink;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  ExpandableSection,\n  DescriptionList,\n  DescriptionListTerm,\n  DescriptionListDescription,\n  Timestamp,\n  Bullseye,\n  Truncate,\n  Card,\n  Spinner,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useQuery } from 'react-query';\nimport { fetchReservationByProvider } from '../../../../API';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport instanceLink from '../../../Common/InstanceLink';\n\nconst ExpandedInfo = ({ reservationID, error, createdAt }) => {\n  const [{ chosenRegion, provider }] = useWizardContext();\n  const { data: instances, isLoading } = useQuery(['launchInfo', reservationID], () => fetchReservationByProvider(reservationID, provider), {\n    enabled: !error,\n    select: (reservation) => reservation?.instances,\n  });\n  return (\n    <Bullseye>\n      <ExpandableSection toggleTextCollapsed=\"Show additional info\" toggleTextExpanded=\"\">\n        <DescriptionList columnModifier={{ lg: '2Col' }}>\n          <Card component=\"div\">\n            <DescriptionListTerm>Launch ID</DescriptionListTerm>\n            <DescriptionListDescription>{<span aria-label=\"launch id\">{reservationID}</span>}</DescriptionListDescription>\n          </Card>\n          {error && (\n            <Card component=\"div\">\n              <DescriptionListTerm>Error message</DescriptionListTerm>\n              <DescriptionListDescription>\n                <span aria-label=\"launch error\">\n                  <Truncate content={error} />\n                </span>\n              </DescriptionListDescription>\n            </Card>\n          )}\n          <Card component=\"div\">\n            <DescriptionListTerm>Started at</DescriptionListTerm>\n            <DescriptionListDescription>{createdAt ? <Timestamp date={new Date(createdAt)} /> : 'N/A'}</DescriptionListDescription>\n          </Card>\n          {isLoading && (\n            <Card component=\"div\">\n              <DescriptionListTerm>Host</DescriptionListTerm>\n              <DescriptionListDescription>{<Spinner size=\"md\" />}</DescriptionListDescription>\n            </Card>\n          )}\n          {instances?.map((instance_id) => (\n            <Card key={instance_id} component=\"div\">\n              <DescriptionListTerm>Host</DescriptionListTerm>\n              <DescriptionListDescription>\n                {\n                  <span aria-label=\"instance link\">\n                    <a href={instanceLink(instance_id, provider, chosenRegion)} rel=\"noreferrer\" target=\"_blank\">\n                      {instance_id} <ExternalLinkAltIcon />\n                    </a>\n                  </span>\n                }\n              </DescriptionListDescription>\n            </Card>\n          ))}\n        </DescriptionList>\n      </ExpandableSection>\n    </Bullseye>\n  );\n};\n\nExpandedInfo.propTypes = {\n  createdAt: PropTypes.string,\n  error: PropTypes.string,\n  finishedAt: PropTypes.string,\n  reservationID: PropTypes.number,\n};\n\nExpandedInfo.defaultProps = {\n  createdAt: undefined,\n  finishedAt: undefined,\n  reservationID: undefined,\n  error: undefined,\n};\n\nexport default ExpandedInfo;\n","import React from 'react';\n\nconst intervalGenerator = function* (intervalList) {\n  for (const interval of intervalList) yield interval;\n};\n\nconst useInterval = (list) => {\n  const generatorRef = React.useRef(null);\n  const savedList = React.useRef(list);\n  const [currentInterval, setCurrentInterval] = React.useState();\n\n  React.useEffect(() => {\n    generatorRef.current = intervalGenerator(savedList.current);\n  }, []);\n\n  const nextInterval = () => {\n    const nextValue = generatorRef.current.next().value;\n    setCurrentInterval(nextValue);\n    if (nextValue === undefined) return false;\n    return nextValue;\n  };\n  return { nextInterval, currentInterval };\n};\n\nexport default useInterval;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ProgressStepper,\n  ProgressStep,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Title,\n  Popover,\n  Button,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { CogsIcon, PendingIcon } from '@patternfly/react-icons';\nimport { useMutation, useQuery } from 'react-query';\n\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport { createNewPublicKey, createReservation, fetchReservation } from '../../../../API';\nimport ExpandedInfo from './ExpansionInfo';\nimport useInterval from '../../../Common/Hooks/useInterval';\nimport { POLLING_BACKOFF_INTERVAL, SSH_STEP } from './constants';\nimport { instanceType, mapCurrentVariant, region, stepsByProvider } from './helpers';\n\nconst ReservationProgress = ({ setLaunchSuccess }) => {\n  const [steps, setSteps] = React.useState([]);\n  const [currentError, setCurrentError] = React.useState();\n  const [currentStep, setCurrentStep] = React.useState(0);\n  const [currentJobStep, setCurrentJobStep] = React.useState(0);\n  const [reservationID, setReservationID] = React.useState();\n\n  const [\n    {\n      chosenSource,\n      chosenInstanceType,\n      chosenNumOfInstances,\n      chosenRegion,\n      sshPublicName,\n      sshPublicKey,\n      chosenSshKeyId,\n      uploadedKey,\n      chosenImageID,\n      provider,\n    },\n  ] = useWizardContext();\n  const { nextInterval, currentInterval } = useInterval(POLLING_BACKOFF_INTERVAL);\n\n  const { mutate: mutateReservation, error: reservationError } = useMutation(createReservation(provider), {\n    onSuccess: (res) => {\n      stepUp();\n      setReservationID(res?.data?.reservation_id);\n    },\n  });\n\n  React.useEffect(() => {\n    if (createReservation) {\n      if (uploadedKey) {\n        setSteps(SSH_STEP.concat(stepsByProvider(provider)));\n        createPublicKey({ name: sshPublicName, body: sshPublicKey });\n      } else {\n        setSteps(stepsByProvider(provider));\n        mutateReservation({\n          source_id: chosenSource,\n          [instanceType(provider)]: chosenInstanceType,\n          amount: chosenNumOfInstances,\n          image_id: chosenImageID,\n          [region(provider)]: chosenRegion,\n          pubkey_id: chosenSshKeyId,\n        });\n      }\n    }\n  }, [createReservation, setSteps, uploadedKey]);\n\n  const { mutate: createPublicKey, error: pubkeyError } = useMutation(createNewPublicKey, {\n    onSuccess: (resp) => {\n      stepUp();\n      mutateReservation({\n        source_id: chosenSource,\n        [instanceType(provider)]: chosenInstanceType,\n        amount: chosenNumOfInstances,\n        image_id: chosenImageID,\n        [region(provider)]: chosenRegion,\n        pubkey_id: resp?.data?.id,\n      });\n    },\n  });\n\n  // polling request\n  const { data: polledReservation } = useQuery(['reservation', reservationID], () => fetchReservation(reservationID), {\n    enabled: !!reservationID && currentStep < steps.length && !currentError,\n    refetchInterval: (data) => {\n      if (data?.success || !!data?.error) return false;\n      return currentInterval;\n    },\n    onSuccess: (data) => {\n      if (currentJobStep < data.step && !data.error) {\n        setCurrentJobStep((prev) => prev + 1);\n        stepUp();\n      }\n      !data?.success && nextInterval();\n      data.success && setLaunchSuccess();\n    },\n    refetchIntervalInBackground: true,\n  });\n\n  // error handling\n  React.useEffect(() => {\n    if (currentInterval === false) {\n      setCurrentError('Session timed out, the reservation took too long to fulfill');\n      return;\n    }\n    if (reservationError || pubkeyError || polledReservation?.error) {\n      const createReservationErrorMsg = reservationError?.response?.data?.msg;\n      const pubkeyErrorMsg = pubkeyError?.response?.data?.msg;\n\n      setCurrentError(createReservationErrorMsg || pubkeyErrorMsg || polledReservation?.error);\n    }\n  }, [reservationError, pubkeyError, polledReservation?.error, currentInterval]);\n\n  const stepUp = () => setCurrentStep((prevStep) => prevStep + 1);\n\n  return (\n    <WizardContextConsumer>\n      {({ goToStepById, onClose }) => (\n        <EmptyState variant=\"large\">\n          <EmptyStateIcon icon={CogsIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\" ouiaId=\"launch-status\">\n            {`Launching system(s)`}\n          </Title>\n          <EmptyStateBody>\n            <ProgressStepper isCenterAligned>\n              {steps.map(({ name, description }, step) => {\n                const variant = mapCurrentVariant(step, currentStep, currentError);\n                return (\n                  <ProgressStep\n                    variant={variant}\n                    id={name}\n                    key={name}\n                    icon={step > currentStep ? <PendingIcon /> : undefined}\n                    isCurrent={step === currentStep}\n                    description={description}\n                    titleId={name}\n                    aria-label={`step ${name} ${variant}`}\n                    popoverRender={\n                      currentError && step === currentStep\n                        ? (stepRef) => (\n                            <Popover\n                              aria-label={`${name} error message`}\n                              headerContent={<div>Error</div>}\n                              bodyContent={<div>{currentError}</div>}\n                              reference={stepRef}\n                              position=\"right\"\n                            />\n                          )\n                        : undefined\n                    }\n                  >\n                    {name}\n                  </ProgressStep>\n                );\n              })}\n            </ProgressStepper>\n          </EmptyStateBody>\n          {/* TODO: remove hidden input */}\n          {reservationID && <input type=\"hidden\" name=\"reservation_id\" value={reservationID} />}\n          <EmptyStateBody>\n            {(polledReservation?.error || polledReservation?.success) && (\n              <ExpandedInfo\n                reservationID={reservationID}\n                error={currentError}\n                createdAt={polledReservation?.created_at}\n                finishedAt={polledReservation?.finished_at}\n              />\n            )}\n          </EmptyStateBody>\n          {currentError && (\n            <Button id=\"wizard-provisioning-failed-edit-button\" onClick={() => goToStepById(1)} variant=\"primary\">\n              Edit\n            </Button>\n          )}\n          <EmptyStateSecondaryActions>\n            <Button variant=\"link\" isDisabled={!currentError && currentStep < 2} onClick={onClose}>\n              Close\n            </Button>\n          </EmptyStateSecondaryActions>\n        </EmptyState>\n      )}\n    </WizardContextConsumer>\n  );\n};\n\nReservationProgress.propTypes = {\n  setLaunchSuccess: PropTypes.func.isRequired,\n};\n\nexport default ReservationProgress;\n","import React from 'react';\nimport AccountCustomizations from '../steps/AccountCustomizations';\nimport ReviewDetails from './ReviewDetails';\nimport PublicKeys from './Pubkeys';\nimport FinishStep from './ReservationProgress';\nimport { humanizeProvider } from '../../Common/helpers';\n\nconst stringIds = {\n  1: 'account',\n  4: 'sshkey',\n  5: 'review',\n};\n\nexport const stepIdToString = (id) => stringIds[id];\n\nconst defaultSteps = ({ stepIdReached, image: { name, id, architecture, provider }, stepValidation, setStepValidation, setLaunchSuccess }) => [\n  {\n    name: 'Account and customization',\n    steps: [\n      {\n        name: humanizeProvider(provider),\n        id: 1,\n        enableNext: stepValidation.awsStep,\n        component: (\n          <AccountCustomizations\n            provider={provider}\n            architecture={architecture || 'x86_64'}\n            composeID={id}\n            setStepValidated={(validated) => setStepValidation((prev) => ({ ...prev, awsStep: validated }))}\n          />\n        ),\n        canJumpTo: stepIdReached >= 1,\n      },\n    ],\n  },\n  {\n    name: 'SSH key authentication',\n    id: 4,\n    component: <PublicKeys setStepValidated={(validated) => setStepValidation((prev) => ({ ...prev, sshStep: validated }))} />,\n    canJumpTo: stepIdReached >= 4,\n    enableNext: stepValidation.sshStep,\n  },\n  {\n    name: 'Review details',\n    id: 5,\n    component: <ReviewDetails imageName={name} />,\n    canJumpTo: stepIdReached >= 5,\n    nextButtonText: 'Launch',\n  },\n  {\n    name: 'Finish Progress',\n    id: 6,\n    component: <FinishStep setLaunchSuccess={() => setLaunchSuccess(true)} imageID={id} />,\n    isFinishedStep: true,\n  },\n];\n\nexport default defaultSteps;\n","import * as React from 'react';\nimport { Button, ButtonVariant, WizardFooter, WizardContextConsumer } from '@patternfly/react-core';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nimport { stepIdToString } from './steps';\n\nconst CustomFooter = () => (\n  <WizardFooter>\n    <WizardContextConsumer>\n      {({ activeStep, onNext, onBack, onClose }) => {\n        const isValid = activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n\n        return (\n          <>\n            <Button\n              id={`wizard-provisioning-${stepIdToString(activeStep.id)}-next-button`}\n              variant={ButtonVariant.primary}\n              type=\"submit\"\n              onClick={onNext}\n              isDisabled={!isValid}\n            >\n              {activeStep.nextButtonText || 'Next'}\n            </Button>\n            {!activeStep.hideBackButton && (\n              <Button\n                id={`wizard-provisioning-${stepIdToString(activeStep.id)}-back-button`}\n                variant={ButtonVariant.secondary}\n                onClick={onBack}\n                isDisabled={activeStep.id == 1}\n              >\n                Back\n              </Button>\n            )}\n            {!activeStep.hideCancelButton && (\n              <div className={styles.wizardFooterCancel}>\n                <Button variant={ButtonVariant.link} onClick={onClose}>\n                  Cancel\n                </Button>\n              </div>\n            )}\n          </>\n        );\n      }}\n    </WizardContextConsumer>\n  </WizardFooter>\n);\n\nexport default CustomFooter;\n","import PropTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { WizardProvider } from '../Common/WizardContext';\nimport APIProvider from '../Common/Query';\nimport ConfirmModal from '../ConfirmModal';\nimport CustomFooter from './CustomFooter';\nimport defaultSteps from './steps';\nimport './steps/Pubkeys/pubkeys.scss';\n\nconst DEFAULT_STEP_VALIDATION = {\n  sshStep: false,\n  awsStep: false,\n};\n\nconst ProvisioningWizard = ({ isOpen, onClose, image, ...props }) => {\n  const [stepIdReached, setStepIdReached] = React.useState(1);\n  const [stepValidation, setStepValidation] = React.useState(DEFAULT_STEP_VALIDATION);\n  const [isConfirming, setConfirming] = React.useState(false);\n  const [successfulLaunch, setLaunchSuccess] = React.useState();\n\n  const onCustomClose = () => {\n    setConfirming(false);\n    setStepIdReached(1);\n    setStepValidation(DEFAULT_STEP_VALIDATION);\n    onClose();\n  };\n\n  const onWizardClose = () => {\n    if (stepIdReached >= 5 && !successfulLaunch) {\n      setConfirming(true);\n    } else {\n      onCustomClose();\n    }\n  };\n\n  const steps = defaultSteps({\n    stepIdReached,\n    image,\n    stepValidation,\n    setStepValidation,\n    setLaunchSuccess,\n  });\n\n  const onNext = ({ id, name }, { prevId, prevName }) => {\n    console.debug(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\n    setStepIdReached((prevID) => (prevID < id ? id : prevID));\n  };\n\n  return isOpen ? (\n    <WizardProvider>\n      <APIProvider>\n        <Wizard\n          {...props}\n          title=\"Launch\"\n          description={`Launch image ${image.name}`}\n          steps={steps}\n          isOpen\n          onClose={onWizardClose}\n          onNext={onNext}\n          className={'provisioning'}\n          footer={<CustomFooter />}\n        />\n        <ConfirmModal isOpen={isConfirming} onConfirm={onCustomClose} onCancel={() => setConfirming(false)} />\n      </APIProvider>\n    </WizardProvider>\n  ) : null;\n};\n\nProvisioningWizard.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func,\n  image: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    architecture: PropTypes.string,\n    provider: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ProvisioningWizard;\n"],"names":["AWS_PROVIDER","GCP_PROVIDER","chosenSource","undefined","chosenNumOfInstances","chosenInstanceType","uploadedKey","chosenRegion","chosenImageID","sshPublicName","sshPublicKey","chosenSshKeyId","chosenSshKeyName","provider","createContainer","useState","initialWizardContext","WizardProvider","Provider","useWizardContext","useTracked","queryClient","QueryClient","children","QueryClientProvider","client","ConfirmModal","isOpen","onConfirm","onCancel","Modal","ouiaId","id","variant","ModalVariant","title","onClose","actions","Button","key","onClick","titleIconVariant","propTypes","PropTypes","defaultRegionByProvider","Error","humanizeProvider","SOURCES_QUERY_KEY","PUBKEYS_QUERY_KEY","IMAGE_REGIONS_KEY","provisioningUrl","path","imageBuilderURL","fetchSourcesList","axios","data","fetchPubkeysList","fetchInstanceTypesList","region","createReservation","params","createNewPublicKey","fetchReservation","fetchImageClones","composeID","fetchImageCloneStatus","cloneID","fetchReservationByProvider","reservationID","SourcesSelect","setValidation","setWizardContext","React","setIsOpen","selected","setSelected","selectObject","name","toString","compareTo","other","useQuery","enabled","onSuccess","find","source","error","isLoading","sources","console","warn","Alert","isInline","Select","isDisabled","placeholderText","Spinner","isSVG","size","onToggle","openState","selections","onSelect","event","selection","isPlaceholder","prevState","map","SelectOption","value","NumberInput","max","min","onMinus","newValue","onChange","input","Math","floor","Number","target","onPlus","inputName","inputAriaLabel","minusBtnAriaLabel","plusBtnAriaLabel","InstanceTypesSelect","architecture","numOptions","setNumOptions","filteredTypes","setFilteredTypes","prevSearch","setPrevSearch","isTypeSupported","setTypeSupported","select","types","filter","type","instanceTypes","TextInput","className","readOnly","toggleAriaLabel","typeAheadAriaLabel","maxHeight","instanceType","supported","onFilter","_e","inputValue","search","replace","i","includes","length","loadingVariant","text","limit","slice","index","description","cores","vcpus","parseFloat","memory_mib","toFixed","storage_gb","selectItemsMapper","RegionsSelect","images","image","request","isError","clonedImages","clonesStatusQueries","useQueries","clonedImage","queryKey","queryFn","isCloneStatusLoading","some","clone","every","cloneQuery","clonesStatus","query","filteredCloned","_","status","push","onClear","clearSelectionsAriaLabel","label","AccountCustomizationsAWS","setStepValidated","validations","errorExists","Object","values","valid","Form","Title","headingLevel","Text","FormGroup","validated","helperTextInvalid","isRequired","fieldId","validation","prevValidations","labelIcon","Popover","bodyContent","e","preventDefault","noVerticalAlign","AccountCustomizationsGCP","wizardContext","headerContent","AccountCustomizations","POLLING_BACKOFF_INTERVAL","AWS_STEPS","GCP_STEPS","SSH_STEP","stepsByProvider","LaunchDescriptionList","imageName","isExpanded","setIsExpanded","regionLabel","charAt","toUpperCase","providerInstanceType","instanceTypeLabel","ExpandableSection","toggleText","isIndented","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","ReviewDetails","selectOptionObj","PubkeySelect","setSelection","pubkeys","validatePublicKey","ssh","RegExp","test","NewSSHKeyForm","setIsLoading","sshKeyBody","sshKeyName","keyName","setName","publicKey","setPublicKey","updateValidation","inputKey","isStack","onBlur","FileUpload","onDataChange","allowEditingUploadedText","onTextChange","onTextAreaBlur","onReadStarted","onReadFinished","onReadFailed","onClearClick","filenamePlaceholder","NEW_KEY_OPTION","PublicKeys","isSelectDisabled","disableSelect","switchTo","optionKey","onOptionChange","currentTarget","role","Radio","isChecked","body","instanceID","ExpandedInfo","createdAt","reservation","instances","Bullseye","toggleTextCollapsed","toggleTextExpanded","columnModifier","lg","Card","component","Truncate","content","Timestamp","date","Date","instance_id","href","instanceLink","rel","finishedAt","defaultProps","intervalGenerator","intervalList","interval","f","ReservationProgress","setLaunchSuccess","steps","setSteps","currentError","setCurrentError","currentStep","setCurrentStep","currentJobStep","setCurrentJobStep","setReservationID","list","generatorRef","savedList","currentInterval","setCurrentInterval","current","nextInterval","nextValue","next","useInterval","useMutation","res","stepUp","reservation_id","mutateReservation","mutate","reservationError","concat","createPublicKey","source_id","resp","pubkeyError","polledReservation","refetchInterval","success","step","prev","refetchIntervalInBackground","createReservationErrorMsg","response","msg","pubkeyErrorMsg","prevStep","WizardContextConsumer","goToStepById","EmptyState","EmptyStateIcon","icon","CogsIcon","EmptyStateBody","ProgressStepper","isCenterAligned","mapCurrentVariant","ProgressStep","isCurrent","titleId","popoverRender","stepRef","reference","position","created_at","finished_at","EmptyStateSecondaryActions","stringIds","stepIdToString","WizardFooter","activeStep","onNext","onBack","isValid","enableNext","ButtonVariant","nextButtonText","hideBackButton","hideCancelButton","styles","DEFAULT_STEP_VALIDATION","sshStep","awsStep","ProvisioningWizard","props","stepIdReached","setStepIdReached","stepValidation","setStepValidation","isConfirming","setConfirming","successfulLaunch","onCustomClose","canJumpTo","imageID","isFinishedStep","defaultSteps","Wizard","prevId","prevName","debug","prevID","footer"],"sourceRoot":""}