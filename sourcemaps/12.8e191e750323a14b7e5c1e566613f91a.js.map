{"version":3,"file":"js/12.9e993e97f3d378351b91.js","mappings":"wOAgCA,QAtBY,SAACA,GACX,IAAMC,GAAUC,EAAAA,EAAAA,cACJC,GAAkBC,EAAAA,EAAAA,KAAtBC,GAYR,OAVAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,EAAaN,EAAc,kBAAkB,SAACO,GAAK,OAAKT,EAAQU,KAAK,IAADC,OAAKF,EAAMG,OAAQ,IAG7F,OAFAN,EAASO,SAAS,CAAEC,cAAeC,EAAAA,KAE5B,WACLP,SAAAA,GACF,CACF,GAAG,IAGDQ,IAAAA,cAACC,EAAAA,SAAQ,KACPD,IAAAA,cAACE,EAAAA,GAAmB,MACpBF,IAAAA,cAACG,EAAAA,EAAM,CAACC,WAAYrB,IAG1B,C,mJCdA,QARiB,WAAH,OACZiB,IAAAA,cAACK,EAAAA,GAAQ,CAACC,MAAOC,EAAAA,GAAAA,WAAK,GAADC,EAAAA,EAAAA,GAAwD,KAAKC,YAChFT,IAAAA,cAACU,EAAAA,cAAM,CAACC,UAAUC,EAAAA,EAAAA,IAAYC,OAAOC,SAASC,WAC5Cf,IAAAA,cAACgB,EAAAA,EAAG,OAEG,C,iFCRPC,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,wEAA6E,IAU9Ff,EAAS,WAAH,OACjBH,IAAAA,cAACmB,EAAAA,SAAQ,CACPC,SACEpB,IAAAA,cAACqB,EAAAA,SAAQ,KACPrB,IAAAA,cAACsB,EAAAA,QAAO,QAIZtB,IAAAA,cAACuB,EAAAA,OAAM,KACLvB,IAAAA,cAACwB,EAAAA,MAAK,CAACC,KAAK,UAAUC,UAAWT,IAEjCjB,IAAAA,cAACwB,EAAAA,MAAK,KACJxB,IAAAA,cAAC2B,EAAAA,SAAQ,CAACC,GAAG,cAGR,C,kFCxBN,SAASrB,IAAoB,QAAAsB,EAAAC,UAAAC,OAAZC,EAAU,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAVF,EAAUE,GAAAJ,UAAAI,GAEhC,OADW3C,EAAAA,EAAAA,IAAY,CAAC,EAAG,CAAC4C,KAAmBC,EAAAA,EAAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAAW1C,OAAKqC,GAE3H,C","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = (props) => {\n  const history = useHistory();\n  const { on: onChromeEvent } = useChrome();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    const unregister = onChromeEvent('APP_NAVIGATION', (event) => history.push(`/${event.navId}`));\n    registry.register({ notifications: notificationsReducer });\n\n    return () => {\n      unregister?.();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n  <Provider store={init(...(process.env.NODE_ENV !== 'production' ? [logger] : [])).getStore()}>\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App />\n    </Router>\n  </Provider>\n);\n\nexport default AppEntry;\n","import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst SamplePage = lazy(() => import(/* webpackChunkName: \"SamplePage\" */ './Routes/SamplePage/SamplePage'));\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route path=\"/sample\" component={SamplePage} />\n      {/* Finally, catch all unmatched routes */}\n      <Route>\n        <Redirect to=\"/sample\" />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [promiseMiddleware, notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }), ...middleware]);\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n"],"names":["props","history","useHistory","onChromeEvent","useChrome","on","useEffect","registry","getRegistry","unregister","event","push","concat","navId","register","notifications","notificationsReducer","React","Fragment","NotificationsPortal","Routes","childProps","Provider","store","init","_toConsumableArray","getStore","Router","basename","getBaseName","window","location","pathname","App","SamplePage","lazy","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","component","Redirect","to","_len","arguments","length","middleware","Array","_key","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"sourceRoot":""}