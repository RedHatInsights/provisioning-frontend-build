{"version":3,"file":"js/195.e2c452dc99d426e166f7.js","mappings":"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","sources":["webpack:///./src/Components/Common/WizardContext/initialState.js","webpack:///./src/Components/Common/WizardContext/index.js","webpack:///./src/Components/Common/Query/index.js","webpack:///./src/Components/ConfirmModal/index.js","webpack:///./src/Components/Common/helpers.js","webpack:///./src/API/queryKeys.js","webpack:///./src/API/helpers.js","webpack:///./src/API/index.js","webpack:///./src/Components/SourcesSelect/index.js","webpack:///./src/Components/InstanceCounter/index.js","webpack:///./src/Components/InstanceCounter/constants.js","webpack:///./src/Components/InstanceTypesSelect/index.js","webpack:///./src/Components/RegionsSelect/index.js","webpack:///./src/Components/TemplateSelect/index.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/aws.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/gcp.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/azure.js","webpack:///./src/Components/ProvisioningWizard/steps/AccountCustomizations/index.js","webpack:///./src/Components/ProvisioningWizard/steps/ReservationProgress/constants.js","webpack:///./src/Components/ProvisioningWizard/steps/ReservationProgress/helpers.js","webpack:///./src/Components/LaunchDescriptionList/index.js","webpack:///./src/Components/ProvisioningWizard/steps/ReviewDetails/index.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/PubkeySelect.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/NewKeyForm.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/index.js","webpack:///./src/Components/Common/Hooks/useInterval.js","webpack:///./src/Components/Common/instanceHelpers.js","webpack:///./src/Components/InstancesTable/index.js","webpack:///./src/Components/InstancesTable/helpers.js","webpack:///./src/Components/ProvisioningWizard/steps/ReservationProgress/index.js","webpack:///./src/Components/ProvisioningWizard/steps/index.js","webpack:///./src/Components/ProvisioningWizard/CustomFooter.js","webpack:///./src/Components/ProvisioningWizard/index.js","webpack:///./src/constants.js"],"sourcesContent":["const initialWizardContext = {\n  chosenSource: undefined,\n  chosenNumOfInstances: 1,\n  chosenInstanceType: undefined,\n  uploadedKey: false,\n  chosenRegion: undefined,\n  chosenImageID: undefined,\n  sshPublicName: '',\n  sshPublicKey: '',\n  chosenSshKeyId: undefined,\n  chosenSshKeyName: null,\n  provider: undefined,\n};\n\nexport default initialWizardContext;\n","import { useState } from 'react';\nimport { createContainer } from 'react-tracked';\nimport initialWizardContext from './initialState';\n\nconst useSharedState = (values) => useState({ ...initialWizardContext, ...values });\n\nexport const { Provider: WizardProvider, useTracked: useWizardContext } = createContainer(useSharedState);\n","/* eslint-disable react/prop-types */\n\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient();\n\nconst APIProvider = ({ children }) => <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n\nexport default APIProvider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nconst ConfirmModal = ({ isOpen, onConfirm, onCancel }) => (\n  <Modal\n    ouiaId=\"app-confirm-modal\"\n    id=\"app-confirm-modal\"\n    aria-label=\"confirm cancel of launch modal\"\n    variant={ModalVariant.small}\n    title=\"Exit instance launching?\"\n    isOpen={isOpen}\n    onClose={onCancel}\n    actions={[\n      <Button key=\"exit\" variant=\"primary\" onClick={onConfirm} ouiaId=\"btn-exit-confirm\">\n        Exit\n      </Button>,\n      <Button key=\"stay\" variant=\"link\" onClick={onCancel}>\n        Stay\n      </Button>,\n    ]}\n    titleIconVariant=\"warning\"\n  >\n    All inputs will be discarded.\n  </Modal>\n);\n\nConfirmModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default ConfirmModal;\n","import { AWS_PROVIDER, AZURE_PROVIDER, GCP_PROVIDER } from './constants';\n\nexport const defaultRegionByProvider = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return 'us-east-1';\n    case GCP_PROVIDER:\n      return 'us-central1-a';\n    case AZURE_PROVIDER:\n      return 'eastus';\n    default:\n      throw new Error(`Unrecognized provider was entered: ${provider}`);\n  }\n};\n\nexport const humanizeProvider = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return 'Amazon cloud';\n    case AZURE_PROVIDER:\n      return 'Azure';\n    case GCP_PROVIDER:\n      return 'Google cloud';\n    default:\n      throw new Error(`Unrecognized provider was entered: ${provider}`);\n  }\n};\n","export const SOURCES_QUERY_KEY = 'sources';\nexport const PUBKEYS_QUERY_KEY = 'pubkeys';\nexport const instanceTypesQueryKeys = (region) => ['instanceTypes', region];\nexport const IMAGE_REGIONS_KEY = 'image_region';\n","export const provisioningUrl = (path) => `/api/provisioning/v1/${path}`;\nexport const imageBuilderURL = (path) => `/api/image-builder/v1/${path}`;\n","import axios from 'axios';\nimport { AZURE_PROVIDER } from '../constants';\nimport { imageBuilderURL, provisioningUrl } from './helpers';\n\nconst typesUrlForProvider = (provider, region) => {\n  switch (provider) {\n    case AZURE_PROVIDER:\n      return provisioningUrl(`instance_types/${provider}?region=${region}&zone=1`);\n    default:\n      return provisioningUrl(`instance_types/${provider}?region=${region}`);\n  }\n};\n\nexport const fetchSourcesList = async (provider) => {\n  const { data } = await axios.get(provisioningUrl(`sources?provider=${provider}`));\n  return data;\n};\n\nexport const fetchPubkeysList = async () => {\n  const { data } = await axios.get(provisioningUrl('pubkeys'));\n  return data;\n};\n\nexport const fetchInstanceTypesList = async (region, provider) => {\n  const url = typesUrlForProvider(provider, region);\n  const { data } = await axios.get(url);\n  return data;\n};\n\nexport const createReservation = (provider) => async (params) => {\n  return axios.post(provisioningUrl(`reservations/${provider}`), params);\n};\n\nexport const createNewPublicKey = async (params) => {\n  return axios.post(provisioningUrl('pubkeys'), params);\n};\n\nexport const fetchReservation = async (id) => {\n  const { data } = await axios.get(provisioningUrl(`reservations/${id}`));\n  return data;\n};\n\nexport const fetchImageClones = async (composeID) => {\n  const { data } = await axios.get(imageBuilderURL(`composes/${composeID}/clones`));\n  return data;\n};\n\nexport const fetchImageCloneStatus = async (cloneID) => {\n  const { data } = await axios.get(imageBuilderURL(`clones/${cloneID}`));\n  return data;\n};\n\nexport const fetchReservationByProvider = async (reservationID, provider) => {\n  const { data } = await axios.get(provisioningUrl(`reservations/${provider}/${reservationID}`));\n  return data;\n};\n\nexport const fetchLaunchTemplates = async (sourceID, region) => {\n  const { data } = await axios.get(provisioningUrl(`/sources/${sourceID}/launch_templates?region=${region}`));\n  return data;\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\nimport { IB_SOURCE_PROVIDERS } from '../Common/constants';\n\nconst SourcesSelect = ({ setValidation, imageSourceID }) => {\n  const [{ provider, chosenSource }, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState(null);\n  const selectObject = (id, name) => ({\n    id,\n    toString: () => name,\n    compareTo: (other) => other.id === id,\n  });\n  const {\n    error,\n    isLoading,\n    data: sources,\n  } = useQuery([SOURCES_QUERY_KEY, provider], () => fetchSourcesList(provider), {\n    enabled: !!provider,\n    onSuccess: (data) => {\n      const id = chosenSource;\n\n      if (IB_SOURCE_PROVIDERS.includes(provider) && imageSourceID) {\n        setSelected(selectObject(imageSourceID, data.find((source) => source.id === imageSourceID).name));\n        setWizardContext((prevState) => ({\n          ...prevState,\n          chosenSource: imageSourceID,\n        }));\n        setValidation('success');\n      } else if (!id) {\n        return;\n      } else {\n        setSelected(selectObject(id, data.find((source) => source.id === id).name));\n      }\n    },\n  });\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      setSelected(null);\n      setWizardContext((prevState) => ({ ...prevState, chosenSource: null }));\n      setValidation('error');\n    } else {\n      setSelected(selection);\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenSource: selection.id,\n      }));\n      setValidation('success');\n    }\n    setIsOpen(false);\n  };\n\n  const selectItemsMapper = () =>\n    sources.map(({ name, id }) => <SelectOption aria-label=\"Source account\" key={id} value={selectObject(id, name)}></SelectOption>);\n\n  if (error) {\n    console.warn('Failed to fetch sources list');\n    return (\n      <>\n        <Alert ouiaId=\"select_account_alert\" variant=\"warning\" isInline title=\"There are problems fetching accounts\" />\n        <Select ouiaId=\"select_account_empty\" isDisabled placeholderText=\"No accounts found\" aria-label=\"Select account\" />\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading accounts\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_account\"\n      isOpen={isOpen}\n      onToggle={(openState) => setIsOpen(openState)}\n      selections={selected}\n      isDisabled={!!imageSourceID}\n      onSelect={onSelect}\n      placeholderText=\"Select account\"\n      aria-label=\"Select account\"\n    >\n      {sources && selectItemsMapper()}\n    </Select>\n  );\n};\n\nSourcesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n  imageSourceID: PropTypes.number,\n};\n\nexport default SourcesSelect;\n","import React from 'react';\nimport { NumberInput } from '@patternfly/react-core';\nimport { useWizardContext } from '../Common/WizardContext';\nimport { MAX_INSTANCES, MIN_INSTANCES } from './constants';\n\nconst InstanceCounter = () => {\n  const [{ chosenNumOfInstances }, setWizardContext] = useWizardContext();\n\n  const onMinus = () => {\n    const newValue = chosenNumOfInstances - 1;\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  const onChange = (event) => {\n    let input = Math.floor(Number(event.target.value));\n    if (input > MAX_INSTANCES) {\n      input = MAX_INSTANCES;\n    }\n    if (input < MIN_INSTANCES) {\n      input = MIN_INSTANCES;\n    }\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: input,\n    }));\n  };\n\n  const onPlus = () => {\n    const newValue = chosenNumOfInstances + 1;\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenNumOfInstances: newValue,\n    }));\n  };\n\n  return (\n    <NumberInput\n      max={MAX_INSTANCES}\n      min={MIN_INSTANCES}\n      value={chosenNumOfInstances}\n      onMinus={onMinus}\n      onChange={onChange}\n      onPlus={onPlus}\n      inputName=\"instances\"\n      inputAriaLabel=\"number of instances\"\n      minusBtnAriaLabel=\"instances-minus\"\n      plusBtnAriaLabel=\"instances-plus\"\n    />\n  );\n};\nexport default InstanceCounter;\n","export const MAX_INSTANCES = 45;\nexport const MIN_INSTANCES = 1;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Spinner, Select, SelectOption, TextInput } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { fetchInstanceTypesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\n\nconst OPTIONS_PER_SCREEN = 5;\nconst sanitizeSearchValue = (str) => str.replace(/\\\\+$/, '');\n\nconst InstanceTypesSelect = ({ setValidation, architecture }) => {\n  const [{ chosenInstanceType, chosenRegion, chosenSource, provider }, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [numOptions, setNumOptions] = React.useState(OPTIONS_PER_SCREEN);\n  const [filteredTypes, setFilteredTypes] = React.useState(null);\n  const [prevSearch, setPrevSearch] = React.useState('');\n  const [isTypeSupported, setTypeSupported] = React.useState(true);\n  const {\n    isLoading,\n    error,\n    data: instanceTypes,\n  } = useQuery(['instanceTypes', chosenRegion], () => fetchInstanceTypesList(chosenRegion, provider), {\n    select: (types) => types.filter((type) => type.architecture === architecture),\n    enabled: !!chosenRegion && !!chosenSource,\n  });\n\n  if (!chosenSource || chosenSource === '') {\n    return (\n      <>\n        <TextInput\n          ouiaId=\"instance_type_readonly\"\n          className=\"pf-c-form-control\"\n          readOnly\n          type=\"text\"\n          value=\"Select account to load instances\"\n          id=\"input-readonly\"\n          aria-label=\"Select instance type - disabled\"\n        />\n      </>\n    );\n  }\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      const chosenInstanceType = instanceTypes.find((instanceType) => selection === instanceType.name);\n      setTypeSupported(chosenInstanceType.supported);\n      setWizardContext((prevState) => ({\n        ...prevState,\n        chosenInstanceType: selection,\n      }));\n      setValidation('success');\n      setIsOpen(false);\n    }\n  };\n\n  const clearSelection = () => {\n    setValidation('error');\n    setTypeSupported(true);\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenInstanceType: null,\n    }));\n    setIsOpen(false);\n  };\n\n  const onFilter = (_e, inputValue) => {\n    const search = sanitizeSearchValue(inputValue);\n    if (prevSearch !== search) {\n      setNumOptions(OPTIONS_PER_SCREEN);\n      setPrevSearch(search);\n      setFilteredTypes(instanceTypes.filter((i) => i.name.includes(search)));\n    }\n  };\n\n  const selectItemsMapper = (types, limit) => {\n    if (limit < types?.length) types = types.slice(0, limit);\n    return types?.map((instanceType, index) => (\n      <SelectOption\n        aria-label={`Instance Type ${instanceType.name}`}\n        key={index}\n        description={`${instanceType.cores || 'only vCPU'} cores |\n          ${instanceType.vcpus} vCPU |\n          ${(parseFloat(instanceType.memory_mib) / 1024).toFixed(1)} GiB memory |\n          ${instanceType.storage_gb > 0 ? instanceType.storage_gb + ' GB storage | ' : 'EBS only | '}\n          ${instanceType.architecture}`}\n        value={instanceType.name}\n      />\n    ));\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (error) {\n    console.warn('Failed to fetch instance types list');\n    return (\n      <>\n        <Alert ouiaId=\"instance_type_alert\" variant=\"warning\" isInline title=\"There are problems fetching instance types\" />\n        <Select ouiaId=\"instance_type_empty\" isDisabled placeholderText=\"No instance types found\" toggleAriaLabel=\"Select instance type\" />\n      </>\n    );\n  }\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Contents of the small example\" />;\n  }\n\n  const types = filteredTypes || instanceTypes;\n\n  return (\n    <>\n      {!isTypeSupported && (\n        <Alert\n          data-testid=\"unsupported_type_alert\"\n          ouiaId=\"instance_type_not_supported_alert\"\n          variant=\"warning\"\n          isInline\n          title=\"Warning: The selected specification does not meet minimum requirements for this image.\"\n        />\n      )}\n      <Select\n        ouiaId=\"select_instance_type\"\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Selected instance type\"\n        toggleAriaLabel=\"Select instance type\"\n        placeholderText=\"Select instance type\"\n        maxHeight=\"450px\"\n        isOpen={isOpen}\n        selections={chosenInstanceType}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onFilter={onFilter}\n        {...(numOptions < types?.length && {\n          loadingVariant: {\n            text: `View more (${types.length - numOptions})`,\n            onClick: () => setNumOptions(numOptions + OPTIONS_PER_SCREEN),\n          },\n        })}\n      >\n        {selectItemsMapper(types, numOptions)}\n      </Select>\n    </>\n  );\n};\n\nInstanceTypesSelect.propTypes = {\n  setValidation: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n};\n\nexport default InstanceTypesSelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery, useQueries } from 'react-query';\n\nimport { AWS_PROVIDER, AZURE_PROVIDER, GCP_PROVIDER } from '../../constants';\nimport { IMAGE_REGIONS_KEY } from '../../API/queryKeys';\nimport { fetchImageClones, fetchImageCloneStatus } from '../../API';\nimport { defaultRegionByProvider } from '../Common/helpers';\n\nconst RegionsSelect = ({ provider, currentRegion, composeID, onChange }) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const {\n    isError,\n    isLoading,\n    data: clonedImages,\n  } = useQuery([IMAGE_REGIONS_KEY, composeID], () => fetchImageClones(composeID), {\n    select: (images) => images.data?.map((image) => ({ id: image.id, region: image.request.region })),\n  });\n\n  const clonesStatusQueries = useQueries(\n    clonedImages?.map((clonedImage) => ({ queryKey: [IMAGE_REGIONS_KEY, clonedImage.id], queryFn: () => fetchImageCloneStatus(clonedImage.id) })) ||\n      []\n  );\n  const isCloneStatusLoading = clonesStatusQueries.some((clone) => clone.isLoading);\n  const defaultRegion = { region: provider && defaultRegionByProvider(provider), id: composeID };\n  const images = [defaultRegion];\n  // filter successful clones images\n  if (clonesStatusQueries.length && clonesStatusQueries.every((cloneQuery) => cloneQuery.isLoading === false)) {\n    const clonesStatus = clonesStatusQueries?.map((query) => query?.data);\n    const filteredCloned = clonedImages?.filter((_, index) => clonesStatus[index].status === 'success');\n    images.push(...filteredCloned);\n  }\n\n  const onSelect = (_, selection) => {\n    onChange({ region: selection, imageID: images.find((image) => image.region === selection)?.id });\n    setIsOpen(false);\n  };\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  if (isError) {\n    return (\n      <>\n        <Alert ouiaId=\"regions_alert\" variant=\"warning\" isInline title=\"There are problems fetching image's regions\" />\n        <Select ouiaId=\"regions_empty\" isDisabled placeholderText=\"No regions have been found\" />\n      </>\n    );\n  }\n\n  if (isLoading || isCloneStatusLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"loading available regions\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_regions\"\n      variant=\"typeahead\"\n      aria-label=\"Select region\"\n      label=\"Select region\"\n      maxHeight=\"450px\"\n      isOpen={isOpen}\n      selections={currentRegion}\n      onToggle={onToggle}\n      onSelect={onSelect}\n      isDisabled={(clonedImages?.length || 0) <= 1}\n    >\n      {images.map(({ id, region }) => (\n        <SelectOption aria-label=\"Region item\" key={id} value={region} />\n      ))}\n    </Select>\n  );\n};\n\nRegionsSelect.propTypes = {\n  provider: PropTypes.oneOf([AWS_PROVIDER, AZURE_PROVIDER, GCP_PROVIDER]).isRequired,\n  composeID: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  currentRegion: PropTypes.string,\n};\n\nexport default RegionsSelect;\n","import React from 'react';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { useWizardContext } from '../Common/WizardContext';\nimport { fetchLaunchTemplates } from '../../API';\n\nconst TemplatesSelect = () => {\n  const [{ chosenSource, chosenRegion, chosenTemplate }, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const {\n    error,\n    isLoading,\n    data: templates,\n  } = useQuery(['Templates', `${chosenRegion}-${chosenSource}`], () => fetchLaunchTemplates(chosenSource, chosenRegion), {\n    enabled: !!chosenSource && !!chosenRegion,\n  });\n\n  const onSelect = (_, selectedTemplate, isPlaceholder) => {\n    if (!isPlaceholder) {\n      setWizardContext((prevState) => ({ ...prevState, chosenTemplate: templates.find((template) => template.name === selectedTemplate)?.id }));\n    }\n    setIsOpen(false);\n  };\n\n  const selectItemsMapper = () => templates.map(({ name, id }) => <SelectOption aria-label=\"template option\" key={id} value={name}></SelectOption>);\n  const chosenTemplateName = chosenTemplate && templates.find((template) => template.id === chosenTemplate)?.name;\n  if (error) {\n    return (\n      <>\n        <Alert ouiaId=\"select_template_alert\" variant=\"warning\" isInline title=\"There are problems fetching templates\" />\n        <Select ouiaId=\"select_template_empty\" isDisabled placeholderText=\"No templates found\" aria-label=\"Select template\" />\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading templates\" />;\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_templates\"\n      isOpen={isOpen}\n      onToggle={(openState) => setIsOpen(openState)}\n      selections={chosenTemplateName}\n      onSelect={onSelect}\n      placeholderText=\"Select templates\"\n      aria-label=\"Select templates\"\n    >\n      {templates && selectItemsMapper()}\n    </Select>\n  );\n};\n\nexport default TemplatesSelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Text, Button } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nimport { AWS_PROVIDER } from '../../../../constants';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport TemplatesSelect from '../../../TemplateSelect';\n\nconst AccountCustomizationsAWS = ({ setStepValidated, architecture, composeID, imageSourceID }) => {\n  const [{ chosenSource, chosenRegion, chosenInstanceType }, setWizardContext] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: chosenSource ? 'success' : 'default',\n    types: chosenInstanceType ? 'success' : 'default',\n  });\n  const templateFlag = useFlag('provisioning.aws.templates');\n\n  const onRegionChange = ({ region, imageID }) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenRegion: region,\n      chosenImageID: imageID,\n    }));\n  };\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  return (\n    <Form>\n      <Title ouiaId=\"account_custom_title\" headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | Amazon\n      </Title>\n      <Text ouiaId=\"account_custom_description\">\n        Configure instances that will run on your AWS. All the instances will launch with the same configuration.\n      </Text>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"aws-select-source\"\n      >\n        <SourcesSelect\n          imageSourceID={imageSourceID}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select region\"\n        isRequired\n        fieldId=\"aws-select-region\"\n        labelIcon={\n          <Popover bodyContent=\"Select available geographical region\">\n            <Button\n              ouiaId=\"region_help\"\n              type=\"button\"\n              aria-label=\"More info for regions field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-region\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <RegionsSelect provider={AWS_PROVIDER} onChange={onRegionChange} composeID={composeID} currentRegion={chosenRegion} />\n      </FormGroup>\n      {templateFlag && (\n        <FormGroup\n          label=\"Select template\"\n          fieldId=\"aws-select-template\"\n          labelIcon={\n            <Popover\n              bodyContent={\n                <span>\n                  Launch templates contains the configuration information to launch an instance. Note that instance type and public SSH key will be\n                  still required and will override template values. For further information and for creating launch templates{' '}\n                  <a rel=\"noreferrer\" target=\"_blank\" href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html\">\n                    click here\n                  </a>\n                </span>\n              }\n            >\n              <Button\n                ouiaId=\"template_help\"\n                type=\"button\"\n                aria-label=\"template field info\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"aws-select-template\"\n                className=\"pf-c-form__group-label-help\"\n                variant=\"plain\"\n              >\n                <HelpIcon noVerticalAlign />\n              </Button>\n            </Popover>\n          }\n        >\n          <TemplatesSelect />\n        </FormGroup>\n      )}\n      <FormGroup\n        label=\"Select instance type\"\n        isRequired\n        helperTextInvalid=\"Please pick a value\"\n        fieldId=\"aws-select-instance-types\"\n        labelIcon={\n          <Popover\n            bodyContent=\"Select AWS instance type based on your computing,\n           memory, networking, or storage needs\"\n          >\n            <Button\n              ouiaId=\"instance_type_help\"\n              type=\"button\"\n              aria-label=\"More info for instance types field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-types\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          architecture={architecture}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"aws-select-instance-counter\"\n        labelIcon={\n          <Popover bodyContent=\"Specify the number of AWS instances to be launched\">\n            <Button\n              ouiaId=\"instance_count_help\"\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"aws-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceCounter />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsAWS.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n  composeID: PropTypes.string.isRequired,\n  imageSourceID: PropTypes.number.isRequired,\n};\n\nexport default AccountCustomizationsAWS;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Text, Button } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\n\nimport { GCP_PROVIDER } from '../../../../constants';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst AccountCustomizationsGCP = ({ setStepValidated, architecture, composeID }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: wizardContext.chosenSource ? 'success' : 'default',\n    types: wizardContext.chosenInstanceType ? 'success' : 'default',\n  });\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  const onRegionChange = ({ region, imageID }) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenRegion: region,\n      chosenImageID: imageID,\n    }));\n  };\n\n  return (\n    <Form>\n      <Title ouiaId=\"account_custom_title\" headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | Google cloud\n      </Title>\n      <Text ouiaId=\"account_custom_description\">\n        Configure instances that will run on your Google cloud. All the instances will launch with the same configuration.\n      </Text>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"gcp-select-source\"\n      >\n        <SourcesSelect\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select zone\"\n        isRequired\n        fieldId=\"gcp-select-zone\"\n        labelIcon={\n          <Popover headerContent={<div>GCP zones</div>}>\n            <Button\n              ouiaId=\"zone_help\"\n              type=\"button\"\n              aria-label=\"More info for zones field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"gcp-select-zone\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <RegionsSelect provider={GCP_PROVIDER} onChange={onRegionChange} composeID={composeID} currentRegion={wizardContext.chosenRegion} />\n      </FormGroup>\n      <FormGroup\n        label=\"Select machine type\"\n        isRequired\n        helperTextInvalid=\"Please pick a value\"\n        fieldId=\"gcp-select-machine-types\"\n        labelIcon={\n          <Popover headerContent={<div>GCP machine types</div>}>\n            <Button\n              ouiaId=\"machine_type_help\"\n              type=\"button\"\n              aria-label=\"More info for machine types field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"gcp-select-machine-types\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          architecture={architecture}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"gcp-select-instance-counter\"\n        labelIcon={\n          <Popover headerContent={<div>Number of GCP instances</div>}>\n            <Button\n              ouiaId=\"instance_count_help\"\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"gcp-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceCounter />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsGCP.propTypes = {\n  architecture: PropTypes.string.isRequired,\n  composeID: PropTypes.string.isRequired,\n  setStepValidated: PropTypes.func.isRequired,\n};\nexport default AccountCustomizationsGCP;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Popover, Title, Text, Button } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\n\nimport { AZURE_PROVIDER } from '../../../../constants';\nimport SourcesSelect from '../../../SourcesSelect';\nimport InstanceCounter from '../../../InstanceCounter';\nimport InstanceTypesSelect from '../../../InstanceTypesSelect';\nimport RegionsSelect from '../../../RegionsSelect';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst AccountCustomizationsAzure = ({ setStepValidated, architecture, composeID }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [validations, setValidation] = React.useState({\n    sources: wizardContext.chosenSource ? 'success' : 'default',\n    types: wizardContext.chosenInstanceType ? 'success' : 'default',\n  });\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  const onRegionChange = ({ region, imageID }) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenRegion: region,\n      chosenImageID: imageID,\n    }));\n  };\n\n  return (\n    <Form>\n      <Title ouiaId=\"account_custom_title\" headingLevel=\"h1\" size=\"xl\">\n        Account and customizations | Azure\n      </Title>\n      <Text ouiaId=\"account_custom_description\">\n        Configure instances that will run on your Azure cloud. All the instances will launch with the same configuration.\n      </Text>\n      <FormGroup\n        label=\"Select account\"\n        validated={validations.sources}\n        helperTextInvalid=\"Please pick a value\"\n        isRequired\n        fieldId=\"azure-select-source\"\n      >\n        <SourcesSelect\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              sources: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Select location\"\n        isRequired\n        fieldId=\"azure-select-location\"\n        labelIcon={\n          <Popover headerContent={<div>Azure locations</div>}>\n            <Button\n              ouiaId=\"location_help\"\n              type=\"button\"\n              aria-label=\"More info for location field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"azure-select-location\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <RegionsSelect provider={AZURE_PROVIDER} currentRegion={wizardContext.chosenRegion} onChange={onRegionChange} composeID={composeID} />\n      </FormGroup>\n      <FormGroup\n        label=\"Select instance size\"\n        isRequired\n        helperTextInvalid=\"Please pick a value\"\n        fieldId=\"azure-select-instance-size\"\n        labelIcon={\n          <Popover headerContent={<div>Azure instance sizes</div>}>\n            <Button\n              ouiaId=\"machine_type_help\"\n              type=\"button\"\n              aria-label=\"More info for instance size field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"azure-select-instance-size\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceTypesSelect\n          architecture={architecture}\n          setValidation={(validation) =>\n            setValidation((prevValidations) => ({\n              ...prevValidations,\n              types: validation,\n            }))\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Count\"\n        isRequired\n        fieldId=\"azure-select-instance-counter\"\n        labelIcon={\n          <Popover headerContent={<div>Number of Azure instances</div>}>\n            <Button\n              ouiaId=\"instance_count_help\"\n              type=\"button\"\n              aria-label=\"More info for instance counter field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"azure-select-instance-counter\"\n              className=\"pf-c-form__group-label-help\"\n              variant=\"plain\"\n            >\n              <HelpIcon noVerticalAlign />\n            </Button>\n          </Popover>\n        }\n      >\n        <InstanceCounter />\n      </FormGroup>\n    </Form>\n  );\n};\n\nAccountCustomizationsAzure.propTypes = {\n  architecture: PropTypes.string.isRequired,\n  composeID: PropTypes.string.isRequired,\n  setStepValidated: PropTypes.func.isRequired,\n};\nexport default AccountCustomizationsAzure;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { AWS_PROVIDER, AZURE_PROVIDER, GCP_PROVIDER } from '../../../Common/constants';\nimport { defaultRegionByProvider } from '../../../Common/helpers';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport AWS from './aws';\nimport GCP from './gcp';\nimport Azure from './azure';\n\nconst AccountCustomizations = ({ setStepValidated, architecture, composeID, provider, imageSourceID }) => {\n  const [, setWizardContext] = useWizardContext();\n\n  React.useEffect(() => {\n    provider &&\n      setWizardContext((prevState) => ({\n        ...prevState,\n        provider,\n        chosenRegion: defaultRegionByProvider(provider),\n        chosenImageID: composeID,\n      }));\n  }, [provider, setWizardContext]);\n\n  switch (provider) {\n    case AWS_PROVIDER:\n      return <AWS setStepValidated={setStepValidated} architecture={architecture} composeID={composeID} imageSourceID={imageSourceID} />;\n    case AZURE_PROVIDER:\n      return <Azure setStepValidated={setStepValidated} architecture={architecture} composeID={composeID} />;\n    case GCP_PROVIDER:\n      return <GCP setStepValidated={setStepValidated} architecture={architecture} composeID={composeID} />;\n    default:\n      throw new Error(`Can not render AccountCustomizations for unrecognized provider: ${provider}`);\n  }\n};\n\nAccountCustomizations.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n  architecture: PropTypes.string.isRequired,\n  composeID: PropTypes.string.isRequired,\n  provider: PropTypes.oneOf([AWS_PROVIDER, AZURE_PROVIDER, GCP_PROVIDER]),\n  imageSourceID: PropTypes.number,\n};\n\nexport default AccountCustomizations;\n","import { AWS_PROVIDER, AZURE_PROVIDER } from '../../../../constants';\n\nexport const PF_SUCCESS_100 = '#3E8635';\nexport const PF_DANGER_100 = '#C9190B';\n\nexport const POLLING_BACKOFF_INTERVAL = [\n  500, 600, 700, 800, 900, 1000, 1200, 1400, 1600, 1800, 2000, 3000, 4000, 5000, 10000, 15000, 20000, 25000, 30000, 60000,\n];\n\nexport const AWS_STEPS = [\n  { name: 'Create reservation', description: `Submit requested data` },\n  {\n    name: 'Transfer keys',\n    description: 'Uploading public key to AWS',\n  },\n  { name: 'Launch instance(s)', description: 'Call AWS API for launching instance(s)' },\n  { name: 'Instance description', description: 'Fetch instance(s) descriptions' },\n];\n\nexport const AZURE_STEPS = [\n  { name: 'Create reservation', description: `Submit data of requested instances` },\n  { name: 'Ensure resource group', description: 'Ensure resource group is present on Azure account' },\n  { name: 'Launch instance(s)', description: 'Launch defined instance(s) on Azure' },\n];\n\nexport const GCP_STEPS = [\n  { name: 'Create reservation', description: `Submit requested data` },\n  { name: 'Launch instance(s)', description: 'Call Google API' },\n];\n\nexport const SSH_STEP = [{ name: 'New SSH key', description: 'Creating new SSH public key resource' }];\n\nexport const PROVIDERS_INSTANCES_SUPPORT = [AWS_PROVIDER, AZURE_PROVIDER];\n","import { AWS_PROVIDER, AZURE_PROVIDER, GCP_PROVIDER } from '../../../Common/constants';\nimport { AWS_STEPS, AZURE_STEPS, GCP_STEPS } from './constants';\n\nexport const mapCurrentVariant = (step, currentStep, currentError, currentWarning) => {\n  if (step < currentStep) return 'success';\n  if (step === currentStep && currentError) return 'danger';\n  if (step === currentStep && currentWarning) return 'warning';\n  if (step === currentStep) return 'info';\n  if (step > currentStep) return 'pending';\n};\n\nexport const stepsByProvider = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return AWS_STEPS;\n    case AZURE_PROVIDER:\n      return AZURE_STEPS;\n    case GCP_PROVIDER:\n      return GCP_STEPS;\n    default:\n      throw new Error(`Steps requested for unknown provider: ${provider}`);\n  }\n};\n\nexport const instanceType = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return 'instance_type';\n    case AZURE_PROVIDER:\n      return 'instance_size';\n    case GCP_PROVIDER:\n      return 'machine_type';\n    default:\n      return 'instance_type';\n  }\n};\n\nexport const region = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return 'region';\n    case GCP_PROVIDER:\n      return 'zone';\n    default:\n      return 'region';\n  }\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ExpandableSection, DescriptionList, DescriptionListTerm, DescriptionListGroup, DescriptionListDescription } from '@patternfly/react-core';\n\nimport { useQuery } from 'react-query';\nimport { SOURCES_QUERY_KEY } from '../../API/queryKeys';\nimport { fetchSourcesList } from '../../API';\nimport { useWizardContext } from '../Common/WizardContext';\nimport { instanceType, region } from '../ProvisioningWizard/steps/ReservationProgress/helpers';\n\nconst LaunchDescriptionList = ({ imageName }) => {\n  const [{ chosenRegion, chosenSshKeyName, uploadedKey, chosenInstanceType, chosenNumOfInstances, chosenSource, sshPublicName, provider }] =\n    useWizardContext();\n  const { data: sources } = useQuery([SOURCES_QUERY_KEY, provider], () => fetchSourcesList(provider));\n  const [isExpanded, setIsExpanded] = React.useState(true);\n  const onToggle = (isExpanded) => {\n    setIsExpanded(isExpanded);\n  };\n\n  const getChosenSourceName = () => sources?.find((source) => source.id === chosenSource).name;\n  const regionLabel = region(provider).charAt(0).toUpperCase() + region(provider).slice(1);\n  const providerInstanceType = instanceType(provider).replace('_', ' ');\n  const instanceTypeLabel = providerInstanceType.charAt(0).toUpperCase() + providerInstanceType.slice(1);\n\n  return (\n    <ExpandableSection toggleText={provider} onToggle={onToggle} isExpanded={isExpanded} isIndented>\n      <DescriptionList isHorizontal>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Image</DescriptionListTerm>\n          <DescriptionListDescription>{imageName}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Account</DescriptionListTerm>\n          <DescriptionListDescription>{getChosenSourceName()}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>{regionLabel}</DescriptionListTerm>\n          <DescriptionListDescription>{chosenRegion}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>{instanceTypeLabel}</DescriptionListTerm>\n          <DescriptionListDescription>{chosenInstanceType}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Count</DescriptionListTerm>\n          <DescriptionListDescription>{chosenNumOfInstances}</DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>{uploadedKey ? 'New SSH key' : 'Existing SSH key'}</DescriptionListTerm>\n          <DescriptionListDescription>{uploadedKey ? sshPublicName : chosenSshKeyName}</DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n    </ExpandableSection>\n  );\n};\n\nLaunchDescriptionList.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default LaunchDescriptionList;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title, Text } from '@patternfly/react-core';\nimport LaunchDescriptionList from '../../../LaunchDescriptionList';\n\nconst ReviewDetails = ({ imageName }) => {\n  return (\n    <div className=\"pf-c-form\">\n      <Title ouiaId=\"review_details_title\" headingLevel=\"h1\">\n        Review details\n      </Title>\n      <Text ouiaId=\"review_details_description\">\n        Review the information below and then click <b>Launch</b> to finish the process.\n      </Text>\n\n      <LaunchDescriptionList imageName={imageName} />\n    </div>\n  );\n};\n\nReviewDetails.propTypes = {\n  imageName: PropTypes.string.isRequired,\n};\nexport default ReviewDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Select, SelectOption, Spinner } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\nconst selectOptionObj = (id, name) => ({\n  id: id,\n  toString: () => name,\n  compareTo: (other) => other.id == id,\n});\n\nconst PubkeySelect = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selection, setSelection] = React.useState(\n    wizardContext.chosenSshKeyId ? selectOptionObj(wizardContext.chosenSshKeyId, wizardContext.chosenSshKeyName) : null\n  );\n\n  React.useEffect(() => {\n    setStepValidated(!!selection);\n  }, [selection]);\n\n  const { isLoading, isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n\n  const onSelect = (event, value) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenSshKeyId: value.id,\n      chosenSshKeyName: value.toString(),\n    }));\n    setSelection(value);\n    setIsOpen(false);\n  };\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading saved SSH keys\" />;\n  }\n\n  if (isError || (pubkeys && pubkeys.length < 1)) {\n    return (\n      <>\n        {isError && <Alert ouiaId=\"pubkey_alert\" variant=\"warning\" isInline title=\"There are problems fetching saved SSH keys\" />}\n        <Select ouiaId=\"pubkey_empty\" isDisabled placeholderText=\"No SSH key found\" aria-label=\"Select public key\" />\n      </>\n    );\n  }\n\n  return (\n    <Select\n      ouiaId=\"select_pubkey\"\n      onToggle={(isExpanded) => setIsOpen(isExpanded)}\n      onSelect={onSelect}\n      isOpen={isOpen}\n      selections={selection}\n      placeholderText=\"Select public key...\"\n      aria-label=\"Select public key\"\n    >\n      {pubkeys.map(({ id, name }) => (\n        <SelectOption aria-label={`Public key ${name}`} key={id} value={selectOptionObj(id, name)} />\n      ))}\n    </Select>\n  );\n};\n\nPubkeySelect.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PubkeySelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormGroup, TextInput, FileUpload } from '@patternfly/react-core';\nimport { useWizardContext } from '../../../Common/WizardContext';\n\n// This is a simple regex format for public ssh key\nconst PUBLIC_KEY_FORMAT = '^(ssh|ecdsa)';\nconst validatePublicKey = (ssh) => {\n  const regex = new RegExp(PUBLIC_KEY_FORMAT);\n  return regex.test(ssh);\n};\n\nconst NewSSHKeyForm = ({ setStepValidated }) => {\n  const [{ sshPublicName, sshPublicKey }, setWizardContext] = useWizardContext();\n  const [isLoading, setIsLoading] = React.useState();\n  const [validations, setValidation] = React.useState({\n    sshKeyBody: validatePublicKey(sshPublicKey) ? 'success' : 'default',\n    sshKeyName: sshPublicName ? 'success' : 'default',\n  });\n  const [keyName, setName] = React.useState(sshPublicName);\n  const [publicKey, setPublicKey] = React.useState(sshPublicKey);\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  const updateValidation = (inputKey, value) =>\n    setValidation((prevValidations) => ({\n      ...prevValidations,\n      [inputKey]: value,\n    }));\n\n  const handleNameChange = (value) => {\n    setWizardContext((prevState) => ({ ...prevState, sshPublicName: value }));\n    setName(value);\n  };\n  const handleNameBlur = () => {\n    if (keyName.length === 0) {\n      updateValidation('sshKeyName', 'error');\n      return;\n    }\n    updateValidation('sshKeyName', 'success');\n  };\n  const handleSSHKeyChange = (value) => {\n    if (validatePublicKey(value)) {\n      setWizardContext((prevState) => ({\n        ...prevState,\n        sshPublicKey: value,\n      }));\n      setPublicKey(value);\n      updateValidation('sshKeyBody', 'success');\n    } else {\n      updateValidation('sshKeyBody', 'error');\n    }\n  };\n  const handleSSHKeyText = (text) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicKey: text,\n    }));\n    setPublicKey(text);\n  };\n  const handleSSHKeyTextBlur = () => {\n    if (publicKey === '') {\n      updateValidation('sshKeyBody', 'default');\n    } else {\n      updateValidation('sshKeyBody', validatePublicKey(publicKey) ? 'success' : 'error');\n    }\n  };\n\n  const handleClear = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: undefined,\n      sshPublicKey: undefined,\n    }));\n    setPublicKey('');\n    updateValidation('sshKeyBody', 'default');\n  };\n\n  const handleFileReadStarted = () => {\n    setIsLoading(true);\n  };\n\n  const handleFileReadFinished = () => {\n    setIsLoading(false);\n  };\n  const handleFileReadFailed = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: '<Failed to load the file>',\n    }));\n    updateValidation('sshKeyBody', 'error');\n  };\n\n  return (\n    <FormGroup isStack>\n      <FormGroup validated={validations.sshKeyName} helperTextInvalid=\"Name is required\" label=\"Name\" isRequired fieldId=\"ssh-name\">\n        <TextInput\n          ouiaId=\"new_pubkey_name\"\n          validated={validations.sshKeyName}\n          value={keyName}\n          id=\"public-key-name\"\n          onChange={handleNameChange}\n          onBlur={handleNameBlur}\n          type=\"text\"\n        />\n      </FormGroup>\n      <FormGroup\n        helperTextInvalid=\"Must be SSH public key format\"\n        label=\"SSH public key\"\n        isRequired\n        fieldId=\"ssh-file\"\n        validated={validations.sshKeyBody}\n      >\n        <FileUpload\n          // ouia not supported yet?\n          ouiaId=\"new_pubkey_file\"\n          id=\"public-key-value\"\n          onDataChange={handleSSHKeyChange}\n          allowEditingUploadedText\n          onTextChange={handleSSHKeyText}\n          onTextAreaBlur={handleSSHKeyTextBlur}\n          type=\"text\"\n          value={publicKey}\n          validated={validations.sshKeyBody}\n          onReadStarted={handleFileReadStarted}\n          onReadFinished={handleFileReadFinished}\n          onReadFailed={handleFileReadFailed}\n          onClearClick={handleClear}\n          isLoading={isLoading}\n          filenamePlaceholder=\"Drag a file here\"\n        />\n      </FormGroup>\n    </FormGroup>\n  );\n};\n\nNewSSHKeyForm.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\nexport default NewSSHKeyForm;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Radio, Text, Title } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport PubkeySelect from './PubkeySelect';\nimport NewSSHKeyForm from './NewKeyForm';\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\n\nconst EXIST_KEY_OPTION = 'existKey';\nconst NEW_KEY_OPTION = 'newKey';\n\nconst PublicKeys = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const { isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n  const [isSelectDisabled, disableSelect] = React.useState(false);\n\n  const switchTo = (optionKey) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      uploadedKey: NEW_KEY_OPTION === optionKey,\n    }));\n  };\n\n  const onOptionChange = (_, event) => {\n    switchTo(event.currentTarget.value);\n  };\n\n  React.useEffect(() => {\n    if (isError || pubkeys?.length < 1) {\n      disableSelect(true);\n      switchTo(NEW_KEY_OPTION);\n    }\n  }, [isError, pubkeys]);\n\n  return (\n    <Form className=\"pubkeys\">\n      <Title ouiaId=\"pubkey_title\" headingLevel=\"h1\">\n        SSH keys authentication\n      </Title>\n      <Text ouiaId=\"pubkey_description\">Establish secure, reliable communication and strong encryption to protect data.</Text>\n      <FormGroup role=\"radiogroup\" isStack isRequired label=\"Select a method to add SSH pubic key\">\n        <Radio\n          id=\"existing-pubkey-radio\"\n          ouiaId=\"pubkey_radio\"\n          isChecked={!wizardContext.uploadedKey}\n          isDisabled={isSelectDisabled}\n          name=\"ssh-keys-radio\"\n          value={EXIST_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Select existing SSH public key\"\n          data-testid=\"existing-pubkey-radio\"\n          body={\n            (!wizardContext.uploadedKey || isSelectDisabled) && (\n              <FormGroup label=\"Select public key\">\n                <PubkeySelect setStepValidated={setStepValidated} />\n              </FormGroup>\n            )\n          }\n        />\n        <Radio\n          id=\"upload-pubkey-radio\"\n          ouiaId=\"new_pubkey_radio\"\n          isChecked={wizardContext.uploadedKey}\n          name=\"ssh-keys-radio\"\n          value={NEW_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Add and save a new SSH public key\"\n          description=\"Newly added key will be automatically saved. Result of the provisioning will not be affected this process.\"\n          data-testid=\"upload-pubkey-radio\"\n          body={wizardContext.uploadedKey && <NewSSHKeyForm setStepValidated={setStepValidated} />}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nPublicKeys.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PublicKeys;\n","import React from 'react';\n\nconst intervalGenerator = function* (intervalList) {\n  for (const interval of intervalList) yield interval;\n};\n\nconst useInterval = (list) => {\n  const generatorRef = React.useRef(null);\n  const savedList = React.useRef(list);\n  const [currentInterval, setCurrentInterval] = React.useState();\n\n  React.useEffect(() => {\n    generatorRef.current = intervalGenerator(savedList.current);\n  }, []);\n\n  const nextInterval = () => {\n    const nextValue = generatorRef.current.next().value;\n    setCurrentInterval(nextValue === undefined ? false : nextValue);\n    if (nextValue === undefined) return false;\n    return nextValue;\n  };\n  return { nextInterval, currentInterval };\n};\n\nexport default useInterval;\n","import { AWS_PROVIDER, AZURE_PROVIDER } from './constants';\n\nexport const instanceLink = (instanceID, provider, region) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return `https://console.aws.amazon.com/ec2/home?region=${region}#InstanceDetails:instanceId=${instanceID}`;\n    case AZURE_PROVIDER:\n      return `https://portal.azure.com/#@rhdevcloudops.onmicrosoft.com/resource${instanceID}/overview`;\n    default:\n      return null;\n  }\n};\n\nexport const humanizeInstanceID = (instanceID, provider) => {\n  switch (provider) {\n    case AZURE_PROVIDER:\n      return instanceID.split('/').slice(-1);\n    default:\n      return instanceID;\n  }\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { TableComposable, Thead, Tr, Th, Tbody, Td } from '@patternfly/react-table';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { Button, ClipboardCopy, Card, Pagination } from '@patternfly/react-core';\nimport { useQuery } from 'react-query';\n\nimport { SSHUsername } from './helpers';\nimport { instanceLink, humanizeInstanceID } from '../Common/instanceHelpers';\nimport { fetchReservationByProvider } from '../../API';\n\nconst PER_PAGE_OPTIONS = [\n  { title: '5', value: 5 },\n  { title: '10', value: 10 },\n  { title: '20', value: 20 },\n  { title: '50', value: 50 },\n];\nconst InstancesTable = ({ reservationID, provider, region }) => {\n  const [paginationOptions, setPaginationOptions] = React.useState({ perPage: 5, page: 1, startIdx: 0, endIdx: 5 });\n  const { data: instances } = useQuery(['launchInfo', reservationID], () => fetchReservationByProvider(reservationID, provider), {\n    select: (reservation) => reservation?.instances,\n  });\n\n  const onSetPage = (_, newPage, perPage, startIdx, endIdx) => {\n    setPaginationOptions({ perPage, page: newPage, startIdx, endIdx });\n  };\n\n  const onPerPageSelect = (_, newPerPage, newPage, startIdx, endIdx) => {\n    setPaginationOptions((prevOptions) => ({ ...prevOptions, perPage: newPerPage, page: newPage, startIdx, endIdx }));\n  };\n\n  const instancesPerPage = instances?.slice(paginationOptions.startIdx, paginationOptions.endIdx);\n\n  return (\n    <Card style={{ position: 'relative', marginLeft: '-20%', marginRight: '-20%' }}>\n      <Pagination\n        itemCount={instances?.length || 0}\n        page={paginationOptions.page}\n        onSetPage={onSetPage}\n        perPage={paginationOptions.perPage}\n        onPerPageSelect={onPerPageSelect}\n        perPageOptions={PER_PAGE_OPTIONS}\n        isCompact\n        ouiaId=\"instances-pagination\"\n      />\n      <TableComposable ouiaId=\"instances table\" aria-label=\"instances description table\" variant=\"compact\">\n        <Thead>\n          <Tr>\n            <Th>ID</Th>\n            <Th>DNS</Th>\n            <Th>SSH command</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {instancesPerPage?.map(({ instance_id, detail }) => (\n            <Tr key={instance_id}>\n              <Td aria-label=\"instance id\" dataLabel=\"ID\">\n                <Button\n                  variant=\"link\"\n                  icon={<ExternalLinkAltIcon />}\n                  iconPosition=\"right\"\n                  isInline\n                  component=\"a\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  href={instanceLink(instance_id, provider, region)}\n                >\n                  {humanizeInstanceID(instance_id, provider)}\n                </Button>\n              </Td>\n              <Td aria-label=\"instance dns\" dataLabel=\"DNS\">\n                {detail?.public_dns ? (\n                  <ClipboardCopy isReadOnly hoverTip=\"Copy DNS\" clickTip=\"DNS was copied!\" variant=\"expansion\">\n                    {detail?.public_dns}\n                  </ClipboardCopy>\n                ) : (\n                  'N/A'\n                )}\n              </Td>\n              <Td aria-label=\"ssh command\" dataLabel=\"SSH\">\n                {detail?.public_ipv4 ? (\n                  <ClipboardCopy isReadOnly hoverTip=\"Copy SSH command\" clickTip=\"SSH was copied!\" variant=\"expansion\">\n                    {`ssh ${SSHUsername(provider)}@${detail?.public_ipv4}`}\n                  </ClipboardCopy>\n                ) : (\n                  'N/A'\n                )}\n              </Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    </Card>\n  );\n};\n\nInstancesTable.propTypes = {\n  provider: PropTypes.string.isRequired,\n  region: PropTypes.string.isRequired,\n  reservationID: PropTypes.number.isRequired,\n};\n\nexport default InstancesTable;\n","import { AWS_PROVIDER, AZURE_PROVIDER } from '../../constants';\n\nexport const SSHUsername = (provider) => {\n  switch (provider) {\n    case AWS_PROVIDER:\n      return 'ec2-user';\n    case AZURE_PROVIDER:\n      return 'azureuser';\n    default:\n      '';\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ProgressStepper,\n  ProgressStep,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Title,\n  Text,\n  Popover,\n  Button,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { CogsIcon, PendingIcon, CheckCircleIcon } from '@patternfly/react-icons';\nimport { useMutation, useQuery } from 'react-query';\n\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport { createNewPublicKey, createReservation, fetchReservation } from '../../../../API';\n\nimport useInterval from '../../../Common/Hooks/useInterval';\nimport { POLLING_BACKOFF_INTERVAL, PROVIDERS_INSTANCES_SUPPORT, SSH_STEP } from './constants';\nimport { instanceType, mapCurrentVariant, region, stepsByProvider } from './helpers';\nimport InstancesTable from '../../../InstancesTable';\nimport { humanizeProvider } from '../../../Common/helpers';\n\nconst ReservationProgress = ({ setLaunchSuccess }) => {\n  const [steps, setSteps] = React.useState([]);\n  const [currentError, setCurrentError] = React.useState();\n  const [currentWarning, setCurrentWarning] = React.useState();\n  const [currentStep, setCurrentStep] = React.useState(0);\n  const [currentJobStep, setCurrentJobStep] = React.useState(0);\n  const [reservationID, setReservationID] = React.useState();\n\n  const [\n    {\n      chosenSource,\n      chosenInstanceType,\n      chosenNumOfInstances,\n      chosenRegion,\n      sshPublicName,\n      sshPublicKey,\n      chosenSshKeyId,\n      uploadedKey,\n      chosenImageID,\n      provider,\n      chosenTemplate,\n    },\n  ] = useWizardContext();\n  const { nextInterval, currentInterval } = useInterval(POLLING_BACKOFF_INTERVAL);\n\n  const { mutate: mutateReservation, error: reservationError } = useMutation(createReservation(provider), {\n    onSuccess: (res) => {\n      stepUp();\n      setReservationID(res?.data?.reservation_id);\n    },\n  });\n\n  const reservationParams = () => ({\n    source_id: chosenSource,\n    [instanceType(provider)]: chosenInstanceType,\n    amount: chosenNumOfInstances,\n    image_id: chosenImageID,\n    [region(provider)]: chosenRegion,\n    pubkey_id: chosenSshKeyId,\n    ...(chosenTemplate && { launch_template_id: chosenTemplate }),\n  });\n\n  React.useEffect(() => {\n    if (createReservation) {\n      if (uploadedKey) {\n        setSteps(SSH_STEP.concat(stepsByProvider(provider)));\n        createPublicKey({ name: sshPublicName, body: sshPublicKey });\n      } else {\n        setSteps(stepsByProvider(provider));\n        mutateReservation(reservationParams());\n      }\n    }\n  }, [createReservation, setSteps, uploadedKey]);\n\n  const { mutate: createPublicKey, error: pubkeyError } = useMutation(createNewPublicKey, {\n    onSuccess: (resp) => {\n      stepUp();\n      mutateReservation({\n        ...reservationParams(),\n        pubkey_id: resp?.data?.id,\n      });\n    },\n  });\n\n  // polling request\n  const { data: polledReservation } = useQuery(['reservation', reservationID], () => fetchReservation(reservationID), {\n    enabled: !!reservationID && currentStep < steps.length && !currentError,\n    refetchInterval: (data) => {\n      if (data?.success || !!data?.error) return false;\n      return currentInterval;\n    },\n    onSuccess: (data) => {\n      if (currentJobStep < data.step && !data.error) {\n        setCurrentJobStep((prev) => prev + 1);\n        stepUp();\n      }\n      !data?.success && nextInterval();\n      data.success && setLaunchSuccess();\n    },\n    refetchIntervalInBackground: true,\n  });\n\n  // errors and warnings handling\n  React.useEffect(() => {\n    if (currentInterval === false) {\n      setCurrentWarning(\n        `The launch progress is slower than expected, but we are still on it.\n         It is safe to close this window and check your ${humanizeProvider(provider)} console later`\n      );\n    }\n    if (reservationError || pubkeyError || polledReservation?.error) {\n      const createReservationErrorMsg = reservationError?.response?.data?.msg;\n      const pubkeyErrorMsg = pubkeyError?.response?.data?.msg;\n\n      setCurrentError(createReservationErrorMsg || pubkeyErrorMsg || polledReservation?.error);\n    }\n  }, [reservationError, pubkeyError, polledReservation?.error, currentInterval]);\n\n  const stepUp = () => setCurrentStep((prevStep) => prevStep + 1);\n\n  return (\n    <WizardContextConsumer>\n      {({ goToStepById, onClose }) => (\n        <EmptyState variant=\"large\">\n          <EmptyStateIcon color={(polledReservation?.success && '#3E8635') || null} icon={polledReservation?.success ? CheckCircleIcon : CogsIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\" ouiaId=\"launch-status\">\n            {polledReservation?.success ? 'System(s) launched successfully' : 'Launching system(s)'}\n          </Title>\n          {reservationID && (\n            <Text component=\"small\" ouiaId=\"launch-id\">\n              {`launch ID: ${reservationID}`}\n            </Text>\n          )}\n          <EmptyStateBody>\n            {!polledReservation?.success && (\n              <ProgressStepper isCenterAligned>\n                {steps.map(({ name, description }, step) => {\n                  const variant = mapCurrentVariant(step, currentStep, currentError, currentWarning);\n                  return (\n                    <ProgressStep\n                      variant={variant}\n                      id={name}\n                      key={name}\n                      icon={step > currentStep ? <PendingIcon /> : undefined}\n                      isCurrent={step === currentStep}\n                      description={description}\n                      titleId={name}\n                      aria-label={`step ${name} ${variant}`}\n                      popoverRender={\n                        (currentError || currentWarning) && step === currentStep\n                          ? (stepRef) => (\n                              <Popover\n                                aria-label={`${name} error message`}\n                                headerContent={currentError ? 'Error' : 'Warning'}\n                                bodyContent={currentError || currentWarning}\n                                reference={stepRef}\n                                position=\"right\"\n                              />\n                            )\n                          : undefined\n                      }\n                    >\n                      {name}\n                    </ProgressStep>\n                  );\n                })}\n              </ProgressStepper>\n            )}\n          </EmptyStateBody>\n          {polledReservation?.success && PROVIDERS_INSTANCES_SUPPORT.includes(provider) && (\n            <InstancesTable provider={provider} region={chosenRegion} reservationID={reservationID} />\n          )}\n          {currentError && (\n            <Button id=\"wizard-provisioning-failed-edit-button\" onClick={() => goToStepById(1)} variant=\"primary\">\n              Edit\n            </Button>\n          )}\n          <EmptyStateSecondaryActions>\n            <Button variant=\"link\" isDisabled={!currentError && currentStep < 2} onClick={onClose}>\n              Close\n            </Button>\n          </EmptyStateSecondaryActions>\n        </EmptyState>\n      )}\n    </WizardContextConsumer>\n  );\n};\n\nReservationProgress.propTypes = {\n  setLaunchSuccess: PropTypes.func.isRequired,\n};\n\nexport default ReservationProgress;\n","import React from 'react';\nimport AccountCustomizations from '../steps/AccountCustomizations';\nimport ReviewDetails from './ReviewDetails';\nimport PublicKeys from './Pubkeys';\nimport FinishStep from './ReservationProgress';\nimport { humanizeProvider } from '../../Common/helpers';\n\nconst stringIds = {\n  1: 'account',\n  4: 'sshkey',\n  5: 'review',\n};\n\nexport const stepIdToString = (id) => stringIds[id];\n\nconst defaultSteps = ({\n  stepIdReached,\n  image: { name, id, architecture, provider, sourceId },\n  stepValidation,\n  setStepValidation,\n  setLaunchSuccess,\n}) => [\n  {\n    name: 'Account and customization',\n    steps: [\n      {\n        name: humanizeProvider(provider),\n        id: 1,\n        enableNext: stepValidation.awsStep,\n        component: (\n          <AccountCustomizations\n            provider={provider}\n            architecture={architecture || 'x86_64'}\n            composeID={id}\n            imageSourceID={sourceId}\n            setStepValidated={(validated) => setStepValidation((prev) => ({ ...prev, awsStep: validated }))}\n          />\n        ),\n        canJumpTo: stepIdReached >= 1,\n      },\n    ],\n  },\n  {\n    name: 'SSH key authentication',\n    id: 4,\n    component: <PublicKeys setStepValidated={(validated) => setStepValidation((prev) => ({ ...prev, sshStep: validated }))} />,\n    canJumpTo: stepIdReached >= 4,\n    enableNext: stepValidation.sshStep,\n  },\n  {\n    name: 'Review details',\n    id: 5,\n    component: <ReviewDetails imageName={name} />,\n    canJumpTo: stepIdReached >= 5,\n    nextButtonText: 'Launch',\n  },\n  {\n    name: 'Finish Progress',\n    id: 6,\n    component: <FinishStep setLaunchSuccess={() => setLaunchSuccess(true)} imageID={id} />,\n    isFinishedStep: true,\n  },\n];\n\nexport default defaultSteps;\n","import * as React from 'react';\nimport { Button, ButtonVariant, WizardFooter, WizardContextConsumer } from '@patternfly/react-core';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\n\nimport { stepIdToString } from './steps';\n\nconst CustomFooter = () => (\n  <WizardFooter>\n    <WizardContextConsumer>\n      {({ activeStep, onNext, onBack, onClose }) => {\n        const isValid = activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n\n        return (\n          <>\n            <Button\n              id={`wizard-provisioning-${stepIdToString(activeStep.id)}-next-button`}\n              variant={ButtonVariant.primary}\n              type=\"submit\"\n              onClick={onNext}\n              isDisabled={!isValid}\n            >\n              {activeStep.nextButtonText || 'Next'}\n            </Button>\n            {!activeStep.hideBackButton && (\n              <Button\n                id={`wizard-provisioning-${stepIdToString(activeStep.id)}-back-button`}\n                variant={ButtonVariant.secondary}\n                onClick={onBack}\n                isDisabled={activeStep.id == 1}\n              >\n                Back\n              </Button>\n            )}\n            {!activeStep.hideCancelButton && (\n              <div className={styles.wizardFooterCancel}>\n                <Button variant={ButtonVariant.link} onClick={onClose}>\n                  Cancel\n                </Button>\n              </div>\n            )}\n          </>\n        );\n      }}\n    </WizardContextConsumer>\n  </WizardFooter>\n);\n\nexport default CustomFooter;\n","import PropTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { WizardProvider } from '../Common/WizardContext';\nimport APIProvider from '../Common/Query';\nimport ConfirmModal from '../ConfirmModal';\nimport CustomFooter from './CustomFooter';\nimport defaultSteps from './steps';\nimport './steps/Pubkeys/pubkeys.scss';\n\nconst DEFAULT_STEP_VALIDATION = {\n  sshStep: false,\n  awsStep: false,\n};\n\nconst ProvisioningWizard = ({ isOpen, onClose, image, ...props }) => {\n  const [stepIdReached, setStepIdReached] = React.useState(1);\n  const [stepValidation, setStepValidation] = React.useState(DEFAULT_STEP_VALIDATION);\n  const [isConfirming, setConfirming] = React.useState(false);\n  const [successfulLaunch, setLaunchSuccess] = React.useState();\n\n  const onCustomClose = () => {\n    setConfirming(false);\n    setStepIdReached(1);\n    setStepValidation(DEFAULT_STEP_VALIDATION);\n    onClose();\n  };\n\n  const onWizardClose = () => {\n    if (stepIdReached >= 5 && !successfulLaunch) {\n      setConfirming(true);\n    } else {\n      onCustomClose();\n    }\n  };\n\n  const steps = defaultSteps({\n    stepIdReached,\n    image,\n    stepValidation,\n    setStepValidation,\n    setLaunchSuccess,\n  });\n\n  const onNext = ({ id, name }, { prevId, prevName }) => {\n    console.debug(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\n    setStepIdReached((prevID) => (prevID < id ? id : prevID));\n  };\n\n  return isOpen ? (\n    <WizardProvider>\n      <APIProvider>\n        <Wizard\n          {...props}\n          title=\"Launch\"\n          description={`Launch image ${image.name}`}\n          steps={steps}\n          isOpen\n          onClose={onWizardClose}\n          onNext={onNext}\n          className={'provisioning'}\n          footer={<CustomFooter />}\n        />\n        <ConfirmModal isOpen={isConfirming} onConfirm={onCustomClose} onCancel={() => setConfirming(false)} />\n      </APIProvider>\n    </WizardProvider>\n  ) : null;\n};\n\nProvisioningWizard.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func,\n  image: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    architecture: PropTypes.string,\n    provider: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ProvisioningWizard;\n","export const AWS_PROVIDER = 'aws';\nexport const AZURE_PROVIDER = 'azure';\nexport const GCP_PROVIDER = 'gcp';\nexport const IB_SOURCE_PROVIDERS = [AWS_PROVIDER];\n"],"names":["chosenSource","undefined","chosenNumOfInstances","chosenInstanceType","uploadedKey","chosenRegion","chosenImageID","sshPublicName","sshPublicKey","chosenSshKeyId","chosenSshKeyName","provider","_createContainer","createContainer","values","useState","_objectSpread","initialWizardContext","WizardProvider","Provider","useWizardContext","useTracked","queryClient","QueryClient","_ref","children","React","QueryClientProvider","client","ConfirmModal","isOpen","onConfirm","onCancel","Modal","ouiaId","id","variant","ModalVariant","title","onClose","actions","Button","key","onClick","titleIconVariant","propTypes","PropTypes","defaultRegionByProvider","AWS_PROVIDER","GCP_PROVIDER","AZURE_PROVIDER","Error","concat","humanizeProvider","SOURCES_QUERY_KEY","PUBKEYS_QUERY_KEY","IMAGE_REGIONS_KEY","provisioningUrl","path","imageBuilderURL","typesUrlForProvider","region","fetchSourcesList","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$axios$get","data","_context","prev","next","axios","sent","abrupt","stop","_x","apply","arguments","fetchPubkeysList","_ref2","_callee2","_yield$axios$get2","_context2","fetchInstanceTypesList","_ref3","_callee3","url","_yield$axios$get3","_context3","_x2","_x3","createReservation","_ref4","_callee4","params","_context4","_x4","createNewPublicKey","_ref5","_callee5","_context5","_x5","fetchReservation","_ref6","_callee6","_yield$axios$get4","_context6","_x6","fetchImageClones","_ref7","_callee7","composeID","_yield$axios$get5","_context7","_x7","fetchImageCloneStatus","_ref8","_callee8","cloneID","_yield$axios$get6","_context8","_x8","fetchReservationByProvider","_ref9","_callee9","reservationID","_yield$axios$get7","_context9","_x9","_x10","fetchLaunchTemplates","_ref10","_callee10","sourceID","_yield$axios$get8","_context10","_x11","_x12","SourcesSelect","setValidation","imageSourceID","_useWizardContext","_useWizardContext2","_slicedToArray","_useWizardContext2$","setWizardContext","_React$useState","_React$useState2","setIsOpen","_React$useState3","_React$useState4","selected","setSelected","selectObject","name","toString","compareTo","other","_useQuery","useQuery","enabled","onSuccess","IB_SOURCE_PROVIDERS","find","source","prevState","error","isLoading","sources","console","warn","Alert","isInline","Select","isDisabled","placeholderText","Spinner","isSVG","size","onToggle","openState","selections","onSelect","event","selection","isPlaceholder","map","SelectOption","value","NumberInput","max","min","onMinus","newValue","onChange","input","Math","floor","Number","target","onPlus","inputName","inputAriaLabel","minusBtnAriaLabel","plusBtnAriaLabel","InstanceTypesSelect","architecture","numOptions","setNumOptions","_React$useState5","_React$useState6","filteredTypes","setFilteredTypes","_React$useState7","_React$useState8","prevSearch","setPrevSearch","_React$useState9","_React$useState10","isTypeSupported","setTypeSupported","select","types","filter","type","instanceTypes","TextInput","className","readOnly","toggleAriaLabel","_extends","typeAheadAriaLabel","maxHeight","instanceType","supported","onFilter","_e","inputValue","search","replace","i","includes","length","loadingVariant","text","limit","_types","_types2","slice","index","description","cores","vcpus","parseFloat","memory_mib","toFixed","storage_gb","selectItemsMapper","RegionsSelect","currentRegion","images","_images$data","image","request","isError","clonedImages","clonesStatusQueries","useQueries","clonedImage","queryKey","queryFn","isCloneStatusLoading","some","clone","every","cloneQuery","clonesStatus","query","filteredCloned","_","status","push","_toConsumableArray","label","_images$find","imageID","isRequired","_templates$find2","chosenTemplate","templates","chosenTemplateName","template","selectedTemplate","_templates$find","AccountCustomizationsAWS","setStepValidated","validations","templateFlag","useFlag","errorExists","Object","valid","Form","Title","headingLevel","Text","FormGroup","validated","helperTextInvalid","fieldId","validation","prevValidations","labelIcon","Popover","bodyContent","e","preventDefault","HelpIcon","noVerticalAlign","rel","href","TemplatesSelect","InstanceCounter","AccountCustomizationsGCP","wizardContext","headerContent","AccountCustomizationsAzure","AccountCustomizations","AWS","Azure","GCP","POLLING_BACKOFF_INTERVAL","AWS_STEPS","AZURE_STEPS","GCP_STEPS","SSH_STEP","PROVIDERS_INSTANCES_SUPPORT","stepsByProvider","LaunchDescriptionList","imageName","isExpanded","setIsExpanded","regionLabel","charAt","toUpperCase","providerInstanceType","instanceTypeLabel","ExpandableSection","toggleText","isIndented","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","ReviewDetails","selectOptionObj","PubkeySelect","setSelection","pubkeys","validatePublicKey","ssh","RegExp","test","NewSSHKeyForm","setIsLoading","sshKeyBody","sshKeyName","keyName","setName","publicKey","setPublicKey","updateValidation","inputKey","_defineProperty","isStack","onBlur","FileUpload","onDataChange","allowEditingUploadedText","onTextChange","onTextAreaBlur","onReadStarted","onReadFinished","onReadFailed","onClearClick","filenamePlaceholder","NEW_KEY_OPTION","PublicKeys","isSelectDisabled","disableSelect","switchTo","optionKey","onOptionChange","currentTarget","role","Radio","isChecked","body","intervalGenerator","intervalList","_iterator","_step","interval","_createForOfIteratorHelper","s","n","done","t0","f","finish","instanceLink","instanceID","PER_PAGE_OPTIONS","InstancesTable","perPage","page","startIdx","endIdx","paginationOptions","setPaginationOptions","instances","reservation","instancesPerPage","Card","style","position","marginLeft","marginRight","Pagination","itemCount","onSetPage","newPage","onPerPageSelect","newPerPage","prevOptions","perPageOptions","isCompact","TableComposable","Thead","Tr","Th","Tbody","instance_id","detail","Td","dataLabel","icon","ExternalLinkAltIcon","iconPosition","component","split","humanizeInstanceID","public_dns","ClipboardCopy","isReadOnly","hoverTip","clickTip","public_ipv4","SSHUsername","ReservationProgress","setLaunchSuccess","steps","setSteps","currentError","setCurrentError","currentWarning","setCurrentWarning","currentStep","setCurrentStep","currentJobStep","setCurrentJobStep","_React$useState11","_React$useState12","setReservationID","_useInterval","list","generatorRef","savedList","currentInterval","setCurrentInterval","current","nextInterval","nextValue","useInterval","_useMutation","useMutation","res","_res$data","stepUp","reservation_id","mutateReservation","mutate","reservationError","reservationParams","_objectSpread2","source_id","launch_template_id","createPublicKey","_useMutation2","resp","_resp$data","pubkey_id","pubkeyError","polledReservation","refetchInterval","success","step","refetchIntervalInBackground","_reservationError$res","_reservationError$res2","_pubkeyError$response","_pubkeyError$response2","createReservationErrorMsg","response","msg","pubkeyErrorMsg","prevStep","WizardContextConsumer","goToStepById","EmptyState","EmptyStateIcon","color","CheckCircleIcon","CogsIcon","EmptyStateBody","ProgressStepper","isCenterAligned","mapCurrentVariant","ProgressStep","PendingIcon","isCurrent","titleId","popoverRender","stepRef","reference","EmptyStateSecondaryActions","stringIds","stepIdToString","WizardFooter","activeStep","onNext","onBack","isValid","enableNext","ButtonVariant","nextButtonText","hideBackButton","hideCancelButton","styles","DEFAULT_STEP_VALIDATION","sshStep","awsStep","ProvisioningWizard","props","_objectWithoutProperties","_excluded","stepIdReached","setStepIdReached","stepValidation","setStepValidation","isConfirming","setConfirming","successfulLaunch","onCustomClose","_ref$image","sourceId","canJumpTo","FinishStep","isFinishedStep","defaultSteps","APIProvider","Wizard","prevId","prevName","debug","prevID","footer","CustomFooter"],"sourceRoot":""}