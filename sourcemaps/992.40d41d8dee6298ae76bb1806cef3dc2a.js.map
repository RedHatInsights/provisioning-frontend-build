{"version":3,"file":"js/992.62764bc1a9437d15c7f9.js","mappings":"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","sources":["webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/helpers.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/PubkeySelect.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/NewKeyForm.js","webpack:///./src/Components/ProvisioningWizard/steps/Pubkeys/index.js"],"sourcesContent":["import { AZURE_PROVIDER } from '../../../../constants';\n\nexport const UNSUPPORTED_KEYS = { [AZURE_PROVIDER]: ['ssh-ed25519'] };\n\nexport const isNotSupportKeyFormat = (provider, key) => {\n  return UNSUPPORTED_KEYS[provider]?.includes(key);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Select, SelectOption, Spinner, FormGroup } from '@patternfly/react-core';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport { isNotSupportKeyFormat } from './helpers';\nimport { humanizeProvider } from '../../../Common/helpers';\n\nconst selectOptionObj = (id, name) => ({\n  id: id,\n  toString: () => name,\n  compareTo: (other) => other.id == id,\n});\n\nconst PubkeySelect = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selection, setSelection] = React.useState(\n    wizardContext.chosenSshKeyId ? selectOptionObj(wizardContext.chosenSshKeyId, wizardContext.chosenSshKeyName) : null\n  );\n  const [isKeySupported, setIsKeySupported] = React.useState(true);\n\n  React.useEffect(() => {\n    const keyType = pubkeys?.find((key) => key.id === selection?.id)?.type;\n    if (isNotSupportKeyFormat(wizardContext.provider, keyType)) {\n      setStepValidated(false);\n      setIsKeySupported(false);\n    } else {\n      setStepValidated(!!selection);\n      setIsKeySupported(true);\n    }\n  }, [selection]);\n\n  const { isLoading, isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n\n  const onSelect = (event, value) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      chosenSshKeyId: value.id,\n      chosenSshKeyName: value.toString(),\n    }));\n    setSelection(value);\n    setIsOpen(false);\n  };\n\n  if (isLoading) {\n    return <Spinner isSVG size=\"sm\" aria-label=\"Loading saved SSH keys\" />;\n  }\n\n  if (isError || (pubkeys && pubkeys.length < 1)) {\n    return (\n      <>\n        {isError && <Alert ouiaId=\"pubkey_alert\" variant=\"warning\" isInline title=\"There are problems fetching saved SSH keys\" />}\n        <Select ouiaId=\"pubkey_empty\" isDisabled placeholderText=\"No SSH key found\" aria-label=\"Select public key\" />\n      </>\n    );\n  }\n\n  return (\n    <FormGroup\n      helperTextInvalid={`Key format is not support in ${humanizeProvider(wizardContext.provider)}`}\n      label=\"Select public key\"\n      validated={!isKeySupported && 'error'}\n    >\n      <Select\n        ouiaId=\"select_pubkey\"\n        onToggle={(isExpanded) => setIsOpen(isExpanded)}\n        onSelect={onSelect}\n        isOpen={isOpen}\n        selections={selection}\n        placeholderText=\"Select public key...\"\n        aria-label=\"Select public key\"\n        validated={!isKeySupported && 'error'}\n      >\n        {pubkeys.map(({ id, name }) => (\n          <SelectOption aria-label={`Public key ${name}`} key={id} value={selectOptionObj(id, name)} />\n        ))}\n      </Select>\n    </FormGroup>\n  );\n};\n\nPubkeySelect.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PubkeySelect;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormGroup, TextInput, FileUpload, Button, Popover } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport { UNSUPPORTED_KEYS } from './helpers';\n\n// This is a simple regex format for public ssh key\nconst PUBLIC_KEY_FORMAT = '^(ssh|ecdsa)';\n\nconst NewSSHKeyForm = ({ setStepValidated }) => {\n  const validatePublicKey = (ssh) => {\n    const regex = new RegExp(PUBLIC_KEY_FORMAT);\n    // checks for unsupported keys format\n    if (UNSUPPORTED_KEYS[provider]?.some((key) => ssh?.startsWith(key))) return false;\n    return regex.test(ssh);\n  };\n  const [{ sshPublicName, sshPublicKey, provider }, setWizardContext] = useWizardContext();\n  const [isLoading, setIsLoading] = React.useState();\n  const [validations, setValidation] = React.useState({\n    sshKeyBody: validatePublicKey(sshPublicKey) ? 'success' : 'default',\n    sshKeyName: sshPublicName ? 'success' : 'default',\n  });\n  const [keyName, setName] = React.useState(sshPublicName);\n  const [publicKey, setPublicKey] = React.useState(sshPublicKey);\n\n  React.useEffect(() => {\n    // This effect checks if the entire step is validated\n    const errorExists = Object.values(validations).some((valid) => valid !== 'success');\n    setStepValidated(!errorExists);\n  }, [validations]);\n\n  const updateValidation = (inputKey, value) =>\n    setValidation((prevValidations) => ({\n      ...prevValidations,\n      [inputKey]: value,\n    }));\n\n  const handleNameChange = (value) => {\n    setWizardContext((prevState) => ({ ...prevState, sshPublicName: value }));\n    setName(value);\n  };\n  const handleNameBlur = () => {\n    if (keyName.length === 0) {\n      updateValidation('sshKeyName', 'error');\n      return;\n    }\n    updateValidation('sshKeyName', 'success');\n  };\n  const handleSSHKeyChange = (value) => {\n    if (validatePublicKey(value)) {\n      setWizardContext((prevState) => ({\n        ...prevState,\n        sshPublicKey: value,\n      }));\n      setPublicKey(value);\n      updateValidation('sshKeyBody', 'success');\n    } else {\n      updateValidation('sshKeyBody', 'error');\n    }\n  };\n  const handleSSHKeyText = (text) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicKey: text,\n    }));\n    setPublicKey(text);\n  };\n  const handleSSHKeyTextBlur = () => {\n    if (publicKey === '') {\n      updateValidation('sshKeyBody', 'default');\n    } else {\n      updateValidation('sshKeyBody', validatePublicKey(publicKey) ? 'success' : 'error');\n    }\n  };\n\n  const handleClear = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: undefined,\n      sshPublicKey: undefined,\n    }));\n    setPublicKey('');\n    updateValidation('sshKeyBody', 'default');\n  };\n\n  const handleFileReadStarted = () => {\n    setIsLoading(true);\n  };\n\n  const handleFileReadFinished = () => {\n    setIsLoading(false);\n  };\n  const handleFileReadFailed = () => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      sshPublicName: '<Failed to load the file>',\n    }));\n    updateValidation('sshKeyBody', 'error');\n  };\n\n  return (\n    <FormGroup isStack>\n      <FormGroup validated={validations.sshKeyName} helperTextInvalid=\"Name is required\" label=\"Name\" isRequired fieldId=\"ssh-name\">\n        <TextInput\n          ouiaId=\"new_pubkey_name\"\n          validated={validations.sshKeyName}\n          value={keyName}\n          id=\"public-key-name\"\n          onChange={handleNameChange}\n          onBlur={handleNameBlur}\n          type=\"text\"\n        />\n      </FormGroup>\n      <FormGroup\n        helperTextInvalid=\"Public key format is invalid or unsupported\"\n        label=\"SSH public key\"\n        isRequired\n        fieldId=\"ssh-file\"\n        validated={validations.sshKeyBody}\n        labelIcon={\n          Object.keys(UNSUPPORTED_KEYS).includes(provider) && (\n            <Popover\n              bodyContent={\n                <span>\n                  Azure does not support ed25519 keys, please use RSA key instead. See\n                  <a rel=\"noreferrer\" target=\"_blank\" href=\"https://learn.microsoft.com/en-us/troubleshoot/azure/virtual-machines/ed25519-ssh-keys\">\n                    further information\n                  </a>\n                </span>\n              }\n            >\n              <Button\n                ouiaId=\"pubkey_help\"\n                type=\"button\"\n                aria-label=\"More info for pubkeys format\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"public key content\"\n                className=\"pf-c-form__group-label-help\"\n                variant=\"plain\"\n              >\n                <HelpIcon noVerticalAlign />\n              </Button>\n            </Popover>\n          )\n        }\n      >\n        <FileUpload\n          id=\"public-key-value\"\n          onDataChange={handleSSHKeyChange}\n          allowEditingUploadedText\n          onTextChange={handleSSHKeyText}\n          onTextAreaBlur={handleSSHKeyTextBlur}\n          type=\"text\"\n          value={publicKey}\n          validated={validations.sshKeyBody}\n          onReadStarted={handleFileReadStarted}\n          onReadFinished={handleFileReadFinished}\n          onReadFailed={handleFileReadFailed}\n          onClearClick={handleClear}\n          isLoading={isLoading}\n          filenamePlaceholder=\"Drag a file here\"\n        />\n      </FormGroup>\n    </FormGroup>\n  );\n};\n\nNewSSHKeyForm.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\nexport default NewSSHKeyForm;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form, FormGroup, Radio, Text, Title } from '@patternfly/react-core';\nimport { useQuery } from '@tanstack/react-query';\nimport { useWizardContext } from '../../../Common/WizardContext';\nimport PubkeySelect from './PubkeySelect';\nimport NewSSHKeyForm from './NewKeyForm';\nimport { PUBKEYS_QUERY_KEY } from '../../../../API/queryKeys';\nimport { fetchPubkeysList } from '../../../../API';\n\nconst EXIST_KEY_OPTION = 'existKey';\nconst NEW_KEY_OPTION = 'newKey';\n\nconst PublicKeys = ({ setStepValidated }) => {\n  const [wizardContext, setWizardContext] = useWizardContext();\n  const { isError, data: pubkeys } = useQuery(PUBKEYS_QUERY_KEY, fetchPubkeysList);\n  const [isSelectDisabled, disableSelect] = React.useState(false);\n\n  const switchTo = (optionKey) => {\n    setWizardContext((prevState) => ({\n      ...prevState,\n      uploadedKey: NEW_KEY_OPTION === optionKey,\n    }));\n  };\n\n  const onOptionChange = (_, event) => {\n    switchTo(event.currentTarget.value);\n  };\n\n  React.useEffect(() => {\n    if (isError || pubkeys?.length < 1) {\n      disableSelect(true);\n      switchTo(NEW_KEY_OPTION);\n    }\n  }, [isError, pubkeys]);\n\n  return (\n    <Form className=\"pubkeys\">\n      <Title ouiaId=\"pubkey_title\" headingLevel=\"h1\">\n        SSH key authentication\n      </Title>\n      <Text ouiaId=\"pubkey_description\">Establish secure, reliable communication and strong encryption to protect data.</Text>\n      <FormGroup role=\"radiogroup\" isStack isRequired label=\"Select a method to add SSH public key\">\n        <Radio\n          id=\"existing-pubkey-radio\"\n          ouiaId=\"pubkey_radio\"\n          isChecked={!wizardContext.uploadedKey}\n          isDisabled={isSelectDisabled}\n          name=\"ssh-keys-radio\"\n          value={EXIST_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Select existing SSH public key\"\n          data-testid=\"existing-pubkey-radio\"\n          body={(!wizardContext.uploadedKey || isSelectDisabled) && <PubkeySelect setStepValidated={setStepValidated} />}\n        />\n        <Radio\n          id=\"upload-pubkey-radio\"\n          ouiaId=\"new_pubkey_radio\"\n          isChecked={wizardContext.uploadedKey}\n          name=\"ssh-keys-radio\"\n          value={NEW_KEY_OPTION}\n          onChange={onOptionChange}\n          label=\"Add and save a new SSH public key\"\n          description=\"Newly added key will be automatically saved.\"\n          data-testid=\"upload-pubkey-radio\"\n          body={wizardContext.uploadedKey && <NewSSHKeyForm setStepValidated={setStepValidated} />}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nPublicKeys.propTypes = {\n  setStepValidated: PropTypes.func.isRequired,\n};\n\nexport default PublicKeys;\n"],"names":["UNSUPPORTED_KEYS","_defineProperty","AZURE_PROVIDER","selectOptionObj","id","name","toString","compareTo","other","PubkeySelect","_ref","setStepValidated","_useWizardContext","useWizardContext","_useWizardContext2","_slicedToArray","wizardContext","setWizardContext","_React$useState","React","_React$useState2","isOpen","setIsOpen","_React$useState3","chosenSshKeyId","chosenSshKeyName","_React$useState4","selection","setSelection","_React$useState5","_React$useState6","isKeySupported","setIsKeySupported","_pubkeys$find","provider","key","_UNSUPPORTED_KEYS$pro","keyType","pubkeys","find","type","includes","_useQuery","useQuery","PUBKEYS_QUERY_KEY","fetchPubkeysList","isLoading","isError","data","Spinner","isSVG","size","length","Alert","ouiaId","variant","isInline","title","Select","isDisabled","placeholderText","FormGroup","helperTextInvalid","concat","humanizeProvider","label","validated","onToggle","isExpanded","onSelect","event","value","prevState","_objectSpread","selections","map","_ref2","SelectOption","propTypes","PropTypes","isRequired","NewSSHKeyForm","validatePublicKey","ssh","regex","RegExp","some","startsWith","test","_useWizardContext2$","sshPublicName","sshPublicKey","setIsLoading","sshKeyBody","sshKeyName","validations","setValidation","keyName","setName","_React$useState7","_React$useState8","publicKey","setPublicKey","errorExists","Object","values","valid","updateValidation","inputKey","prevValidations","isStack","fieldId","TextInput","onChange","onBlur","labelIcon","keys","Popover","bodyContent","rel","target","href","Button","onClick","e","preventDefault","className","HelpIcon","noVerticalAlign","FileUpload","onDataChange","allowEditingUploadedText","onTextChange","text","onTextAreaBlur","onReadStarted","onReadFinished","onReadFailed","onClearClick","undefined","filenamePlaceholder","NEW_KEY_OPTION","PublicKeys","isSelectDisabled","disableSelect","switchTo","optionKey","uploadedKey","onOptionChange","_","currentTarget","Form","Title","headingLevel","Text","role","Radio","isChecked","body","description"],"sourceRoot":""}